{"version":3,"file":"billing-23e8ae15.js","mappings":"yMAWe,SAASA,EACpBC,EACAC,GAEA,SAAKD,IAAaC,MAKd,IAAAC,SAAQC,EAAiBH,GAAWG,EAAiBF,KAK7D,SAAqBD,EAA6BC,GAC9C,GAAID,EAASI,iBAAmBJ,EAASI,kBAAoBH,EAASG,gBAClE,OAAO,EAGX,GACIJ,EAASK,qBACTL,EAASK,sBAAwBJ,EAASI,oBAE1C,OAAO,EAGX,OACIL,EAASI,kBAAoBH,EAASG,iBACtCJ,EAASK,sBAAwBJ,EAASI,mBAElD,CApBQC,CAAYN,EAAUC,GAE9B,CAoBA,SAASE,EAAiBI,GAWtB,OAAO,IAAAC,OAAK,gCAEDD,GAAO,CACVE,cAAeF,EAAQE,cAAgB,IAAIC,QAAO,SAAC,GAAmB,QAAP,YAAO,MAb7B,CAC7C,KACA,oBACA,kBACA,sBACA,OACA,QACA,WAUR,C,qCCzDe,SAASC,EAAuBC,GAC3C,OCFsCC,EDEbD,EAAKC,UAAUC,cAAcJ,QAAO,SAACK,GAAS,OAACA,EAAKC,gBAAN,KCDhE,IAAAC,QAAOJ,GAAW,SAACK,EAAOH,GAAS,OAAAG,EAAQH,EAAKI,QAAb,GAAuB,GADtD,IAA2BN,CDG1C,C,sHEiCA,SAAe,EAAAO,EAAA,IA5B8E,SAAC,G,IAC1FC,EAAe,kBACfC,EAAQ,WACRC,EAAI,OAEE,GAAkC,IAAAC,WAAS,GAA1CC,EAAY,KAAEC,EAAe,KAEpC,OACI,qCACkB,kBAAiB,mBACbJ,EAASK,UAAU,0CAAyC,gBAC/DF,EACfG,UAAU,iDAAgD,YAChD,wBACVC,KAAK,IACLC,GAAG,gBACHC,OAAQ,WAAM,OAAAL,GAAgB,EAAhB,EACdM,SAAS,EAAAC,EAAA,IAAe,WAAM,OAAAP,GAAiBD,EAAjB,KAE7BJ,EACG,gBAACa,EAAA,EAAa,CAAC3B,QAASc,EAAiBE,KAAMA,IAE/C,gBAACY,EAAA,EAAgB,CAACL,GAAG,iCAIrC,ICbA,IAAMM,EAA2D,SAAC,G,IAC9DC,EAAS,YACTC,EAAe,kBACfC,EAAe,kBACflB,EAAe,kBACfE,EAAI,OACF,OACF,sBAAIK,UAAU,8CAA8CE,GAAG,mBAC3D,sBAAIF,UAAU,iDACV,iCACc,kBACVC,KAAK,IACLG,SAAS,EAAAC,EAAA,IAAe,WAAM,OAAAM,EAAgBlB,EAAhB,KAE9B,gBAACc,EAAA,EAAgB,CAACL,GAAG,mCAG5BO,EAAUG,KAAI,SAACjC,GAAY,OACxB,sBACIqB,UAAU,gDAA+C,YAC/C,wBACVa,IAAKlC,EAAQuB,IAEb,qBACID,KAAK,IAAG,YACE,+BACVG,SAAS,EAAAC,EAAA,IAAe,WAAM,OAAAK,EAAgB/B,EAAhB,KAE9B,gBAAC2B,EAAA,EAAa,CAAC3B,QAASA,EAASgB,KAAMA,KAXvB,IAX9B,EA2EN,SAAe,IAAAmB,OA9CO,SAAC,G,IACnBL,EAAS,YACThB,EAAe,kBACfE,EAAI,OACJe,EAAe,kBACfC,EAAe,kBAEPI,GAAkC,EAAAC,EAAA,KAA0B,8BAYpE,OACI,uBAAKhB,UAAU,cACX,uBAAKA,UAAU,oBACX,gBAACiB,EAAA,EAAe,CACZC,SACI,gBAACV,EAAiB,CACdC,UAAWA,EACXC,gBAjBI,SAACS,GACpBhD,EAAesB,EAAiB0B,IACjCT,EAAgBS,EAExB,EAcwBR,gBAZI,WACxBA,EAAgBlB,EACpB,EAWwBA,gBAAiBA,EACjBE,KAAMA,KAId,gBAAC,EAAmB,CAChBc,UAAWA,EACXhB,gBAAiBA,EACjBE,KAAMA,MAKjBoB,GAAiC,gBAACK,EAAA,EAA4B,MAG3E,I,sECrGaC,EAAmC,CAC5CjD,SAAU,eACVC,SAAU,eACViD,WAAY,WACZ9C,gBAAiB,WACjBC,oBAAqB,gBAGlB,SAAS8C,EAA8BC,GAC1C,MAAO,UAAGH,EAAkBG,IAASA,EACzC,CAEO,SAASC,EAA2BD,GACvC,MAAO,UAAGD,EAA8BC,GAAK,QACjD,C,QCdA,WAII,WAAYE,GACA,IAAAC,EAA6BD,EAAW,mBAApBF,EAASE,EAAW,KAEhDE,KAAKC,MAAQL,EACbI,KAAKE,SAAWH,CACpB,CA+CJ,OA7CI,YAAAI,SAAA,WACI,OAAOH,KAAKI,KAAK,8BAA+B,aACpD,EAEA,YAAAC,UAAA,WACI,OAAOL,KAAKC,KAChB,EAEA,YAAAK,WAAA,WACI,MAA0B,OAAtBN,KAAKO,aACEP,KAAKI,KAAK,cAAe,cAG7BJ,KAAKI,KAAK,aAAc,aACnC,EAEA,YAAAI,QAAA,WACI,OACIR,KAAKI,KAAK,cAAe,cACzBJ,KAAKI,KAAK,WAAY,cACtBJ,KAAKI,KAAK,eAAgB,aAElC,EAEA,YAAAG,WAAA,WACI,OAAOP,KAAKI,KAAK,UAAW,aAChC,EAEA,YAAAK,YAAA,WACI,OAAOT,KAAKI,KAAK,cAAe,aACpC,EAEU,YAAAA,KAAV,SACIrC,EACA2C,GAEA,IAAMC,EACFX,KAAKE,UAAYF,KAAKE,SAASU,MAAK,SAACC,GAAU,OAA+B,IAA/BA,EAAMC,MAAMC,QAAQhD,EAApB,IAEnD,OAAI4C,EACOA,EAAQD,GAGZ,EACX,EACJ,EAxDA,G,QCAA,yB,8CAIA,QAJ+C,oBAC3C,YAAAF,QAAA,WACI,OAAOR,KAAKI,KAAK,sBAAuB,cAAgBJ,KAAKI,KAAK,WAAY,YAClF,EACJ,EAJA,CAA+C,G,QCA/C,yB,8CAYA,QAZ+C,oBAC3C,YAAAD,SAAA,WACI,MAAO,EACX,EAEA,YAAAG,WAAA,WACI,OAAON,KAAKI,KAAK,WAAY,YACjC,EAEA,YAAAK,YAAA,WACI,MAAO,EACX,EACJ,EAZA,CAA+C,G,QCE/C,wBAiBA,QAhBW,EAAAO,OAAP,SAAcC,G,MACJC,EAAsD,QAAnC,EAAAD,EAAiBlB,0BAAkB,eAAEa,MAC1D,SAAAO,GAAa,OAAAA,EAAUL,MAAMC,QAAQ,YAAc,CAAtC,IAGjB,QAFyBG,aAAgB,EAAhBA,EAAkBE,aAAc,IAGrD,IAAK,KACD,OAAO,IAAI,EAAkBH,GAEjC,IAAK,KACD,OAAO,IAAI,EAAkBA,GAEjC,QACI,OAAO,IAAI,EAAgBA,GAEvC,EACJ,EAjBA,G,sDCQA,QAJiD,SAAC,G,IAAEI,EAAQ,WACxD,OAAO,uBAAKjD,UAAU,WAAWiD,EACrC,ECwCA,SAASC,EAAiBC,EAA0BC,GAChD,IAAMC,EAAU,CAAC,oBAMjB,OAJIF,IAAqBC,GACrBC,EAAQC,KAAK,aAGVD,EAAQE,KAAK,IACxB,CAEA,SAAe,IAAAzC,OA3C0C,SAAC,G,IACtD,IAAAqC,iBAAAA,OAAgB,IAAG,GAAC,EAAC,EACrBK,EAAM,SAEN,IAAAC,aAAAA,OAAY,IAAG,WAACC,GAAe,OAAAA,CAAA,EAAK,EACpC,IAAAC,UAAAA,OAAS,IAAG,GAAC,EAAC,EACdC,EAAK,QAEL,OAAKA,EAAMC,OAKP,qCAAI7D,UAAU,cAAa,YAAYwD,GAAYG,GAC9CC,EAAMhD,KAAI,SAACzB,EAAMiE,GAAU,OACxB,qCACIpD,UAAWkD,EAAiBC,EAAkBC,GAAM,YACzCI,GAAU,UAAGA,EAAM,UAE1BC,EAAa,CACb5C,IAAK1B,EAAKe,GACVkD,MAAK,EACLjE,KAAI,IACN,CACF0B,IAAKuC,IAEJjE,EAAK2E,QAZc,KALzB,IAsBf,IC6HA,QAvJA,uE,OA+GY,EAAAC,aAG6C,SAACC,EAAOC,GACjD,IAAAC,EAAa,EAAKR,MAAK,SAE/B,OAAQO,EAAQtE,MACZ,KAAK,gCACL,KAAK,iCACL,KAAK,8BACL,KAAK,+BACD,OAAO,gCACAsE,GAAO,CACVE,WAAYH,EAAMG,aAG1B,KAAK,kCAKD,OAJIF,EAAQE,aAAeH,EAAMG,YAAcD,GAC3CA,EAASD,EAAQE,YAAc,GAAIH,EAAMI,QAGtCH,EAEX,KAAK,mCAGL,QACI,OAAOA,EAEnB,EAEQ,EAAAI,kBAAoB,SAAC,G,IAAED,EAAM,SAAED,EAAU,aACrC,EAAwB,EAAKT,MAAK,aAAlCY,OAAY,IAAG,IAAAC,KAAI,OAEZC,IAAXJ,GACAE,EAAa,CAAEF,OAAM,EAAED,WAAYA,GAAc,IAEzD,E,CACJ,QArJ2B,oBACvB,YAAAM,OAAA,sBACU,EASF7C,KAAK8B,MARLgB,EAAU,aACVC,EAAY,eACZC,EAAuB,0BACvBC,EAAuB,0BACvBjB,EAAK,QACLX,EAAQ,WACR6B,EAAQ,WACRC,EAAU,aAGd,OACI,gBAAC,KAAS,CACNF,wBAAyBA,EACzBD,wBAAyBA,EACzBI,kBAAmBL,EACnBM,aAAcrD,KAAKqD,aACnBC,QACIR,GAAcA,EAAW,mBACnBA,EAAW,mBACX,KAEVR,SAAUY,EACVK,cAAevD,KAAKyC,kBACpBN,aAAcnC,KAAKmC,eAElB,SAAC,G,IAAEK,EAAM,SAAEgB,EAAa,gBAAEC,EAAY,eAAE5B,EAAY,eAAEN,EAAgB,mBAC7DmC,GAAkB,gCAAKF,KAAoBV,GAIjD,cAFOY,EAAgBC,UAGnB,2BACI,0CAAWD,IACVZ,IAAc,IAAAc,UAASd,EAAW1E,UAAW,aAC1C,gBAACyF,EAAA,EAAK,CACFC,QAAShB,EAAWxE,GACpBA,GAAIwE,EAAW,mBACfiB,wBAAwB,GAEvBjB,EAAWa,WAGnBnB,KAAYR,EAAMC,QACf,gBAAC,EAAO,KACJ,gBAAC,EAAW,CACRJ,aAAcA,EACdN,kBACI,IAAAyC,UAASzC,GAAoBA,GAAoB,EAErDS,MAAOA,EAAMhD,KAAI,SAACzB,GAAS,SAAK0G,cAAc1G,EAAnB,IAC3BwE,UAAW0B,IACX7B,OAAQuB,IAEX9B,GAKrB,GAGZ,EAEQ,YAAA4C,cAAR,SAAsB1G,GAClB,OAAO,gCACAA,GAAI,CACP2E,QAASlC,KAAKkE,cAAc3G,IAEpC,EAEQ,YAAA2G,cAAR,SAAsB3G,GAClB,IAAKA,EAAK4G,oBAAsB5G,EAAK4G,kBAAkBlC,OACnD,OAAO1E,EAAK6G,MAGhB,IAAIC,EAAY,EACZpF,EAAM,EAEV,OAAO1B,EAAK4G,kBAAkB1G,QAAO,SAAC6G,EAAMC,EAAOC,GACvC,IAAAJ,EAAU7G,EAAI,MACdkH,EAAmBF,EAAK,OAAhBtC,EAAWsC,EAAK,OAC1BG,EAAuBD,EAASJ,EAmBtC,OAjBIK,IACAJ,EAAK5C,KACD,gBAAC,EAAAiD,SAAQ,CAAC1F,IAAKA,GAAMmF,EAAMQ,OAAOP,EAAWK,KAEjDzF,GAAO,GAGXoF,EAAYI,EAASxC,EAErBqC,EAAK5C,KAAK,0BAAQzC,IAAKA,GAAMmF,EAAMQ,OAAOH,EAAQxC,KAClDhD,GAAO,EAEHuF,KAAOjH,EAAK4G,mBAAqB,IAAIlC,OAAS,IAC9CqC,EAAK5C,KAAK,gBAAC,EAAAiD,SAAQ,CAAC1F,IAAKA,GAAMmF,EAAMQ,OAAOP,KAC5CpF,GAAO,GAGJqF,CACX,GAAG,GACP,EAEQ,YAAAjB,aAAR,SAAqB9F,GACjB,OAAQA,GAAQA,EAAKsH,OAAU,EACnC,EAwCJ,EArJA,CAA2B,EAAAC,e,uBClB3B,WAII,aACI9E,KAAK+E,eAAgB,IAAAC,kBACzB,CAkCJ,OAhCI,YAAAC,YAAA,SAAYC,GAAZ,WACI,OAAIlF,KAAKmF,sBAITnF,KAAKmF,oBAAsB,IAAIC,SAAQ,SAACC,EAASC,GAC7C,IAAMC,EAAe,mBACfC,EAAS,CACX,cACA,cAAON,GACP,mBACA,mBAAYK,IACd5D,KAAK,KAEN8D,OAAgCF,GAAgB,YAoB7D,SAA8BE,GAC1B,IAAMC,EAAqBD,EAE3B,OAAOE,QACHD,EAAmBE,QACfF,EAAmBE,OAAOC,MAC1BH,EAAmBE,OAAOC,KAAKC,OAE3C,EA3BoBC,CAAqBN,SACrBJ,EAAQI,OAAOG,OAAOC,MAG1BP,GACJ,EAEA,EAAKP,cACAiB,WAAW,4CAAqCR,IAChDS,OAAM,SAACC,GAEJ,MADA,EAAKf,yBAAsBvC,EACrBsD,CACV,GACR,KA1BWlG,KAAKmF,mBA6BpB,EACJ,EAxCA,GCFA,IAAIgB,E,QCCJ,WAII,WACYC,EACArB,QAAA,IAAAA,IDJPoB,IACDA,EAAW,IAAI,GCGPpB,EDALoB,GCDK,KAAAC,QAAAA,EACA,KAAArB,cAAAA,CACT,CAmCP,OAjCI,YAAAsB,uBAAA,WAaI,OAZKrG,KAAKsG,uBACNtG,KAAKsG,qBAAuBtG,KAAK+E,cAC5BE,YAAYjF,KAAKoG,SACjBG,MAAK,SAACC,GACH,IAAKA,EAAcV,OAAOW,oBACtB,MAAM,IAAIC,MAAM,sCAGpB,OAAO,IAAIF,EAAcV,OAAOW,mBACpC,KAGDzG,KAAKsG,oBAChB,EAEA,YAAAK,kBAAA,WACI,IAAMrC,EAAOsC,SAASC,cAAc,OAcpC,OAZK7G,KAAK8G,iBACN9G,KAAK8G,eAAiB9G,KAAK+E,cACtBE,YAAYjF,KAAKoG,SACjBG,MAAK,SAACC,GACH,IAAKA,EAAcV,OAAOiB,cACtB,MAAM,IAAIL,MAAM,gCAGpB,OAAO,IAAIF,EAAcV,OAAOiB,cAAczC,EAClD,KAGDtE,KAAK8G,cAChB,EACJ,EA1CA,GC8IA,SArHA,YAGI,WAAYhF,GAAZ,MACI,YAAMA,IAAM,K,OAiCR,EAAAoB,SAA6C,SAAC3F,GAC5C,MAA2C,EAAKuE,MAA9CkF,EAAM,SAAE,IAAA9D,SAAAA,OAAQ,IAAG,IAAAP,KAAI,EAAEsE,EAAW,cAE5C,EAAKC,0BAA0BP,oBAAoBJ,MAAK,SAACY,GACrDA,EAAQC,WACJ,CACIC,QAAS9J,EAAKe,GACd0I,OAAQA,GAAU,CAAC,qBAAsB,UAE7C,SAACM,GACOL,GACAA,EAAYM,QAGhBrE,EAASoE,EAAQ/J,EACrB,GAER,GACJ,EAEQ,EAAA+E,SAAoC,SAACkF,GACnC,MAA6C,EAAK1F,MAAhD2F,EAAqB,wBAAE,IAAAnF,SAI/B,SAJuC,IAAG,IAAAK,KAAI,GAErC6E,GAAO,IAEXC,EACD,OAAO,EAAKC,oBAGhB,EAAKC,gBAAgBH,GACrB,EAAKI,SAASJ,EAClB,EA/DI,EAAKN,0BAA4B,IAAI,EAA0BpF,EAAMoD,QACrE,EAAK9C,MAAQ,CACTJ,MAAO,GACP6F,aAAc,O,CAEtB,CAyGJ,OAnHiC,oBAY7B,YAAAhF,OAAA,WACU,MAAyD7C,KAAK8B,MAA5DiB,EAAY,eAAE,IAAAL,aAAAA,OAAY,IAAG,IAAAC,KAAI,EAAE,IAAAG,WAAAA,OAAU,IAAG,GAAC,EAAC,EAEpD,EAA0B9C,KAAKoC,MAA7ByF,EAAY,eAAE7F,EAAK,QAE3B,OACI,gBAAC,EAAY,CACTiB,yBAA0B,EAC1BD,yBAA0B,EAC1BD,aAAcA,EACdD,YAAU,gCACHA,GAAU,CACb+E,aAAY,IAEhB7F,MAAOA,EACPmB,WAAW,mCACXb,SAAUtC,KAAKsC,SACfY,SAAUlD,KAAKkD,SACfR,aAAcA,GAEd,uBAAKtE,UAAU,iCAG3B,EAmCQ,YAAAwJ,SAAR,SAAiBJ,GAAjB,WACI,GAAKA,EAAL,CAMM,MAAmCxH,KAAK8B,MAAtCgG,EAAqB,wBAAEhH,EAAK,QAEpCd,KAAKkH,0BAA0Bb,yBAAyBE,MAAK,SAACY,GAC1DA,EAAQY,oBACJ,CACIP,MAAK,EACL1G,MAAOA,GAAS,CAAC,WACjBgH,sBAAqB,IAEzB,SAACE,GAAY,SAAKC,SAAS,CAAEjG,MAAO,EAAKkG,oBAAoBF,IAAhD,GAErB,G,MAhBIhI,KAAKiI,SAAS,CAAEjG,MAAO,IAiB/B,EAEQ,YAAA0F,kBAAR,WACI1H,KAAKiI,SAAS,CACVjG,MAAO,GACP6F,aAAc,OAEtB,EAEQ,YAAAF,gBAAR,SAAwBH,GACpBxH,KAAKiI,UAAS,gCACPjI,KAAKoC,OAAK,CACbyF,aAAcL,GAASA,EAAMvF,OAAS,OAAS,QAEvD,EAEQ,YAAAiG,oBAAR,SACIF,GAEA,OAAQA,GAAW,IAAIhJ,KAAI,SAACsI,GAAW,OACnClD,MAAOkD,EAAOa,YACdtD,MAAOyC,EAAOc,sBAAsBC,UACpClE,kBAAmBmD,EAAOgB,mBAC1BhK,GAAIgJ,EAAOiB,SAJwB,GAM3C,EACJ,EAnHA,CAAiC,EAAAzD,eCsFjC,UAAe,IAAA5F,OArF0E,SAAC,G,IACtF,IAAA2B,MAAkB2H,EAAW,UAAE5I,EAAI,OAAE6I,EAAS,YAC9CC,EAAW,cACXC,EAAkB,qBAClBC,EAAe,kBACf3B,EAAW,cACX/B,EAAM,SACNhC,EAAQ,WACRZ,EAAQ,WACRI,EAAY,eACZqB,EAAsB,yBAEhB8E,EAAYD,EAAkB,UAAGA,EAAe,YAAIhJ,GAASA,EAE7DkJ,GAAe,IAAAC,UAAQ,WAAM,uBAACpK,EAAA,EAAgB,CAACL,GAAG,gCAArB,GAAwD,IAErFgF,EZ3BH,SAAoC1D,GACvC,MAAO,UAAGD,EAA8BC,GAAK,QACjD,CYyBoBoJ,CAA2BpJ,GAErCkD,GAAa,IAAAiG,UACf,WAAM,OACF3K,UAAW,IACP,0CACA,CAAE,iBAAkB2F,IAExBzF,GAAIuB,EAA2BD,GAC/B,kBAAmB0D,EACnBkF,YAAazE,EAAyB,IAAMyE,EAC5C7E,UAAWI,EAAyB+E,EAAe,KACnDL,UAAWA,QAAa7F,EATtB,GAWN,CAAChD,EAAM0D,EAASkF,EAAaM,EAAcL,IAGzCQ,GAAc,IAAAC,cAChB,SAAC,G,IAAErI,EAAK,QAAmB,OACvB,gBAAC,GAAkB,CACfqE,OAAQA,EACR4C,sBAAuBY,EAAc,CAAES,QAAST,QAAgB9F,EAChEG,aAAclC,EAAMgE,MACpB/B,WAAYA,EACZ2E,wBACIiB,GAAcC,EAAmB5H,QAAQ2H,IAAgB,EAE7DzB,YAAaA,EACb3E,SAAUA,EACVY,SAAUA,EACVR,aAAcA,GAZK,GAe3B,CACIwC,EACAwD,EACA5F,EACAmE,EACA3E,EACAY,EACAR,EACAiG,IAIFS,EAAcrF,EAAyB,KACzC,gBAACF,EAAA,EAAK,CAACC,QAAShB,EAAWxE,GAAIA,GAAIgF,EAASS,uBAAwBA,GAC/D+E,GAIT,OACI,uBACI1K,UAAW,IACP,iEACA,CAAE,sBAAuB2F,IAC5B,YACS,kCAEV,gBAACsF,EAAA,EAAS,CACN7B,MAAOyB,EACPlF,uBAAwBA,EACxBK,MAAOgF,EACPxJ,KAAMiJ,IAItB,IC/EA,IAAMS,GAAuB,CACzB9M,SAAU,+BACVC,SAAU,+BACV8M,KAAM,qBACNC,QAAS,6BACTd,YAAa,wBACbe,UAAW,2BACXC,SAAU,0BACVC,MAAO,6BACPjK,WAAY,4BACZ9C,gBAAiB,sBACjBC,oBAAqB,uBAGnB+M,GAA8B,CAChCpN,SAAU,gBACVC,SAAU,gBACV8M,KAAM,iBACNC,QAAS,eACTd,YAAa,UACbe,UAAW,aACXC,SAAU,cACVC,MAAO,MACPjK,WAAY,cACZ9C,gBAAiB,iBACjBC,oBAAqB,kBAGnBgN,GAA6B,CAC/BnB,YAAa,gCACb9L,gBAAiB,8BACjBC,oBAAqB,+BAGnBiN,GAA0B,WAEhC,0E,OACY,EAAAC,cAAuC,IAAAC,aAGvC,EAAAC,8BACJ,IAAAC,UAAQ,SAACtK,GAAS,gBAACiF,GACf,EAAKsF,mBAAmBvK,EAAMiF,EAClC,CAFkB,IAgHd,EAAAuF,yBAAqE,SACzEvF,EACArC,GAEKA,GACD,EAAK2H,mBAAmBL,GAAyBjF,EAEzD,EAEQ,EAAAwF,yBAGI,SAACC,EAAO,G,IAASC,EAAiB,QACpC,EAAuD,EAAKzI,MAA1D0I,EAAS,YAAE,IAAAC,cAAAA,OAAa,IAAG,IAAA9H,KAAI,EAAE,IAAAL,SAAAA,OAAQ,IAAG,IAAAK,KAAI,EAElD5F,ECrMC,SACXkE,EACAuJ,GAEA,QAFA,IAAAA,IAAAA,EAAA,KAEKvJ,IAAqBA,EAAiBlB,mBACvC,MAAO,CAAC,EAGZ,IAAM2K,EAAW,SAA8BzJ,GACzCmB,EAAQsI,EAASvK,WACjBuI,EAAcgC,EAASnK,aACvB4I,EAAUqB,GAAaA,EAAU5J,MAAK,SAAC+J,GAAM,OAAAjC,IAAgBiC,EAAEC,IAAlB,IAC7CC,EAAUH,EAASpK,aAEzB,OAAO,eACH7D,SAAUoO,EACVtB,KAAMmB,EAASlK,UACfkI,YAAW,EACXhJ,WAAYgL,EAASjK,eACjB2B,EAIZ,SAAkB0I,EAAmBC,QAAA,IAAAA,IAAAA,EAAA,IACjC,IAAM3I,EAAQ2I,EAAOnK,MAAK,SAAC,G,IAAEgK,EAAI,OAAEhL,EAAI,OAAe,OAAAgL,IAASE,GAAalL,IAASkL,CAA/B,IAEtD,OAAK1I,EAOE,CACHxF,gBAAiBwF,EAAMxC,KACvB/C,oBAAqBuF,EAAMwI,MARpB,CACHhO,gBAAkBmO,EAAO9I,OAAqB,GAAZ6I,EAClCjO,oBAAqB,GAQjC,CAlBoBsD,CAASiC,EAAO+G,GAAWA,EAAQ6B,cAAgB,CAAC,EAExE,CDgLwBC,CAAaX,EAAOE,IAEpC,IAAAU,OAAMnO,GAAS,SAAC8H,EAAOgE,GACnB4B,EAAc5B,EAAWhE,GACzBvC,EAASuG,EAAWhE,EACxB,IAEI0F,GACA,EAAKJ,mBAAmBL,GAAyBS,EAEzD,EAIQ,EAAAJ,mBAA4E,SAChFtB,EACAhE,GAEM,MAAwD,EAAK/C,MAA3DqJ,EAAU,aAAE,IAAAV,cAAAA,OAAa,IAAG,IAAA9H,KAAI,EAAE,IAAAL,SAAAA,OAAQ,IAAG,IAAAK,KAAI,EAEnDyI,EAAqBD,EACtBjO,QAAO,SAAC2D,GAAU,OAAAA,EAAMwK,QAAUxK,EAAMyK,YAAcC,EAAA,MAApC,IAClBvM,KAAI,SAAC6B,GAAU,OAAAA,EAAMjB,IAAN,KAEhBiJ,IAAciB,IAA2BsB,EAAmBrK,QAAQ8H,IAAc,IAClF4B,EAAc5B,EAAWhE,GAG7BvC,EAASuG,EAAWhE,EACxB,E,CACJ,QAlK0B,oBAStB,YAAA2G,kBAAA,WACY,IAAAC,EAAYzL,KAAK+J,aAAY,QAEjC0B,IACAzL,KAAKiH,YAAcwE,EAAQC,cAA2B,kCAE9D,EAEA,YAAA7I,OAAA,sBACU,EASF7C,KAAK8B,MARLqJ,EAAU,aACVtC,EAAS,YACT8C,EAAyB,4BACzBjD,EAAW,cACXkD,EAAgB,mBAChBC,EAAoB,uBACpBC,EAAqB,wBACrB/H,EAAsB,yBAG1B,OACI,gCACI,gBAACgI,EAAA,EAAQ,KACL,uBACI3N,UAAU,mBACV4N,IAAKhM,KAAK+J,cAEToB,EAAWnM,KAAI,SAAC6B,GACb,IAAMoL,EAAmBpL,EAAMjB,KACzBsM,EAA0BrC,GAAYoC,GAE5C,MACyB,aAArBA,GACAL,GACAD,EAGI,gBAAC,GAA2B,CACxBzG,OAAQ0G,EACRlD,YAAaA,EACb7H,MAAOA,EACPkD,uBAAwBA,EACxB9E,IAAK4B,EAAMvC,GACX2I,YAAa,EAAKA,kBAAerE,EACjCN,SAAU,EAAK8H,yBACflH,SAAU,EAAKmH,yBACf3H,aAAcmJ,EACdjD,gBAAiBC,EACjBF,mBAAoBgD,IAM5B,gBAACQ,EAAA,EAAgB,CACbC,aAAcxC,GAAa/I,EAAMjB,MACjCyM,WAAY,8BAAuB1M,EAC/BsM,IAEJpL,MAAOA,EACPyL,QAASzM,EAA2BoM,GAEpClI,uBAAwBA,EACxB9E,IAAK,UAAG4B,EAAMvC,GAAE,YAAIuC,EAAMjB,MAC1BwE,MACIvD,EAAMwK,OACFxK,EAAW,MAEX,gBAAClC,EAAA,EAAgB,CAACL,GAAIgL,GAAMzI,EAAMjB,QAG1C0C,SAAU,EAAK2H,6BAA6BgC,GAC5CrD,gBACI/H,EAAMwK,OACAxC,EACI,UAAGA,EAAS,iBACZ,eACJA,EAEVL,YAAa,EAAK+D,oBACd1L,EACAqL,IAIhB,MAGPJ,GACG,gBAACU,EAAA,EAAiB,CACd1D,aAAc,gBAACnK,EAAA,EAAgB,CAACL,GAAG,gCACnCsB,KAAMiJ,EAAY,UAAGA,EAAS,sBAAuB,sBAKzE,EAEQ,YAAA0D,oBAAR,SAA4B1L,EAAkBqL,GAClC,IAAApO,EAAakC,KAAK8B,MAAK,SAE/B,OAAIjB,EAAM4L,SAA+B,aAApB5L,EAAMyK,UAChBzK,EAAM4L,QAGVP,GAA2BpO,EAASK,UAAU+N,EACzD,EA+CJ,EAlKA,CAA0B,EAAAQ,WAoK1B,UAAe,EAAA9O,EAAA,GAAa+O,I,mDEnM5B,SA/ByC,WACrC,IAAMvD,GAAc,IAAAF,cAChB,SAACtJ,GAAS,OACN,gBAACiE,EAAA,EAAK,CAAC+I,QAAM,EAAC9I,QAASlE,GACnB,gBAACjB,EAAA,EAAgB,CAACL,GAAG,iCAFnB,GAKV,IAGE2K,GAAc,IAAAC,cAChB,SAAC,G,IAAErI,EAAK,QAAmB,uBAACgM,GAAA,GAAS,iBAAKhM,EAAK,CAAEgH,aAAa,MAAMY,UAAW,MAApD,GAC3B,IAGEqE,GAAS,IAAA/D,UACX,WAAM,OACF,gBAACgE,EAAA,EAAM,KACH,gBAACpO,EAAA,EAAgB,CAACL,GAAG,iCAFvB,GAKN,IAGJ,OACI,gBAACyN,EAAA,EAAQ,CAACe,OAAQA,EAAQlL,OAAO,8BAC7B,gBAACyH,EAAA,EAAS,CAAC7B,MAAOyB,EAAa7E,MAAOgF,EAAaxJ,KAAK,eAAetB,GAAG,iBAGtF,E,oDCgIA,UAAe,EAAAV,EAAA,IACX,IAAAoP,YAAoE,CAChEC,aAAc,SAACC,EAAQ,IACnBC,EADsC,kBAC7BD,EACb,EACAE,iBAAkB,SAAC,G,IAAEC,EAAS,YAAEC,EAAe,kBAAEC,EAAc,iBAAO,OAAC,iCAChE,EAAAC,GAAA,GACCH,EAAUE,GAAkBA,EAAe7E,aAC3C6E,IACH,CACDE,aAAcH,GALoD,EAOtEI,eAAgB,SAAC,G,IAAEH,EAAc,iBAAEF,EAAS,YAAEvP,EAAQ,WAClD,QAAEyP,IACF,EAAAI,GAAA,GAAqC,CACjC7P,SAAQ,EACRqN,WAAYkC,EAAUE,EAAe7E,eACtCkF,YAAYL,EAJf,EAKJM,iBAAkB,SAAC,G,IACf/P,EAAQ,WACRuP,EAAS,YAGT,MAAa,cAFL,YAGF,SAAiC,SAACH,GAC9B,SAAAY,GAAA,GAAoC,CAChC3P,WAAW,QAAyBL,GACpCqN,WAAYkC,EAAUH,GAAUA,EAAOxE,cAF3C,KAKJ,SAAiC,SAACwE,GAC9B,SAAAS,GAAA,GAAqC,CACjC7P,SAAQ,EACRqN,WAAYkC,EAAUH,GAAUA,EAAOxE,cAF3C,GARV,EAaJqF,oBAAoB,GAnCxB,EAjHgB,SAAC,G,IACjBnC,EAAgB,mBAChB2B,EAAc,iBACd5B,EAAyB,4BACzB,IAAAqC,SAAYnP,EAAS,YAAEoP,EAAO,UAC9BZ,EAAS,YACT7C,EAAS,YACT0D,EAAU,aACVzD,EAAa,gBACb0D,EAAuB,0BACvBjB,EAAM,SACNkB,EAAQ,WACRrK,EAAsB,yBACtBsK,EAAa,gBACbC,EAAgB,mBAEV,GAA8C,IAAAtQ,WAAS,GAAtDuQ,EAAkB,KAAEC,EAAqB,KAC1CC,GAAiD,IAAAC,QAAO,MACxD,GAAkE,EAAAtP,EAAA,KAAhEuP,EAAuB,0BAAEC,EAAkC,qCAE7DC,EAAyC,cAAbT,EAC5BU,EAAgBzB,EAAUH,EAAOxE,aACjCqG,EAAmBD,EAAc5R,QAAO,SAAC,GAAe,OAAP,QAAO,IACxD8R,EAAsBD,EAAiB9M,OAAS,EAChDgN,EACFJ,GAA6BG,EAAsBD,EAAmBD,EACpEI,EAAmBP,EAA0BC,EAAqC/P,EAClFsQ,GAAeD,aAAgB,EAAhBA,EAAkBjN,QAAS,EAC1CmN,EACF7B,GC3EO,SACXxQ,EACA8B,EACAsM,GAEA,SAAKpO,KAAY,EAAAsS,EAAA,GAAetS,EAASoO,MAIlC,IAAAmE,MAAKzQ,GAAW,SAAC0Q,GAAoB,OAAAhT,EAAegT,EAAiBxS,EAAhC,GAChD,CDkEQyS,CACIjC,EACA2B,EACA7B,EAAUE,EAAe7E,cAG3B+G,EAAsB,SAAO1S,GAAyB,uD,uEACxDyR,GAAsB,G,iBAGlB,O,uBAAA,GAAMH,EAActR,I,cAApB,S,0CAEqB2J,OACjB4H,EAAiB,G,oBAGrBE,GAAsB,G,6BAQ9B,OACI,gBAACkB,GAAA,EAAI,CAAC7H,aAAa,MACdgH,GAA6BtB,GAC1B,uBAAKnP,UAAU,iBACX,gBAACuR,GAAA,EAAoB,CAAC5S,QAASwQ,KAIvC,gBAACxB,EAAA,EAAQ,CAACzN,GAAG,yBAAyB0N,IAAKyC,GACtCU,IAAiBN,GACd,gBAAC9C,EAAA,EAAQ,CAACzN,GAAG,oBACT,gBAACsR,GAAA,EAAc,CAACC,UAAWtB,GACvB,gBAAC,EAAa,CACV1P,UAAWqQ,EACXpQ,gBAAiB2Q,EACjB1Q,gBAnBA,WACxB0Q,EAAoB,CAAC,EACzB,EAkB4B5R,gBACIuR,EAA0B7B,OAAiB3K,EAE/C7E,KAAM+R,EAAA,eAMpBV,GACE,gBAACW,EAAA,EAAmB,CAACF,UAAWtB,GAC5B,gBAAC,GAAW,CACR/D,UAAWA,EACXmB,0BAA2BA,EAC3BjD,YAAawE,EAAOxE,YACpByC,WAAY8D,EACZrD,iBAAkBA,EAClB7H,uBAAwBA,EACxB0G,cAAeA,EACfqB,uBAAwBmC,MAMvCE,GAA2B,gBAAC,GAAa,MAE1C,uBAAK/P,UAAU,gBACX,gBAAC4R,GAAA,GAAM,CACHC,SAAU/B,GAAcK,EACxBjQ,GAAG,4BACHuR,UAAW3B,GAAcK,EACzBxQ,KAAK,SACLmS,QAASF,GAAA,YAET,gBAACrR,EAAA,EAAgB,CAACL,GAAG,6BAKzC,K,4BE9Je,SAAS6R,GAAmBC,GACvC,IACMC,ECAK,SAA+BD,GAG1C,OAFiBA,GAAYA,EAASE,SAAWF,EAASE,SAAW,IAErD1P,MACZ,SAAC2P,GACG,QAAC,EAAAC,GAAA,GAAyBD,MACzB,EAAAE,GAAA,GAAqBF,MACpBA,EAAQG,UAFV,GAIZ,CDT+BC,CAAsBP,GAEjD,OAAOC,GAHoB,CAAC,aAGoBtP,QAAQsP,EAAmBK,aAAe,EACpFL,EAAmBK,gBACnB9N,CACV,CEqCA,8E,OAmCY,EAAAqK,aAAoD,SAAO,GAGlE,kD,wBAFGQ,EAAY,eACTmD,GAAa,cAF+C,kB,iEAIzD,EAOF5Q,KAAK8B,MANLuM,EAAa,gBACbwC,EAAc,iBACdvD,EAAe,kBACfC,EAAc,iBACduD,EAAgB,mBAChBxC,EAAgB,mBAGdyC,EAA8C,IAC9ChU,EC3FC,SAAkCiU,GACrC,IAAA/T,EAA6B+T,EAAU,aAAtBjU,GAAO,YAAKiU,EAA/B,kBACAC,EAAoBD,EAAWC,kBAErC,OAAO,gCACAlU,GAAO,CACVkU,kBAAiB,EACjBhU,cAAc,EAAAiU,EAAA,GAAkCjU,IAExD,CDkFwBkU,CAAyBP,MAEzBrU,EAAeQ,EAASwQ,IACpCwD,EAASrP,KAAK2M,EAActR,IAG5BuQ,IAAoBG,GACpBsD,EAASrP,KAAKmP,EAAe,CAAEvD,gBAAiBG,K,iBAIhD,O,sBAAA,GAAMrI,QAAQgM,IAAIL,I,cAAlB,SAEAD,I,0CAEqBpK,OACjB4H,EAAiB,G,gCAIjC,QArEsB,oBACZ,YAAA9C,kBAAN,W,sIACU,EAAmDxL,KAAK8B,MAAtDuP,EAAU,aAAE,IAAAC,QAAAA,OAAO,IAAG,IAAA3O,KAAI,EAAE2L,EAAgB,mB,iBAGhD,O,sBAAA,GAAM+C,K,cAAN,SACAC,I,0CAEqB5K,OACjB4H,EAAiB,G,+BAK7B,YAAAzL,OAAA,WACI,IAAM,EAA8C7C,KAAK8B,MAAjDuM,EAAa,gBAAEkD,EAAc,iBAAKzP,GAAK,cAAzC,oCAEN,OACI,gBAACiO,EAAA,EAAmB,CAACF,UAAW0B,GAC5B,uBAAKnT,UAAU,iBACX,uBAAKA,UAAU,yBACX,gBAAC2O,EAAA,EAAM,CAACnL,OAAO,2BACX,gBAACjD,EAAA,EAAgB,CAACL,GAAG,sCAG7B,gBAAC,IAAW,iBACJwD,EAAK,CACTqL,SAAUnN,KAAKiN,aACfoB,cAAeA,MAKnC,EAoCJ,EArEA,CAAsB,EAAA3B,WA4HtB,UAAe,EAAA8E,EAAA,IArDf,SAA2B,G,IACvBC,EAAe,kBACfC,EAAa,gBAGT,EAUAA,EAAa,KATTC,EAAW,cACXC,EAAS,YACTC,EAAO,UACPC,EAAW,cACXC,EAAiB,oBACjBC,EAAuB,0BACvBC,EAAmB,sBAEvB,EACAP,EAAa,SADDQ,EAAyB,4BAAEC,EAAwB,2BAAEC,EAAkB,qBAGjFC,EAAST,IACT5D,EAAW8D,IACX1B,EAAWuB,IACXvU,EAAOyU,IAEb,KAAKQ,GAAWrE,GAAaoC,GAAahT,GACtC,OAAO,KAGL,MAAsDiV,EAAOC,iBAA3DC,EAAmB,sBAAE3G,EAAgB,mBAEvCD,EAA4B,CAAC,KAAM,KAAM,KAAM,MAMrD,OARuD,WAI1C,0DACTA,EAA0BjK,KAAK,MAG5B,CACH6L,eAAgBwE,IAChBvH,UAAWyH,KAAyB,IACpCtG,0BAAyB,EACzBqC,SAAQ,EACRV,gBAAiB8C,EAAS9C,gBAC1BD,UAAW2E,EACXpG,iBAAgB,EAChByF,WAAYI,EAAgBe,yBAC5BjB,eAAgBW,IAChBhE,WAAYiE,KAA8BC,IAC1ChE,SAAU+B,GAAmBC,GAC7BjC,wBAAyBoE,GAAuBpV,EAAuBC,GAAQ,EAC/EiR,cAAeoD,EAAgBgB,qBAC/B5B,eAAgBY,EAAgBZ,eAChC9M,wBAAwB,EAAAA,EAAA,GAAuBsO,EAAOC,kBAE9D,GAEA,CAA+CI,G,2FE1J/C,uE,OAKI,EAAAtQ,MAAwC,CACpCuQ,YAAY,GAiDR,EAAAC,YAA8C,SAACC,GAC5B,EAAKzQ,MAAK,WAG7B,EAAK0Q,YAAYD,EAAME,aAEvB,EAAKC,WAAWH,EAAME,YAE9B,EAEQ,EAAAC,WAA0C,WACvB,EAAK5Q,MAAK,YAMjC,EAAK6F,SAAS,CAAE0K,YAAY,IAAQ,W,MACX,QAArB,IAAKM,wBAAgB,SAAEC,iBAAiB,QAAS,EAAKJ,YAC1D,GACJ,EAEQ,EAAAA,YAA2C,WACxB,EAAK1Q,MAAK,YAMjC,EAAK6F,SAAS,CAAE0K,YAAY,IAAS,W,MACZ,QAArB,IAAKM,wBAAgB,SAAEE,oBAAoB,QAAS,EAAKL,YAC7D,GACJ,E,CAQJ,QA/F6C,oBASzC,YAAAM,qBAAA,WACIxM,SAASuM,oBAAoB,QAASnT,KAAK8S,YAC/C,EAEA,YAAAjQ,OAAA,sBACU,EAAoC7C,KAAK8B,MAAvCT,EAAQ,WAAEgS,EAAS,YAAE/T,EAAQ,WAC7BqT,EAAe3S,KAAKoC,MAAK,WAEjC,OACI,gBAAC,KAAO,KACJ,gBAAC,KAAS,MACL,SAAC,G,IAAE4J,EAAG,MAAO,OACV,uBAAK5N,UAAU,kBAAkBI,QAAS,EAAKoU,YAAa5G,IAAKA,GAC5D3K,EAFK,IAOlB,gBAAC,KAAM,CACHiS,UAAW,CACPC,KAAM,CAAEC,SAAS,GACjBC,KAAM,CAAED,SAAS,GACjBE,gBAAiB,CAAEF,SAAS,IAEhCH,UAAWA,IAEV,SAAC,G,IAAErH,EAAG,MAAE2H,EAAK,QACV,OAAChB,EACG,uBACIvU,UAAU,eACV4N,IAAKA,EACL2H,OAAK,gCACEA,GAAK,CACRC,MAAO,OACPC,OAAQ,KAGXvU,GAVK,IAAd,IAiBpB,EAoCQ,YAAA2T,eAAR,WACI,OACIrM,SAASkN,eAAe,MACxBlN,SAASkN,eAAe,IAEhC,EA7FO,EAAAC,aAAe,CAClBV,UAAW,gBA6FnB,C,CA/FA,CAA6C,EAAA3G,U,2CClBtC,IAAMsH,EAAwB,eACxBC,EAAqC,uB","sources":["webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/shipping/getLineItemsCount.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import {\n    Address,\n    AddressRequestBody,\n    BillingAddress,\n    CustomerAddress,\n} from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(\n    address1?: ComparableAddress,\n    address2?: ComparableAddress,\n): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return (\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\n        isSameState(address1, address2)\n    );\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (\n        address1.stateOrProvinceCode &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    ) {\n        return true;\n    }\n\n    return (\n        address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields,\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { LineItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import React, { FunctionComponent, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\n\nimport { AddressSelectProps } from './AddressSelect';\nimport StaticAddress from './StaticAddress';\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\n    selectedAddress,\n    language,\n    type\n}) => {\n    const [ariaExpanded, setAriaExpanded] = useState(false);\n\n    return (\n        <a\n            aria-controls=\"addressDropdown\"\n            aria-description={language.translate('address.enter_or_select_address_action')}\n            aria-expanded={ariaExpanded}\n            className=\"button dropdown-button dropdown-toggle--select\"\n            data-test=\"address-select-button\"\n            href=\"#\"\n            id=\"addressToggle\"\n            onBlur={() => setAriaExpanded(false)}\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\n        >\n            {selectedAddress ? (\n                <StaticAddress address={selectedAddress} type={type} />\n            ) : (\n                <TranslatedString id=\"address.enter_address_action\" />\n            )}\n        </a>\n    );\n};\n\nexport default withLanguage(AddressSelectButton);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport AddressSelectButton from './AddressSelectButton';\nimport AddressType from './AddressType';\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    type: AddressType;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n    type,\n}) => (\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        {addresses.map((address) => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                data-test=\"address-select-option\"\n                key={address.id}\n            >\n                <a\n                    href=\"#\"\n                    data-test=\"address-select-option-action\"\n                    onClick={preventDefault(() => onSelectAddress(address))}\n                >\n                    <StaticAddress address={address} type={type} />\n                </a>\n            </li>\n        ))}\n    </ul>\n);\n\nconst AddressSelect = ({\n    addresses,\n    selectedAddress,\n    type,\n    onSelectAddress,\n    onUseNewAddress,\n}: AddressSelectProps) => {\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\n\n    const handleSelectAddress = (newAddress: Address) => {\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        onUseNewAddress(selectedAddress);\n    };\n\n    return (\n        <div className=\"form-field\">\n            <div className=\"dropdown--select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AddressSelectMenu\n                            addresses={addresses}\n                            onSelectAddress={handleSelectAddress}\n                            onUseNewAddress={handleUseNewAddress}\n                            selectedAddress={selectedAddress}\n                            type={type}\n                        />\n                    }\n                >\n                    <AddressSelectButton\n                        addresses={addresses}\n                        selectedAddress={selectedAddress}\n                        type={type}\n                    />\n                </DropdownTrigger>\n            </div>\n\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\n        </div>\n    );\n}\n\nexport default memo(AddressSelect);\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.indexOf('country') >= 0);\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n     \n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                     \n                    {...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { includes, isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    defaultHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            defaultHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={defaultHighlightedIndex}\n                initialHighlightedIndex={initialHighlightedIndex}\n                initialInputValue={initialValue}\n                itemToString={this.itemToString}\n                labelId={\n                    inputProps && inputProps['aria-labelledby']\n                        ? inputProps['aria-labelledby']\n                        : null\n                }\n                onChange={onSelect}\n                onStateChange={this.handleStateChange}\n                stateReducer={this.stateReducer}\n            >\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                    const validInputProps = { ...getInputProps(), ...inputProps };\n\n                    delete validInputProps.labelText;\n\n                    return (\n                        <div>\n                            <input {...validInputProps} />\n                            {inputProps && includes(inputProps.className, 'floating') && (\n                                <Label\n                                    htmlFor={inputProps.id}\n                                    id={inputProps['aria-labelledby']}\n                                    isFloatingLabelEnabled={true}\n                                >\n                                    {inputProps.labelText}\n                                </Label>\n                            )}\n                            {isOpen && !!items.length && (\n                                <Popover>\n                                    <PopoverList\n                                        getItemProps={getItemProps}\n                                        highlightedIndex={\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\n                                        }\n                                        items={items.map((item) => this.toPopoverItem(item))}\n                                        menuProps={getMenuProps()}\n                                        testId={listTestId}\n                                    />\n                                    {children}\n                                </Popover>\n                            )}\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n                );\n                key += 1;\n            }\n\n            lastIndex = offset + length;\n\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem | null): string {\n        return (item && item.value) || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>,\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n            case Downshift.stateChangeTypes.blurInput:\n            case Downshift.stateChangeTypes.blurButton:\n            case Downshift.stateChangeTypes.mouseUp:\n            case Downshift.stateChangeTypes.touchEnd:\n                return {\n                    ...changes,\n                    inputValue: state.inputValue,\n                };\n\n            case Downshift.stateChangeTypes.changeInput:\n                if (changes.inputValue !== state.inputValue && onChange) {\n                    onChange(changes.inputValue || '', state.isOpen);\n                }\n\n                return changes;\n\n            case Downshift.stateChangeTypes.keyDownEnter:\n                return changes;\n\n            default:\n                return changes;\n        }\n    };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\nexport interface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                defaultHighlightedIndex={-1}\n                initialHighlightedIndex={-1}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name, maxLength },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n            maxLength: maxLength || undefined,\n        }),\n        [name, labelId, placeholder, labelContent, maxLength],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n            data-test=\"google-autocomplete-form-field\"\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\n        memoize((name) => (value) => {\n            this.syncNonFormikValue(name, value);\n        });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        return (\n            <>\n                <Fieldset>\n                    <div\n                        className=\"checkout-address\"\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\n                    >\n                        {formFields.map((field) => {\n                            const addressFieldName = field.name;\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                            if (\n                                addressFieldName === 'address1' &&\n                                googleMapsApiKey &&\n                                countriesWithAutocomplete\n                            ) {\n                                return (\n                                    <GoogleAutocompleteFormField\n                                        apiKey={googleMapsApiKey}\n                                        countryCode={countryCode}\n                                        field={field}\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                        key={field.id}\n                                        nextElement={this.nextElement || undefined}\n                                        onChange={this.handleAutocompleteChange}\n                                        onSelect={this.handleAutocompleteSelect}\n                                        onToggleOpen={onAutocompleteToggle}\n                                        parentFieldName={fieldName}\n                                        supportedCountries={countriesWithAutocomplete}\n                                    />\n                                );\n                            }\n\n                            return (\n                                <DynamicFormField\n                                    autocomplete={AUTOCOMPLETE[field.name]}\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                                        addressFieldName,\n                                    )}`}\n                                    field={field}\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                    key={`${field.id}-${field.name}`}\n                                    label={\n                                        field.custom ? (\n                                            field.label\n                                        ) : (\n                                            <TranslatedString id={LABEL[field.name]} />\n                                        )\n                                    }\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\n                                    parentFieldName={\n                                        field.custom\n                                            ? fieldName\n                                                ? `${fieldName}.customFields`\n                                                : 'customFields'\n                                            : fieldName\n                                    }\n                                    placeholder={this.getPlaceholderValue(\n                                        field,\n                                        translatedPlaceholderId,\n                                    )}\n                                />\n                            );\n                        })}\n                    </div>\n                </Fieldset>\n                {shouldShowSaveAddress && (\n                    <CheckboxFormField\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n                    />\n                )}\n            </>\n        );\n    }\n\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\n        const { language } = this.props;\n\n        if (field.default && field.fieldType !== 'dropdown') {\n            return field.default;\n        }\n\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\n        value,\n        isOpen,\n    ) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem,\n    ) => void = (place, { value: autocompleteValue }) => {\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\n        fieldName,\n        value,\n    ) => {\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map((field) => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(\n        (name) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\n        [],\n    );\n\n    const legend = useMemo(\n        () => (\n            <Legend>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        ),\n        [],\n    );\n\n    return (\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\n            <FormField input={renderInput} label={renderLabel} name=\"orderComment\" id=\"orderComment\" />\n        </Fieldset>\n    );\n};\n\nexport default OrderComments;\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressForm,\n    AddressFormValues,\n    AddressSelect,\n    AddressType,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isValidCustomerAddress,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\nconst BillingForm = ({\n    googleMapsApiKey,\n    billingAddress,\n    countriesWithAutocomplete,\n    customer: { addresses, isGuest },\n    getFields,\n    countries,\n    isUpdating,\n    setFieldValue,\n    shouldShowOrderComments,\n    values,\n    methodId,\n    isFloatingLabelEnabled,\n    updateAddress,\n    onUnhandledError,\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n    const [isResettingAddress, setIsResettingAddress] = useState(false);\n    const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n    const { isPayPalFastlaneEnabled, mergedBcAndPayPalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\n    const allFormFields = getFields(values.countryCode);\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\n    const hasCustomFormFields = customFormFields.length > 0;\n    const editableFormFields =\n        shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n    const billingAddresses = isPayPalFastlaneEnabled ? mergedBcAndPayPalFastlaneAddresses : addresses;\n    const hasAddresses = billingAddresses?.length > 0;\n    const hasValidCustomerAddress =\n        billingAddress &&\n        isValidCustomerAddress(\n            billingAddress,\n            billingAddresses,\n            getFields(billingAddress.countryCode),\n        );\n\n    const handleSelectAddress = async (address: Partial<Address>) => {\n        setIsResettingAddress(true);\n\n        try {\n            await updateAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        } finally {\n            setIsResettingAddress(false);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        handleSelectAddress({});\n    };\n\n    return (\n        <Form autoComplete=\"on\">\n            {shouldRenderStaticAddress && billingAddress && (\n                <div className=\"form-fieldset\">\n                    <StaticBillingAddress address={billingAddress} />\n                </div>\n            )}\n\n            <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n                {hasAddresses && !shouldRenderStaticAddress && (\n                    <Fieldset id=\"billingAddresses\">\n                        <LoadingOverlay isLoading={isResettingAddress}>\n                            <AddressSelect\n                                addresses={billingAddresses}\n                                onSelectAddress={handleSelectAddress}\n                                onUseNewAddress={handleUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? billingAddress : undefined\n                                }\n                                type={AddressType.Billing}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <AddressFormSkeleton isLoading={isResettingAddress}>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={values.countryCode}\n                            formFields={editableFormFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            setFieldValue={setFieldValue}\n                            shouldShowSaveAddress={!isGuest}\n                        />\n                    </AddressFormSkeleton>\n                )}\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={isUpdating || isResettingAddress}\n                    id=\"checkout-billing-continue\"\n                    isLoading={isUpdating || isResettingAddress}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress,\n            ),\n            orderComment: customerMessage,\n        }),\n        isInitialValid: ({ billingAddress, getFields, language }) =>\n            !!billingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(billingAddress.countryCode),\n            }).isValidSync(billingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: BillingFormProps & WithLanguageProps) =>\n            methodId === 'amazonpay'\n                ? lazy<Partial<AddressFormValues>>((values) =>\n                      getCustomFormFieldsValidationSchema({\n                          translate: getTranslateAddressError(language),\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  )\n                : lazy<Partial<AddressFormValues>>((values) =>\n                      getAddressFormFieldsValidationSchema({\n                          language,\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  ),\n        enableReinitialize: true,\n    })(BillingForm),\n);\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import {\n    Address,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const { updateAddress, isInitializing, ...props } = this.props;\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <div className=\"form-legend-container\">\n                        <Legend testId=\"billing-address-heading\">\n                            <TranslatedString id=\"billing.billing_address_heading\" />\n                        </Legend>\n                    </div>\n                    <BillingForm\n                        {...props}\n                        onSubmit={this.handleSubmit}\n                        updateAddress={updateAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const { enableOrderComments, googleMapsApiKey, features } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["isEqualAddress","address1","address2","isEqual","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","address","omit","customFields","filter","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","reduce","total","quantity","withLanguage","selectedAddress","language","type","useState","ariaExpanded","setAriaExpanded","translate","className","href","id","onBlur","onClick","preventDefault","StaticAddress","TranslatedString","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","map","key","memo","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","DropdownTrigger","dropdown","newAddress","PoweredByPayPalFastlaneLabel","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","access","element","find","field","types","indexOf","create","autocompleteData","countryComponent","component","short_name","children","getItemClassName","highlightedIndex","index","classes","push","join","testId","getItemProps","props","menuProps","items","length","content","stateReducer","state","changes","onChange","inputValue","isOpen","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","maxLength","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","default","Component","AddressForm","hidden","TextInput","legend","Legend","withFormik","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","orderComment","isInitialValid","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","enableReinitialize","customer","isGuest","isUpdating","shouldShowOrderComments","methodId","updateAddress","onUnhandledError","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","isPayPalFastlaneEnabled","mergedBcAndPayPalFastlaneAddresses","shouldRenderStaticAddress","allFormFields","customFormFields","hasCustomFormFields","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidAddress","some","customerAddress","isValidCustomerAddress","handleSelectAddress","Form","StaticBillingAddress","LoadingOverlay","isLoading","AddressType","AddressFormSkeleton","Button","disabled","variant","getBillingMethodId","checkout","preselectedPayment","payments","payment","isGiftCertificatePayment","isStoreCreditPayment","providerId","getPreselectedPayment","addressValues","updateCheckout","navigateNextStep","promises","formValues","shouldSaveAddress","mapCustomFormFieldsFromFormValues","mapAddressFromFormValues","all","initialize","onReady","isInitializing","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkoutSettings","enableOrderComments","loadBillingAddressFields","updateBillingAddress","Billing","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","getRootElement","addEventListener","removeEventListener","componentWillUnmount","placement","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}