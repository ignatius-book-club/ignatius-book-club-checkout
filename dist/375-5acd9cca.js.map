{"version":3,"file":"375-5acd9cca.js","mappings":"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","sources":["webpack://checkout/../../src/client/client.js","webpack://checkout/../../src/client/default-config.js","webpack://checkout/../../../src/common/http-request/content-types.js","webpack://checkout/../../../src/common/http-request/default-options.js","webpack://checkout/../../../src/common/http-request/method-types.js","webpack://checkout/../../../src/common/http-request/payload-transformer.js","webpack://checkout/../../../src/common/http-request/request-factory.js","webpack://checkout/../../../src/common/http-request/request-sender.js","webpack://checkout/../../../src/common/utils/includes.js","webpack://checkout/../../../src/common/utils/index.js","webpack://checkout/../../../src/common/utils/is-empty-string.js","webpack://checkout/../../../src/common/utils/is-emptystring-or-nil.js","webpack://checkout/../../../src/common/utils/is-nil.js","webpack://checkout/../../../src/common/utils/is-object.js","webpack://checkout/../../../src/common/utils/omit-emptystring-and-nil.js","webpack://checkout/../../../src/common/utils/omit-nil.js","webpack://checkout/../../../src/common/utils/omit-property.js","webpack://checkout/../../../src/common/utils/to-number.js","webpack://checkout/../../../src/common/utils/to-snake-case.js","webpack://checkout/../../../src/common/utils/to-string.js","webpack://checkout/../src/index.js","webpack://checkout/../../src/payment/client-token-generator.js","webpack://checkout/../../src/payment/offsite-payment-initializer.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/address-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/customer-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/meta-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/payload-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/store-mapper.js","webpack://checkout/../../src/payment/payment-method-ids.js","webpack://checkout/../../../src/payment/payment-method-mappers/payment-method-id-mapper.js","webpack://checkout/../../src/payment/payment-method-types.js","webpack://checkout/../../src/payment/payment-submitter.js","webpack://checkout/../../src/payment/payment-types.js","webpack://checkout/../../../../src/payment/ppsdk/payment-mappers/ppsdk-payload-mapper.js","webpack://checkout/../../src/payment/url-helper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/customer-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/order-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payload-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payment-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/store-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/cart-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/client-token-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/gateway-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/quote-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/store-mapper.js","webpack://checkout/../../src/store/store-request-sender.js","webpack://checkout/../../src/store/url-helper.js","webpack://checkout/../../../../src/store/v2/mappers/index.js","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"iframe-resizer\"","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/throw-error-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/billing-address-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/billing-address-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/data-store/create-data-store-projection.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/error-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/billing-address-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/error-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/get-environment.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/log/console-logger.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/log/create-logger.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/log/noop-logger.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/log/get-default-logger.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/config/config-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/data-store/is-action-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/data-store/cache-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/coupon-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/config/config-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/config/config-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/coupon-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-params.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-default-includes.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/http-request/join-includes.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/coupon-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/gift-certificate-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/gift-certificate-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/gift-certificate-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/is-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/registry/registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/registry/resolve-id-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@braintree/browser-detection\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/paypal.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/braintree.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/braintree-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/sdk-verison.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/braintree-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/apple-pay.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/bolt.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/bolt-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/custom-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/bolt-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/payment/instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/create-bolt-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal/braintree-paypal-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"local-storage-fallback\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/storage/src/browser-storage.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-connect-phone.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/util-types/guard.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/utils/items-require-shipping.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv3-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-authorizenet-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/cart/cart-source.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-checkoutcom-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-cybersource-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-bnz-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-orbital-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-stripe-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-stripe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-stripeupe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-worldpayaccess-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/customer/create-google-pay-braintree-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/paypal-commerce-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/paypal-commerce-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/create-paypal-commerce-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/stripe-upe.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/is-stripe-accelerated-checkout-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/is-stripe-upe-payment-method-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/stripe-upe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/stripe-upe-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/create-stripe-upe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/create-customer-strategy-registry-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-strategy-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-strategy-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/http-request/merge-includes.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/form/form-fields-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/form/form-fields-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/form/form-fields-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/cart-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/cart-comparator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/errors/cart-changed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-validator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/dom/detachment-observer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/dom/mutation-observer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/url/parse-url.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/iframe/is-iframe-event.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/iframe/iframe-event-poster.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/url/append-www.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/bind-decorator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/iframe/iframe-event-listener.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/google-recaptcha.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/create-spam-protection.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/hosted-field-events.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/hosted-field.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/hosted-form.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/order-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/hosted-form-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/order-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/errors/cart-consistency-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/order-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/create-payment-client.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/address/map-to-internal-address.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/is-billing-address-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/generated/checkout-button-method-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/map-to-internal-coupon.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/map-to-internal-line-items.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/map-to-internal-line-item.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/map-to-internal-cart.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/promotion/map-to-discount-notifications.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/map-to-internal-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/map-to-internal-order.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-request-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-provider-customer/payment-provider-customer-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-provider-customer/payment-provider-customer-actions-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/consignment-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/consignment-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-country-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/consignment-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/spam-protection-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-country-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-country-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/store-credit/store-credit-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/store-credit/store-credit-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/subscriptions-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/store-credit/store-credit-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/subscriptions-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/subscriptions-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/is-plain-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/clone-result.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/googlepay/googlepay-customer-method-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-worldpay-access-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/amazon-pay-v2/amazon-pay-v2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-internal-events.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/errors/extension-not-found-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/create-extension-event-poster.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/iframe/iframe-resizer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/errors/extension-not-loaded-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-internal-commands.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/resizable-iframe-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-commands.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-iframe.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/errors/unsupported-extension-command-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-messenger.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-events.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-event-broadcaster.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/subscribers/subscribe-consignments-change.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/utils/is-card-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-integration/src/adyenv2/adyenv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/utils/is-account-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-integration/src/adyenv2/create-adyenv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-integration/src/adyenv3/adyenv3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/affirm-integration/src/affirm.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/utils/is-boleto-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-integration/src/adyenv3/create-adyenv3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/affirm-integration/src/affirm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/afterpay-integration/src/afterpay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/affirm-integration/src/affirm-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/affirm-integration/src/affirmJs.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/affirm-integration/src/create-affirm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/order-finalization-not-completed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/afterpay-integration/src/afterpay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/afterpay-integration/src/is-afterpay-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/afterpay-integration/src/create-afterpay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/hosted-form/hosted-field-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-3ds.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/utils/is-hosted-card-field-options-map.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/utils/is-hosted-stored-card-field-options-map.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-hosted-form.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-input-validation-error-description.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-hosted-input-validator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-name-on-card-input.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/utils/is-array-of-allowed-props.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/create-bluesnap-direct-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-apm/bluesnap-direct-apm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-provider-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnap-direct-apm/create-bluesnap-direct-apm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bluesnap-direct-integration/src/bluesnapv2/create-bluesnapv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/analytics/src/analytics-extra-items-manager.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/analytics/src/is-analytics-step-tracker-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/payment/is-with-account-creation.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/bolt-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/bolt-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/is-bolt-payment-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/create-bolt-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/is-us-bank-account-instrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-ach/braintree-ach-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-ach/create-braintree-ach-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/create-braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/ui/src/overlay/overlay.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/ui/src/overlay/overlay-style.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/ui/src/loading-indicator/loading-indicator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal/braintree-paypal-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/is-braintree-paypal-provider-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-local-payment-methods/braintree-local-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-local-payment-methods/create-braintree-local-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-accelerated-checkout-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-custom-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cardinal-integration/src/cardinal.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-sepa/checkoutcom-fawry-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-sepa/create-checkoutcom-fawry-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/create-checkoutcom-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-sepa/checkoutcom-sepa-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-sepa/create-checkoutcom-sepa-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-ideal/checkoutcom-ideal-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-ideal/create-checkoutcom-ideal-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-apm/checkoutcom-apm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/checkoutcom-custom-integration/src/checkoutcom-apm/create-checkoutcom-apm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/clearpay-integration/src/clearpay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/clearpay-integration/src/clearpay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/clearpay-integration/src/create-clearpay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/credit-card-integration/src/create-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cardinal-integration/src/cardinal-three-d-secure-flow.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cardinal-integration/src/cardinal-client.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cardinal-integration/src/cardinal-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cybersource-integration/src/cybersource/cybersource-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cybersource-integration/src/cybersource/create-cybersource-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cardinal-integration/src/cardinal-three-d-secure-flow-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/payment/is-credit-card-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cybersource-integration/src/cybersourcev2/cybersourcev2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/cybersource-integration/src/cybersourcev2/create-cybersourcev2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/external-integration/src/external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/external-integration/src/is-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/external-integration/src/create-external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/adyen-utils/src/utils/is-additional-action-error-response.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-adyenv2-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/gateways/google-pay-adyenv3-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-authorizenet-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-checkoutcom-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-cybersource-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-orbital-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-stripe-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-worldpayaccess-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/payment/create-google-pay-braintree-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/mollie-integration/src/mollie-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/humm-integration/src/humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/humm-integration/src/create-humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarnav2/klarna-supported-countries.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarna/klarna-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarna/klarna-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarna/create-klarna-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarnav2/klarnav2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarnav2/klarnav2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarnav2/klarnav2-token-updater.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/klarna-integration/src/klarnav2/create-klarnav2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/legacy-integration/src/legacy-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/legacy-integration/src/create-legacy-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/mollie-integration/src/mollie-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/mollie-integration/src/is-mollie-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/mollie-integration/src/create-mollie-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/no-payment-integration/src/no-payment-data-required-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/no-payment-integration/src/create-no-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/offline-integration/src/offline-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/offline-integration/src/create-offline-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/offsite-integration/src/offsite-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/offsite-integration/src/create-offsite-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/utils/is-paypal-commerce-provider-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/hosted-form/is-credit-card-form-fields.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/hosted-form/is-credit-card-vaulted-form-fields.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/utils/is-paypal-commerce-accelerated-checkout-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit-card/paypal-commerce-credit-cards-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/squarev2-integration/src/enums.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit-card/create-paypal-commerce-credit-cards-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/errors/timeout-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-ratepay/paypal-commerce-ratepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-ratepay/create-paypal-commerce-ratepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-pro-integration/src/paypal-pro-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-pro-integration/src/create-paypal-pro-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/sagepay-integration/src/sage-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/sagepay-integration/src/create-sage-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/sezzle-integration/src/sezzle-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/sezzle-integration/src/create-sezzle-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/squarev2-integration/src/squarev2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/squarev2-integration/src/squarev2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/squarev2-integration/src/squarev2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripev3/stripev3.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripev3/stripev3-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/squarev2-integration/src/is-squarev2-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/squarev2-integration/src/create-squarev2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripev3/is-individual-card-element-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripev3/stripev3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/payment-integration-api/src/billing/is-billing-address-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripev3/stripev3-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripev3/create-stripev3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/stripe-upe-supported-locales.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/format-locale.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/stripe-upe-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/td-bank-integration/src/td-online-mart.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/stripe-integration/src/stripe-upe/create-stripe-upe-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/td-bank-integration/src/td-online-mart-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/geography/country-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/td-bank-integration/src/isTdOnlineMartAdditionalAction.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/td-bank-integration/src/is-create-token-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/td-bank-integration/src/td-online-mart-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/td-bank-integration/src/create-td-online-mart-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/zip-integration/src/zip-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/zip-integration/src/create-zip-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/geography/country-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/geography/country-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/create-payment-strategy-registry-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/storage/browser-storage.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/ppsdk-payment-method.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/storefront-payment-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/guard.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-payment-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-hosted-form.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/barclays/barclays-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/bnz/bnz-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/errors/payment-invalid-form-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/is-braintree-form-fields-map.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/is-credit-card-instrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cardinal/cardinal.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cardinal/cardinal-three-d-secure-flow-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/is-credit-card-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/chasepay/chasepay.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/errors/payment-method-declined-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cba-mpgs/cba-mpgs-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cba-mpgs/cba-mpgs.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/cba-mpgs/cba-mpgs-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/digitalriver/digitalriver.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/digitalriver/digitalriver-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/digitalriver/digitalriver-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/digitalriver/digitalriver-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/browser-info/get-browser-info.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/opy/opy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/opy/opy-payment-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/moneris/moneris-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/opy/opy-library.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/opy/opy-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/opy/opy-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/ppsdk-sub-strategy-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"query-string\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/redirect/RedirectionState.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/continue-handler.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/redirect/redirect.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/continue-handler/human-verification/human-verification.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/step-handler.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/success.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/failure.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/step-handler/create-step-handler.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/ppsdk-completed-payments.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/ppsdk-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/get-ppsdk-payment-method.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/ppsdk-sub-strategy-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/square/square-form.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/initialization-strategies/card.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/initialization-strategies/none.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/sub-strategies/card-sub-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/sub-strategies/none-sub-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/create-ppsdk-sub-strategy-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/ppsdk/ppsdk-payment-resumer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/quadpay/quadpay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/timeout-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/worldpayaccess/worldpayaccess-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/square/square-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/pickup-option-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/date-time/is-future.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/date-time/add-minutes.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-response-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/map-to-paypal-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/map-to-bank-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/map-to-card-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-strategy-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/pickup-option-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/pickup-option-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-strategy-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/stripe-upe/stripe-upe-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/strategies/amazon-pay-v2/amazon-pay-v2-shipping-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-fastlane-profile-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-connect-profile-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/strategies/braintree/braintree-fastlane-shipping-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/stripe-upe/stripe-upe.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-connect-name.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/strategies/paypal-commerce/paypal-commerce-fastlane-shipping-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/strategies/stripe-upe/stripe-upe-shipping-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/signin-email/signin-email-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/signin-email/signin-email-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/signin-email/signin-email-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/error-message-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/to-single-line.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/selector/with-memoized-combiner.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/selector/create-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/selector/create-shallow-equal-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/request-error-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/omit-deep.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/clear-error-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/is-equal.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/replace.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/object-set.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/billing-address-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/billing-address-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/array-replace.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/object-merge.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/cart-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/cart-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/config/config-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/config/config-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/coupon-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/coupon-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/gift-certificate-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/gift-certificate-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-strategy-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-strategy-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/form/form-fields-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/form/form-fields-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/geography/country-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/geography/country-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/order-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/order-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/merge-or-push.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-provider-customer/payment-provider-customer-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-provider-customer/payment-provider-customer-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/consignment-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/consignment-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/object-flatten.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/pickup-option-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/pickup-option-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-country-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-country-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-strategy-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/signin-email/signin-email-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/signin-email/signin-email-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/store-credit/store-credit-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/subscriptions-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/subscriptions-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/create-freeze-proxy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/address/is-address-equal.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/store-credit/store-credit-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-checkout-store.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/create-request-error-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-action-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/billing/billing-address-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/coupon-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment-provider-customer/payment-provider-customer-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-address-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/signin-email/signin-email-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/cart-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/config/config-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/geography/country-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/customer-strategy-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/coupon/gift-certificate-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/instrument/instrument-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/form/form-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-method-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/payment-strategy-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/pickup-option-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-country-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/shipping-strategy-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/consignment-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/order/order-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/store-credit/store-credit-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/subscription/subscriptions-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/extension-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-checkout-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-store-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-store-error-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/checkout-store-status-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout/create-checkout-selectors.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/extension/create-extension-event-broadcaster.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/customer/create-customer-strategy-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/create-payment-strategy-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/shipping/create-shipping-strategy-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/cache-key-maps.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/cache-key-resolver.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/selector/selector-decorator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/utility/is-private.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/dom/is-element-id.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/dom/set-unique-element-id.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/amazon-pay-v2/errors/amazon-pay-v2-config-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-express-integration/src/paypal-express-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/bolt-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-stripe-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/embedded-checkout.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/embed-checkout.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/common/error/errors/custom-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout/@bigcommerce/checkout-sdk/external commonjs \"messageformat\"","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/locale/language-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/locale/create-language-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/currency/currency-formatter.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/analytics-step-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/currency/currency-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/currency/create-currency-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/analytics-tracker-ga.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/noop-step-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/create-step-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-fastlane-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/braintree-utils/src/utils/is-braintree-connect-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/braintree-analytic-tracker/braintree-analytic-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/braintree-analytic-tracker/create-braintree-analytic-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/paypal-commerce-utils/src/utils/is-paypal-fastline-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/paypal-commerce-analytic-tracker/paypal-commerce-analytic-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/analytics/paypal-commerce-analytic-tracker/create-paypal-commerce-analytic-tracker.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/stored-card-hosted-form-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/bodl/analytics-steps.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/hosted-form/create-hosted-form-stored-card-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/bodl/bodl-emitter-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/bodl/noop-bodl-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/bodl/create-bodl-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/packages/core/src/bodl/is-bodl-enabled.ts","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/cache.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/create-request-sender.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/create-timeout.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/index.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/is-promise.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/payload-transformer.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/request-factory.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/request-sender.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/timeout.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/lib/to-form-url-encoded.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/strict-uri-encode/index.js","webpack://checkout/./node_modules/@bigcommerce/checkout-sdk/node_modules/tslib/tslib.es6.js","webpack://checkout/../src/combine-reducers.ts","webpack://checkout/../src/compose-reducers.ts","webpack://checkout/../src/create-action.ts","webpack://checkout/../src/create-data-store.ts","webpack://checkout/../src/create-error-action.ts","webpack://checkout/../src/data-store.ts","webpack://checkout/../src/deep-freeze.ts","webpack://checkout/../src/index.ts","webpack://checkout/../src/is-observable-action-like.ts","webpack://checkout/../src/noop-action-transformer.ts","webpack://checkout/../src/noop-state-transformer.ts","webpack://checkout/./node_modules/@bigcommerce/data-store/node_modules/tslib/tslib.es6.js","webpack://checkout/../src/create-form-poster.ts","webpack://checkout/../src/form-builder.ts","webpack://checkout/../src/form-poster.ts","webpack://checkout/../src/url-utils.ts","webpack://checkout/../src/cache-key-maps.ts","webpack://checkout/../src/cache-key-resolver.ts","webpack://checkout/../src/memoize.ts","webpack://checkout/./node_modules/@bigcommerce/memoize/node_modules/tslib/tslib.es6.js","webpack://checkout/../src/cache.ts","webpack://checkout/../src/create-request-sender.ts","webpack://checkout/../src/create-timeout.ts","webpack://checkout/../src/is-promise.ts","webpack://checkout/../src/payload-transformer.ts","webpack://checkout/../src/request-factory.ts","webpack://checkout/../src/request-sender.ts","webpack://checkout/../src/timeout.ts","webpack://checkout/../src/to-form-url-encoded.ts","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/strict-uri-encode/index.js","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/tslib/tslib.es6.js","webpack://checkout/../src/browser-support.ts","webpack://checkout/../src/create-script-loader.ts","webpack://checkout/../src/create-stylesheet-loader.ts","webpack://checkout/../src/get-script-loader.ts","webpack://checkout/../src/get-stylesheet-loader.ts","webpack://checkout/../src/script-loader.ts","webpack://checkout/../src/stylesheet-loader.ts","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/cache.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/create-request-sender.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/create-timeout.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/index.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/is-promise.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/payload-transformer.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/request-factory.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/request-sender.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/timeout.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/@bigcommerce/request-sender/lib/to-form-url-encoded.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/query-string/index.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/strict-uri-encode/index.js","webpack://checkout/./node_modules/@bigcommerce/script-loader/node_modules/tslib/tslib.es6.js"],"sourcesContent":["import objectAssign from 'object-assign';\nimport OffsitePaymentInitializer from '../payment/offsite-payment-initializer';\nimport PaymentSubmitter from '../payment/payment-submitter';\nimport ClientTokenGenerator from '../payment/client-token-generator';\nimport StoreRequestSender from '../store/store-request-sender';\nimport DEFAULT_CONFIG from './default-config';\n\nexport default class Client {\n    /**\n     * @param {Object} config\n     * @returns {Client}\n     */\n    static create(config) {\n        const clientConfig = objectAssign({}, DEFAULT_CONFIG, config);\n        const offsitePaymentInitializer = OffsitePaymentInitializer.create(clientConfig);\n        const paymentSubmitter = PaymentSubmitter.create(clientConfig);\n        const clientTokenGenerator = ClientTokenGenerator.create(clientConfig);\n        const storeRequestSender = StoreRequestSender.create(clientConfig);\n\n        return new Client(\n            clientConfig,\n            paymentSubmitter,\n            offsitePaymentInitializer,\n            clientTokenGenerator,\n            storeRequestSender,\n        );\n    }\n\n    /**\n     * @param {Object} config\n     * @param {PaymentSubmitter} paymentSubmitter\n     * @param {OffsitePaymentInitializer} offsitePaymentInitializer\n     * @param {ClientTokenGenerator} clientTokenGenerator\n     * @param {StoreRequestSender} storeRequestSender\n     */\n    constructor(\n        config,\n        paymentSubmitter,\n        offsitePaymentInitializer,\n        clientTokenGenerator,\n        storeRequestSender,\n    ) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n\n        /**\n         * @private\n         * @type {PaymentSubmitter}\n         */\n        this.paymentSubmitter = paymentSubmitter;\n\n        /**\n         * @private\n         * @type {OffsitePaymentInitializer}\n         */\n        this.offsitePaymentInitializer = offsitePaymentInitializer;\n\n        /**\n         * @private\n         * @type {ClientTokenGenerator}\n         */\n        this.clientTokenGenerator = clientTokenGenerator;\n\n        /**\n         * @private\n         * @type {StoreRequestSender}\n         */\n        this.storeRequestSender = storeRequestSender;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {void}\n     */\n    setHost(host) {\n        this.config.host = host;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @param {string} target\n     * @returns {void}\n     */\n    initializeOffsitePayment(data, callback, target) {\n        this.offsitePaymentInitializer.initializeOffsitePayment(data, callback, target);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    submitPayment(data, callback) {\n        this.paymentSubmitter.submitPayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        this.clientTokenGenerator.generateClientToken(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        this.storeRequestSender.loadInstruments(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {AddressData} data.shippingAddress\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        this.storeRequestSender.loadInstrumentsWithAddress(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.instrumentId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        this.storeRequestSender.deleteShopperInstrument(data, callback);\n    }\n}\n","const DEFAULT_CONFIG = {\n    host: '',\n};\n\nexport default DEFAULT_CONFIG;\n","export const APPLICATION_JSON = 'application/json';\n","import { APPLICATION_JSON } from './content-types';\nimport { GET } from './method-types';\n\nconst DEFAULT_OPTIONS = {\n    headers: {\n        Accept: APPLICATION_JSON,\n        'Content-Type': APPLICATION_JSON,\n    },\n    method: GET,\n};\n\nexport default DEFAULT_OPTIONS;\n","export const GET = 'GET';\nexport const POST = 'POST';\nexport const DELETE = 'DELETE';\n","import objectAssign from 'object-assign';\nimport { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return {\n            data, headers, status, statusText,\n        };\n    }\n\n    /**\n     * @private\n     * @param {string} rawHeaders\n     * @returns {Object}\n     */\n    parseResponseHeaders(rawHeaders) {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return objectAssign({}, headers, {\n                [key.toLowerCase()]: parts.join(':').trim(),\n            });\n        }, {});\n    }\n}\n","export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n","import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n","/**\n * @param {array|string} items\n * @param {array|string} item\n * @returns {boolean}\n */\nexport default function includes(items, item) {\n    if (!Array.isArray(items) && typeof items !== 'string') {\n        return false;\n    }\n\n    return items.indexOf(item) !== -1;\n}\n","export { default as includes } from './includes';\nexport { default as isNil } from './is-nil';\nexport { default as isObject } from './is-object';\nexport { default as omitEmptyStringAndNil } from './omit-emptystring-and-nil';\nexport { default as omitNil } from './omit-nil';\nexport { default as omitProperty } from './omit-property';\nexport { default as toNumber } from './to-number';\nexport { default as toSnakeCase } from './to-snake-case';\nexport { default as toString } from './to-string';\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyString(value) {\n    return value === '';\n}\n","import isEmptyString from './is-empty-string';\nimport isNil from './is-nil';\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyStringOrNil(value) {\n    return isEmptyString(value) || isNil(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isNil(value) {\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return false;\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n","import isEmptyStringOrNil from './is-emptystring-or-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitEmptyStringAndNil(object) {\n    return omitProperty(object, isEmptyStringOrNil);\n}\n","import isNil from './is-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitNil(object) {\n    return omitProperty(object, isNil);\n}\n","import isObject from './is-object';\n\n/**\n * @param {Object} object\n * @param {Function} predicateFn\n * @returns {Object}\n */\nexport default function omitProperty(object, predicateFn) {\n    if (!isObject(object)) {\n        return object;\n    }\n\n    const keys = Object.keys(object);\n\n    return keys.reduce((result, key) => {\n        const value = object[key];\n\n        if (!predicateFn(value)) {\n            result[key] = value;\n        }\n\n        return result;\n    }, {});\n}\n","/**\n * @param {*} value\n * @returns {number}\n */\nexport default function toNumber(value) {\n    return parseFloat(value) || 0;\n}\n","/**\n * @param {string} string\n * @returns {string}\n */\nexport default function toSnakeCase(string) {\n    if (typeof string !== 'string') {\n        return string;\n    }\n\n    return string.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2')\n        .replace(/[-\\s]+/g, '_')\n        .toLowerCase();\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function toString(value) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'number' && !Number.isNaN(value)) {\n        return value.toString();\n    }\n\n    return '';\n}\n","import Client from './client/client';\n\n/**\n * @param {Object} [config]\n * @returns {Client}\n */\nexport function createClient(config) {\n    return Client.create(config);\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport ClientTokenMapper from './v2/payment-mappers/client-token-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class ClientTokenGenerator {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const clientTokenMapper = ClientTokenMapper.create();\n\n        return new ClientTokenGenerator(urlHelper, requestSender, clientTokenMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {ClientTokenMapper} clientTokenMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, clientTokenMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {ClientTokenMapper}\n         */\n        this.clientTokenMapper = clientTokenMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        const url = this.urlHelper.getGenerateClientTokenUrl();\n        const payload = this.clientTokenMapper.mapToClientToken(data);\n\n        this.requestSender.postRequest(url, payload, {}, callback);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { HOSTED } from './payment-types';\nimport PayloadMapper from './offsite-payment-mappers/payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class OffsitePaymentInitializer {\n    /**\n     * @param {Object} config\n     * @returns {OffsitePaymentInitializer}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const formPoster = createFormPoster();\n        const payloadMapper = PayloadMapper.create();\n\n        return new OffsitePaymentInitializer(urlHelper, formPoster, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {FormPoster} formPoster\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, formPoster, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {FormPoster}\n         */\n        this.formPoster = formPoster;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @param {string} target\n     * @returns {void}\n     * @throws {Error}\n     */\n    initializeOffsitePayment(data, callback, target) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== HOSTED) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getOffsitePaymentUrl();\n\n        this.formPoster.postForm(url, payload, callback, target);\n    }\n}\n","import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {}, store = {} } = data;\n\n        return omitNil({\n            customer_browser_info: navigator.userAgent,\n            customer_email: customer.email,\n            customer_first_name: customer.firstName,\n            customer_geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            customer_id: customer.customerId,\n            customer_last_name: customer.lastName,\n            customer_locale: store.storeLanguage,\n            customer_name: customer.name,\n            customer_phone: customer.phoneNumber,\n            customer_reference: customer.email,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class MetaMapper {\n    /**\n     * @returns {MetaMapper}\n     */\n    static create() {\n        return new MetaMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToMeta(data) {\n        const { source } = data;\n\n        return omitNil({\n            meta_referrer: document.referrer,\n            meta_source: source,\n            meta_user_agent: navigator.userAgent,\n        });\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const {\n            authToken, order = {}, payment = {}, paymentMethod = {},\n        } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n                bc_auth_token: authToken,\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data),\n        );\n\n        const { formattedPayload = {} } = payment;\n\n        objectAssign(payload, formattedPayload);\n\n        return omitNil(payload);\n    }\n}\n","import { omitNil, toString } from '../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            store_hash: store.storeHash,\n            store_id: store.storeId ? toString(store.storeId) : null,\n        });\n    }\n}\n","export const BRAINTREE = 'braintree';\nexport const BRAINTREE_PAYPAL = 'braintreepaypal';\nexport const BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit';\nexport const BRAINTREE_VISACHECKOUT = 'braintreevisacheckout';\nexport const BRAINTREE_LOCAL_METHODS = 'braintreelocalmethods';\nexport const BRAINTREE_GOOGLEPAY = 'googlepaybraintree';\nexport const BRAINTREE_ACH = 'braintreeach';\nexport const BRAINTREE_ACCELERATED_CHECKOUT = 'braintreeacceleratedcheckout';\n\nexport const PAYPAL_COMMERCE = 'paypalcommerce';\nexport const PAYPAL_COMMERCE_ACCELERATED_CHECKOUT = 'paypalcommerceacceleratedcheckout';\nexport const PAYPAL_COMMERCE_ALTERNATIVE_METHODS = 'paypalcommercealternativemethods';\nexport const PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit';\nexport const PAYPAL_COMMERCE_CREDIT_CARDS = 'paypalcommercecreditcards';\nexport const PAYPAL_COMMERCE_VENMO = 'paypalcommercevenmo';\n","import { MULTI_OPTION } from '../payment-method-types';\nimport {\n    BRAINTREE,\n    BRAINTREE_GOOGLEPAY,\n    BRAINTREE_PAYPAL,\n    BRAINTREE_PAYPAL_CREDIT,\n    BRAINTREE_VISACHECKOUT,\n    BRAINTREE_LOCAL_METHODS,\n    BRAINTREE_ACH,\n    BRAINTREE_ACCELERATED_CHECKOUT,\n    PAYPAL_COMMERCE,\n    PAYPAL_COMMERCE_CREDIT,\n    PAYPAL_COMMERCE_CREDIT_CARDS,\n    PAYPAL_COMMERCE_ACCELERATED_CHECKOUT,\n    PAYPAL_COMMERCE_ALTERNATIVE_METHODS,\n    PAYPAL_COMMERCE_VENMO,\n} from '../payment-method-ids';\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isBraintreePaymentMethod(id) {\n    switch (id) {\n    case BRAINTREE_PAYPAL:\n    case BRAINTREE_PAYPAL_CREDIT:\n    case BRAINTREE_VISACHECKOUT:\n    case BRAINTREE_GOOGLEPAY:\n    case BRAINTREE_ACH:\n    case BRAINTREE_LOCAL_METHODS:\n    case BRAINTREE_ACCELERATED_CHECKOUT:\n        return true;\n    default:\n        return false;\n    }\n}\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isPaypalCommercePaymentMethod(id) {\n    switch (id) {\n    case PAYPAL_COMMERCE_CREDIT:\n    case PAYPAL_COMMERCE_CREDIT_CARDS:\n    case PAYPAL_COMMERCE_ACCELERATED_CHECKOUT:\n    case PAYPAL_COMMERCE_ALTERNATIVE_METHODS:\n    case PAYPAL_COMMERCE_VENMO:\n        return true;\n    default:\n        return false;\n    }\n}\n\nexport default class PaymentMethodIdMapper {\n    /**\n     * @returns {PaymentMethodIdMapper}\n     */\n    static create() {\n        return new PaymentMethodIdMapper();\n    }\n\n    /**\n     * @param {PaymentMethod} paymentMethod\n     * @returns {string}\n     */\n    mapToId(paymentMethod) {\n        let { id } = paymentMethod;\n\n        if (paymentMethod.method === MULTI_OPTION) {\n            id = paymentMethod.gateway;\n        }\n\n        if (isBraintreePaymentMethod(id)) {\n            return BRAINTREE;\n        }\n\n        if (isPaypalCommercePaymentMethod(id)) {\n            return PAYPAL_COMMERCE;\n        }\n\n        return id;\n    }\n}\n","export const CREDIT_CARD = 'credit-card';\nexport const MULTI_OPTION = 'multi-option';\nexport const PPSDK_CREDIT_CARD = 'card';\n","import RequestSender from '../common/http-request/request-sender';\nimport { API, SDK } from './payment-types';\nimport PayloadMapper from './v1/payment-mappers/payload-mapper';\nimport PpsdkPayloadMapper from './ppsdk/payment-mappers/ppsdk-payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class PaymentSubmitter {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const payloadMapper = PayloadMapper.create();\n        const ppsdkPayloadMapper = PpsdkPayloadMapper.create();\n\n        return new PaymentSubmitter(urlHelper, requestSender, payloadMapper, ppsdkPayloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {PayloadMapper} payloadMapper\n     * @param {PpsdkPayloadMapper} ppsdkPayloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, payloadMapper, ppsdkPayloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n\n        /**\n        * @private\n        * @type {PpsdkPayloadMapper}\n        */\n        this.ppsdkPayloadMapper = ppsdkPayloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    submitPayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== API && paymentMethod.type !== SDK) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = paymentMethod.type === SDK ? this.ppsdkPayloadMapper.mapToPayload(data) : this.payloadMapper.mapToPayload(data);\n        const url = paymentMethod.type === SDK ? this.urlHelper.getPpsdkPaymentUrl() : this.urlHelper.getPaymentUrl();\n        const options = {\n            headers: this.payloadMapper.mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n}\n","export const API = 'PAYMENT_TYPE_API';\nexport const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\nexport const SDK = 'PAYMENT_TYPE_SDK';\n","import { omitNil, toNumber } from '../../../common/utils';\nimport { PPSDK_CREDIT_CARD } from '../../payment-method-types';\n\nexport default class PpsdkPayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        return new PpsdkPayloadMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { additionalAction, payment = {}, paymentMethod } = data;\n\n        return omitNil({\n            instrument: {\n                expires: {\n                    month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n                    year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n                },\n                name: payment.ccName,\n                number: payment.ccNumber,\n                verification_value: payment.ccCvv,\n                type: PPSDK_CREDIT_CARD,\n            },\n            form_nonce: payment.hostedFormNonce,\n            payment_method_id: paymentMethod.id,\n            human_verification: additionalAction ? {\n                id: 'recaptcha_v2_verification',\n                parameters: {\n                    token: additionalAction ? additionalAction.data.human_verification_token : null,\n                },\n            } : null,\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    get host() {\n        return this.config.host;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getOffsitePaymentUrl() {\n        return `${this.host}/pay/initialize`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPaymentUrl() {\n        return `${this.host}/api/public/v1/orders/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPpsdkPaymentUrl() {\n        return `${this.host}/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getGenerateClientTokenUrl() {\n        return `${this.host}/api/v2/public/payments/client_tokens`;\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {} } = data;\n\n        return omitNil({\n            customer_group: customer.customerGroupName ? { name: customer.customerGroupName } : null,\n            geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            id: customer.customerId ? toString(customer.customerId) : null,\n            session_token: quoteMeta.request ? quoteMeta.request.sessionHash : null,\n        });\n    }\n}\n","import { omitEmptyStringAndNil, omitNil, toString } from '../../../common/utils';\n\nexport default class OrderMapper {\n    /**\n     * @returns {OrderMapper}\n     */\n    static create() {\n        return new OrderMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrder(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            billing_address: this.mapToBillingAddress(data),\n            coupons: this.mapToCoupons(data),\n            currency: order.currency,\n            id: order.orderId ? toString(order.orderId) : null,\n            items: this.mapToItems(data),\n            shipping: this.mapToShipping(data),\n            shipping_address: this.mapToShippingAddress(data),\n            token: order.token,\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        const { customer = {} } = data;\n        const address = this.mapToAddress(data, 'billingAddress');\n\n        if (customer.email) {\n            address.email = customer.email;\n        }\n\n        return address;\n    }\n\n    /**\n     * @private\n     * @param  {PaymentRequestData} data\n     * @return {Shipping[]}\n     */\n    mapToShipping(data) {\n        const { description, transitTime } = data.shippingOption || {};\n\n        if (description) {\n            return [omitEmptyStringAndNil({\n                method: description,\n                transit_time: transitTime,\n            })];\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Coupon[]}\n     */\n    mapToCoupons({ order = {} }) {\n        if (order.coupon && order.coupon.coupons) {\n            return order.coupon.coupons.map(({ code }) => ({ code }));\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n\n        return omitEmptyStringAndNil({\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            country: address.country,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            state_code: address.provinceCode,\n            state: address.province,\n            street_1: address.addressLine1,\n            street_2: address.addressLine2,\n            zip: address.postCode,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map((itemData) => omitNil({\n            code: itemData.id,\n            variant_id: itemData.variantId,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            unit_price: itemData.integerUnitPrice,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            grand_total: order.grandTotal ? order.grandTotal.integerAmount : null,\n            handling: order.handling ? order.handling.integerAmount : null,\n            shipping: order.shipping ? order.shipping.integerAmount : null,\n            subtotal: order.subtotal ? order.subtotal.integerAmount : null,\n            tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CustomerMapper from './customer-mapper';\nimport OrderMapper from './order-mapper';\nimport PaymentMapper from './payment-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const customerMapper = CustomerMapper.create();\n        const orderMapper = OrderMapper.create();\n        const paymentMapper = PaymentMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(customerMapper, orderMapper, paymentMapper, storeMapper);\n    }\n\n    /**\n     * @param {CustomerMapper} customerMapper\n     * @param {OrderMapper} orderMapper\n     * @param {PaymentMapper} paymentMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(customerMapper, orderMapper, paymentMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {OrderMapper}\n         */\n        this.orderMapper = orderMapper;\n\n        /**\n         * @private\n         * @type {PaymentMapper}\n         */\n        this.paymentMapper = paymentMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { order = {}, additionalAction } = data;\n\n        return omitNil({\n            customer: this.customerMapper.mapToCustomer(data),\n            notify_url: order.callbackUrl,\n            order: this.orderMapper.mapToOrder(data),\n            payment: this.paymentMapper.mapToPayment(data),\n            store: this.storeMapper.mapToStore(data),\n            additional_action: additionalAction,\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n            set_as_default_stored_instrument: (payment.instrumentId || payment.shouldSaveInstrument) ? payment.shouldSetAsDefaultInstrument : null,\n        };\n\n        const { method } = paymentMethod;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.formattedPayload) {\n            objectAssign(payload, payment.formattedPayload);\n        } else if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        if (payment.browser_info) {\n            objectAssign(payload, {\n                browser_info: payment.browser_info,\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n            hosted_form_nonce: payment.hostedFormNonce,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            verification_nonce: payment.nonce,\n            three_d_secure: payment.threeDSecure,\n            hosted_form_nonce: payment.hostedFormNonce,\n            token_type: payment.tokenType,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            hash: store.storeHash,\n            id: store.storeId ? toString(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map((itemData) => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            unit_price: itemData.integerUnitPrice,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CartMapper from './cart-mapper';\nimport GatewayMapper from './gateway-mapper';\nimport QuoteMapper from './quote-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class ClientTokenMapper {\n    /**\n     * @returns {ClientTokenMapper}\n     */\n    static create() {\n        const cartMapper = CartMapper.create();\n        const gatewayMapper = GatewayMapper.create();\n        const quoteMapper = QuoteMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new ClientTokenMapper(cartMapper, gatewayMapper, quoteMapper, storeMapper);\n    }\n\n    /**\n     * @param {CartMapper} cartMapper\n     * @param {GatewayMapper} gatewayMapper\n     * @param {QuoteMapper} quoteMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(cartMapper, gatewayMapper, quoteMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CartMapper}\n         */\n        this.cartMapper = cartMapper;\n\n        /**\n         * @private\n         * @type {GatewayMapper}\n         */\n        this.gatewayMapper = gatewayMapper;\n\n        /**\n         * @private\n         * @type {QuoteMapper}\n         */\n        this.quoteMapper = quoteMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToClientToken(data) {\n        return omitNil({\n            cart: this.cartMapper.mapToCart(data),\n            gateway: this.gatewayMapper.mapToGateway(data),\n            quote: this.quoteMapper.mapToQuote(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class GatewayMapper {\n    /**\n     * @returns {GatewayMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new GatewayMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToGateway(data) {\n        const { paymentMethod = {} } = data;\n\n        return omitNil({\n            name: this.paymentMethodIdMapper.mapToId(paymentMethod),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class QuoteMapper {\n    /**\n     * @returns {QuoteMapper}\n     */\n    static create() {\n        return new QuoteMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToQuote(data) {\n        return omitNil({\n            billing_address: this.mapToAddress(data, 'billingAddress'),\n            shipping_address: this.mapToAddress(data, 'shippingAddress'),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const { customer = {} } = data;\n        const address = data[addressKey] || {};\n\n        return omitNil({\n            address_line_1: address.addressLine1,\n            address_line_2: address.addressLine2,\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            email: customer.email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            postal_code: address.postCode,\n            state: address.province,\n        });\n    }\n}\n","import { omitNil, toNumber } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        return omitNil({\n            locale: this.mapToLocale(data),\n            store_identity: this.mapToIdentity(data),\n            urls: this.mapToUrls(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToLocale(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            country_code: store.countryCode,\n            currency_code: store.currencyCode,\n            language_code: store.storeLanguage,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToIdentity(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            id: store.storeId ? toNumber(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToUrls(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            cart: store.cartLink,\n            checkout: store.checkoutLink,\n            confirmation: store.orderConfirmationLink,\n            home: store.shopPath,\n        });\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport { DELETE, POST } from '../common/http-request/method-types';\nimport UrlHelper from './url-helper';\nimport {\n    mapToHeaders,\n    mapToTrustedShippingAddressPayload,\n} from './v2/mappers';\n\nexport default class StoreRequestSender {\n    /**\n     * @param {Object} config\n     * @returns {StoreRequestSender}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n\n        return new StoreRequestSender(urlHelper, requestSender);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode,\n        );\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        const url = this.urlHelper.getTrustedShippingAddressUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode,\n        );\n        const payload = mapToTrustedShippingAddressPayload(data);\n        const options = {\n            method: POST,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentByIdUrl(\n            data.storeId,\n            data.customerId,\n            data.instrumentId,\n            data.currencyCode,\n        );\n        const options = {\n            method: DELETE,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     * @throws {Error}\n     */\n    get host() {\n        if (!this.config || !this.config.host) {\n            throw new Error('Host URL unavailable or not supplied.');\n        }\n\n        return this.config.host;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentsUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v3/stores/${storeId}/shoppers/${customerId}/instruments?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @return {string}\n     */\n    getTrustedShippingAddressUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v3/stores/${storeId}/shoppers/${customerId}/instruments/trusted_shipping_address?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {number} instrumentId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentByIdUrl(storeId, customerId, instrumentId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/${instrumentId}?currency_code=${currencyCode}`;\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.billingAddress\n * @param {CreditCard} data.creditCard\n * @param {boolean} data.defaultInstrument\n * @param {string} data.providerName\n * @return {Object}\n */\nexport function mapToInstrumentPayload(data = {}) {\n    const {\n        providerName,\n        defaultInstrument,\n    } = data;\n\n    const provider = omitNil({ name: providerName });\n\n    return omitNil({\n        provider,\n        credit_card: mapToCreditCard(data),\n        billing_address: mapToAddress(data.billingAddress),\n        default_instrument: defaultInstrument,\n    });\n}\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.shippingAddress\n * @return {Object}\n */\nexport function mapToTrustedShippingAddressPayload(data = {}) {\n    if (Array.isArray(data.shippingAddress)) {\n        return omitNil({\n            shipping_addresses: data.shippingAddress.map((address) => mapToAddress(address)),\n        });\n    }\n\n    return omitNil({\n        shipping_address: mapToAddress(data.shippingAddress),\n    });\n}\n\n/**\n * @param {Object} data\n * @param {string} data.authToken\n * @return {Object}\n */\nexport function mapToHeaders({ authToken: Authorization } = {}) {\n    return omitNil({\n        Authorization,\n    });\n}\n\n/**\n * @param {AddressData} address\n * @return {Object}\n */\nfunction mapToAddress(address = {}) {\n    const state = mapToState(address.provinceCode, address.province);\n\n    return omitNil({\n        address_line_1: address.addressLine1,\n        address_line_2: address.addressLine2,\n        city: address.city,\n        company: address.company,\n        country_code: address.countryCode,\n        email: address.email,\n        first_name: address.firstName,\n        last_name: address.lastName,\n        phone: address.phone,\n        postal_code: address.postCode,\n        state,\n    });\n}\n\n/**\n * @param {string} code\n * @param {string} name\n * @return {Object}\n */\nfunction mapToState(code, name) {\n    return omitNil({\n        code,\n        name,\n    });\n}\n\n/**\n * @param {Object} data\n * @param {CreditCard} data.creditCard\n * @return {Object}\n */\nfunction mapToCreditCard({ creditCard = {} }) {\n    const threeDSecure = omitNil(creditCard.threeDSecure);\n\n    return omitNil({\n        cardholder_name: creditCard.cardholderName,\n        number: creditCard.number,\n        month: creditCard.month,\n        year: creditCard.year,\n        verification_code: creditCard.verificationCode,\n        issue_month: creditCard.issueMonth,\n        issue_year: creditCard.issueYear,\n        issue_number: creditCard.issueNumber,\n        track_data: creditCard.trackData,\n        is_manual_entry: creditCard.isManualEntry,\n        icc_data: creditCard.iccData,\n        fallback_reason: creditCard.fallbackReason,\n        is_contactless: creditCard.isContactless,\n        encrypted_pin_cryptogram: creditCard.encryptedPinCryptogram,\n        encrypted_pin_ksn: creditCard.encryptedPinKsn,\n        three_d_secure: threeDSecure,\n    });\n}\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentProviderCustomer,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingPaymentProviderCustomer:\n            return 'Unable to proceed because payment provider customer is unavailable.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyCouponAction,\n    CouponAction,\n    CouponActionType,\n    RemoveCouponAction,\n} from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(private _couponRequestSender: CouponRequestSender) {}\n\n    applyCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n                this._couponRequestSender\n                    .applyCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.ApplyCouponFailed, response),\n                        );\n                    });\n            });\n    }\n\n    removeCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n                this._couponRequestSender\n                    .removeCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.RemoveCouponFailed, response),\n                        );\n                    });\n            });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES, CheckoutIncludes } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyGiftCertificateAction,\n    GiftCertificateActionType,\n    RemoveGiftCertificateAction,\n} from './gift-certificate-actions';\n\nimport { GiftCertificateRequestSender } from '.';\n\nexport default class GiftCertificateActionCreator {\n    constructor(private _giftCertificateRequestSender: GiftCertificateRequestSender) {}\n\n    applyGiftCertificate(\n        giftCertificate: string,\n        options?: RequestOptions,\n    ): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(GiftCertificateActionType.ApplyGiftCertificateRequested),\n                );\n\n                this._giftCertificateRequestSender\n                    .applyGiftCertificate(checkout.id, giftCertificate, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                GiftCertificateActionType.ApplyGiftCertificateSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                GiftCertificateActionType.ApplyGiftCertificateFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    removeGiftCertificate(\n        giftCertificate: string,\n        options?: RequestOptions,\n    ): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(GiftCertificateActionType.RemoveGiftCertificateRequested),\n                );\n\n                this._giftCertificateRequestSender\n                    .removeGiftCertificate(checkout.id, giftCertificate, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                GiftCertificateActionType.RemoveGiftCertificateSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                GiftCertificateActionType.RemoveGiftCertificateFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyGiftCertificate(\n        checkoutId: string,\n        giftCertificateCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(\n        checkoutId: string,\n        giftCertificateCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { getDefaultLogger } from '../log';\nimport { getEnvironment } from '../utility';\n\nimport Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] !== value) {\n                    result.matches = 0;\n                    break;\n                }\n\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matchedResults = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0);\n\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\n            if (getEnvironment() === 'development') {\n                getDefaultLogger().warn(\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\n                );\n            }\n        }\n\n        const matched = matchedResults[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@braintree/browser-detection\");","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BRAINTREE_SDK_ALPHA_VERSION,\n    BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './sdk-verison';\nimport {\n    BraintreeClient,\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeIntegrityValues {\n    [BRAINTREE_SDK_STABLE_VERSION]?: string;\n    [BRAINTREE_SDK_ALPHA_VERSION]?: string;\n    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]?: string;\n}\n\nexport enum BraintreeModuleName {\n    Client = 'client',\n    Connect = 'connect',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeConnectCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | GooglePayCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Connect]?: BraintreeConnectCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: GooglePayCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    LocalPaymentInstance,\n    BraintreeLocalPaymentCreateConfig\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree Connect\n *\n */\nexport type BraintreeConnectCreator = BraintreeModuleCreator<\n    BraintreeConnect,\n    BraintreeConnectConfig\n>;\n\nexport interface BraintreeConnectConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeConnectStylesOption;\n}\n\nexport interface BraintreeConnect {\n    profile: BraintreeConnectProfile;\n    identity: BraintreeConnectIdentity;\n    ConnectCardComponent: (\n        options: BraintreeConnectCardComponentOptions,\n    ) => BraintreeConnectCardComponent;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeConnectProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n}\n\nexport interface BraintreeConnectWindow extends Window {\n    braintreeConnect: BraintreeConnect;\n}\n\nexport interface BraintreeConnectIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeConnectLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeConnectAuthenticationOptions,\n    ): Promise<BraintreeConnectAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeConnectLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeConnectAuthenticationOptions {\n    styles?: BraintreeConnectStylesOption;\n    fetchFullProfileData?: boolean; // default: true\n}\n\nexport interface BraintreeConnectStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface BraintreeConnectAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeConnectProfileData;\n}\n\nexport interface BraintreeConnectProfileData {\n    connectCustomerAuthAssertionToken: string;\n    connectCustomerId: string;\n    addresses: BraintreeConnectAddress[];\n    cards: BraintreeConnectVaultedInstrument[];\n    phones: BraintreeConnectPhone[];\n    name: BraintreeConnectName;\n}\n\nexport interface BraintreeConnectName {\n    given_name: string;\n    surname: string;\n}\n\nexport interface BraintreeConnectAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeConnectCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeConnectAddress;\n}\n\nexport interface BraintreeConnectPaymentSource {\n    card: BraintreeConnectCardPaymentSource;\n}\n\nexport interface BraintreeConnectVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeConnectPaymentSource;\n}\n\nexport interface BraintreeConnectCardComponentOptions {\n    fields: BraintreeConnectCardComponentFields;\n}\n\nexport interface BraintreeConnectCardComponentFields {\n    [key: string]: BraintreeConnectCardComponentField;\n}\nexport interface BraintreeConnectCardComponentField {\n    placeholder?: string;\n    prefill?: string;\n}\n\nexport interface BraintreeConnectPhone {\n    country_code: string;\n    national_number: string;\n}\n\nexport interface BraintreeConnectTokenizeResult {\n    nonce: string;\n    details: BraintreeConnectTokenizeDetails;\n    description: string;\n    type: string;\n}\n\nexport interface BraintreeConnectTokenizeDetails {\n    bin: string;\n    cardType: string;\n    expirationMoth: string;\n    expirationYear: string;\n    cardholderName: string;\n    lastFour: string;\n    lastTwo: string;\n}\n\nexport interface BraintreeConnectTokenizeOptions {\n    billingAddress?: BraintreeConnectAddress;\n    shippingAddress?: BraintreeConnectAddress;\n}\n\nexport interface Card {\n    type: string;\n    niceType: string;\n    code: {\n        name: 'CVV' | 'CID' | 'CVC';\n        size: number;\n    };\n}\n\nexport interface BraintreeConnectCardComponent {\n    (options: BraintreeConnectCardComponentOptions): BraintreeConnectCardComponent;\n    tokenize(options: BraintreeConnectTokenizeOptions): Promise<BraintreeConnectTokenizeResult>;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>; // FIXME: this method does not support by Connect\n    render(element: string): void;\n}\n\n/**\n *  Braintree Fastlane\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface BraintreeFastlaneTokenizeDetails {\n    bin: string;\n    cardType: string;\n    expirationMoth: string;\n    expirationYear: string;\n    cardholderName: string;\n    lastFour: string;\n    lastTwo: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    tokenize(options: BraintreeConnectTokenizeOptions): Promise<BraintreeConnectTokenizeResult>; // FIXME: this method does not support by Fastlane\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface LocalPaymentInstanceConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: onPaymentStartData, start: () => Promise<void>): void;\n}\n\nexport interface StartPaymentError {\n    code: string;\n}\n\nexport interface onPaymentStartData {\n    paymentId: string;\n}\n\nexport interface LocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface LocalPaymentInstance extends BraintreeModule {\n    startPayment(\n        config: LocalPaymentInstanceConfig,\n        callback: (\n            startPaymentError: StartPaymentError,\n            payload: LocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\nexport type GetLocalPaymentInstance = (localPaymentInstance: LocalPaymentInstance) => void;\n\n/**\n *\n * Braintree GooglePay\n *\n */\n\ntype AddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface GooglePayBraintreeDataRequest {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: AddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface GooglePayBraintreePaymentDataRequestV1 {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(\n        request?: GooglePayBraintreeDataRequest,\n    ): GooglePayBraintreePaymentDataRequestV1;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    braintreeConnect?: BraintreeConnect;\n    braintreeFastlane?: BraintreeFastlane;\n    V?: VisaCheckoutSDK;\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    LegacyAddress,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeConnect,\n    BraintreeConnectStylesOption,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    GetLocalPaymentInstance,\n    GooglePayBraintreeSDK,\n    LocalPaymentInstance,\n    PAYPAL_COMPONENTS,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreeLocalMethods?: LocalPaymentInstance;\n    private googlePay?: Promise<GooglePayBraintreeSDK>;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, storeConfig?: StoreConfig) {\n        this.clientToken = clientToken;\n        this.braintreeScriptLoader.initialize(storeConfig);\n    }\n\n    async getBraintreeConnect(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeConnectStylesOption,\n    ): Promise<BraintreeConnect> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeConnect) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeConnectCreator = await this.braintreeScriptLoader.loadConnect();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeConnect = await braintreeConnectCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeConnect;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async loadBraintreeLocalMethods(\n        getLocalPaymentInstance: GetLocalPaymentInstance,\n        merchantAccountId: string,\n    ) {\n        const client = await this.getClient();\n        const braintreeLocalMethods = await this.braintreeScriptLoader.loadBraintreeLocalMethods();\n\n        if (!this.braintreeLocalMethods) {\n            this.braintreeLocalMethods = await braintreeLocalMethods.create(\n                {\n                    client,\n                    merchantAccountId,\n                },\n                (\n                    localPaymentErr: BraintreeError | undefined,\n                    localPaymentInstance: LocalPaymentInstance,\n                ) => {\n                    if (localPaymentErr) {\n                        throw new Error(localPaymentErr.message);\n                    }\n\n                    getLocalPaymentInstance(localPaymentInstance);\n                },\n            );\n        }\n\n        return this.braintreeLocalMethods;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this.googlePay) {\n            this.googlePay = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this.googlePay;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // TODO: should be added in future migrations\n\n        // await this.teardownModule(this._3ds);\n        // this._3ds = undefined;\n\n        // await this.teardownModule(this._googlePay);\n        // this._googlePay = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","export const BRAINTREE_SDK_STABLE_VERSION = '3.95.0';\nexport const BRAINTREE_SDK_ALPHA_VERSION = '3.95.0-connect-alpha.12';\nexport const BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION = '3.101.0-fastlane-beta.7.2';\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethodClientUnavailableError,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeIntegrityValues } from './braintree';\nimport {\n    BRAINTREE_SDK_ALPHA_VERSION,\n    BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './sdk-verison';\nimport {\n    BraintreeClientCreator,\n    BraintreeConnectCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n    GooglePayCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    private braintreeSdkVersion: keyof BraintreeIntegrityValues = BRAINTREE_SDK_STABLE_VERSION;\n\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    // TODO: this method is needed only for braintree Fastlane, so can be removed after Beta state\n    // TODO: this method should be moved to BraintreeSdk class in the future\n    initialize(storeConfig?: StoreConfig) {\n        const features = storeConfig?.checkoutSettings.features;\n        const shouldUseBraintreeAlphaVersion =\n            features && features['PROJECT-5505.PayPal_Accelerated_Checkout_v2_for_Braintree'];\n        const shouldUseBraintreeFastlaneCompatibleVersion =\n            features && features['PROJECT-6266.braintree_fastlane'];\n        const braintreeSdkAlphaVersion = shouldUseBraintreeFastlaneCompatibleVersion\n            ? BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION\n            : BRAINTREE_SDK_ALPHA_VERSION;\n\n        this.braintreeSdkVersion = shouldUseBraintreeAlphaVersion\n            ? braintreeSdkAlphaVersion\n            : BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadConnect(): Promise<BraintreeConnectCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeConnectCreator>(\n            BraintreeModuleName.Connect,\n            'connect.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadBraintreeLocalMethods(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<GooglePayCreator> {\n        return this.loadBraintreeModuleOrThrow<GooglePayCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const scriptPath = `//js.braintreegateway.com/web/${this.braintreeSdkVersion}/js/${fileName}`;\n\n        const hash =\n            this.getIntegrityValuesByModuleName(braintreeModuleName)[this.braintreeSdkVersion];\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            hash\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity: hash,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n    ): BraintreeIntegrityValues {\n        switch (moduleName) {\n            case BraintreeModuleName.Client:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-5q9Kkv64ho8xutoRBtnaeRE1Ux47T6+LSRpsRmKrKSq7SiZOXn0Mv2XWXVQvCFJj',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-cpfxkJc2j2IgFLlXdJEhNVkCief/ezpYjc3d/QC7psgcdB7AZRZVSCWBrWHJd8kV',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-WFefLU7p2TWWSJ17dsTC2uZF0qylvIUEXI7ZaQiWiMPGHtvQlpjc53WirI93FZtv',\n                };\n\n            case BraintreeModuleName.Connect:\n                return {\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-F/Vm+lvAqbrFfTjVSXul1yeJablUdRQXoGSpXX5ub24OKFeMuITbFiY1TTK1QlxY',\n                };\n\n            case BraintreeModuleName.PaypalCheckout:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-sozUyB/9Y4TygM5npllDME7tGVRo9/4Fh1clHUiPI1F2Q922yyJsMtL5fcFtZHdT',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-b/Bkr377Yi/i9fGXP9adBSYC+Z2//ruSfUlkIni9AjL/YFeu/ygqtgYyJdAEAsr7',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-M5Uymuf5O0lh9Dyu+4soyJzefD1uUsL3m3fakhOuIH6C/FXGvii+XHGSGwQwxeJJ',\n                };\n\n            case BraintreeModuleName.Paypal:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-Kw2YNA/MLpnN7vkRO3LOCNB0ZrSgT0UZiucLokB06z+0591xAAWgcf9v8AKjCwCX',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-2T9Nx2wNbrtrj7SFleQU/i/trUmvBvf3Lmj/enmh9KESjit397Vaaps6EkI18MGt',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-R9O45bWivOlvh5zNaZeRaL0Vie0i6RgNpcD+anBxCVV0Lasox0rsayskrWpOcckT',\n                };\n\n            case BraintreeModuleName.LocalPayment:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-P4U+tVQc9ja0VB3w4O6kTlLtIsBPGgsnFQlEdMYVYlU5BF5QP1aoIUhbmLXi0ewT',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-ARWRFedVLKaSGVUD0YTsHxkzRZ/Cc2BD994a3NqnXoCP+iRM7XeRs1ulS4E+i9ts',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-76tfvCYa9NzY9D66qhNk0cwnecFNOIUw/G+uNE4AhOZ/+Nhej6Po/8zvoOElmE/1',\n                };\n\n            case BraintreeModuleName.DataCollector:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-MYeeYlFD7uDuhGi2ZmrRth4uLy52c+MmJhlrIeNsZCpstpX3qQJI389DB/a2137k',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-L12Sd8K1LbH+gXLvRG54pH+vdCJUnpepjTb6qG2HiD8NvJYLZS/VjJ671OCXr5Vz',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-zpZXyctWw5HY7JwKnhbSRzkOnIkNv8hYoEEyMKkJnpoIT2BijSjiXkNxtSI6lig9',\n                };\n\n            case BraintreeModuleName.UsBankAccount:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-fyOBNpf/tlxbtQsgTICLilgs48q2M8n7gHcsGlmDK945m3pGZzmOdoTKSihFxwEe',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-mBAnHTYdpowjxBu8uRyjsdzDxTLpoZohyMvINZYEV3OyonbtFIjB9/k1k4A2vWrC',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-WwIPgRv2U5MDKNnHUhlvuwa4xOFjK0U6RfIk07n6QF5N9WX3q2qW1pdIfnEX0P8b',\n                };\n\n            case BraintreeModuleName.GooglePayment:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-4ePQT3gULIgtQDyvx+F4rXu9DcyWrOP1dxHCoCO8uESGC8BoDbPVAxDiugVawQjJ',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-OL0G9k2ShrnVAtkmS4Q4Fg7SHi5IxM6B8dgB8GDn1kIcl8rYoGG+FPjrLvfxJO++',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-p0G7HnR6D/f81mKyLqCkr9fEwbDWCwwK8lVZmaudReYXt7bGD3mVO0y9HFsZQhfQ',\n                };\n\n            case BraintreeModuleName.ThreeDSecure:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-kBYpTT1+KcpIHYwnFE6XY3xQkdmazh9F4r9ufjh/cIFXAZFpP96XYNyW8PvHuiJ8',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-ashYIRvaw82mbN1eOd7B43a0La3ngECGkjMK6qbr7UNYb613xBJipfWnNHahDEj6',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-cs4wDHFa3sU5X2n8S/9qte1uPxRPy7Kp/KL14lYurOXbXxMZma0660Gfo0a6AUS1',\n                };\n\n            case BraintreeModuleName.VisaCheckout:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-XzzKn9jU+Lvx1tJscq9e+nMRNBybQnSgSTXn1/PS0v6JxOUQlgFIBjI9ER8CODFt',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-YUiwmkaPgw7G/n4k2XVoNjsAtn2J+m8cA5oPhGH7y/o90302cwzLiFS23bNAw1e0',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-iMFvsiulnHPuXwzbm5r/DPdATPCPn6J4aVNyTheAvM3e5FLA1j/wZTCAYxM081cP',\n                };\n\n            case BraintreeModuleName.Venmo:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-AfqcRXnzzimKHVeUXcJNlB6ti2rmN9UJaZrLFU21pj779Db0zIJtBMdVcwb64NEm',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-CXsbLYSCKdOjrs8CILcaOLBkdI/d7jWlym/+lnzbda8MS/X58DCHrskKp7mPaDxG',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-prmYZ8RvB+/Nuld/7DbA6VfQ+vgDVSwR2Bos6s2FPhoOWf4fYW+YnYA0j9G4bS5/',\n                };\n\n            case BraintreeModuleName.HostedFields:\n                return {\n                    [BRAINTREE_SDK_STABLE_VERSION]:\n                        'sha384-7I4A3VPyzQnBGG7F2aiC9We5tN3Py+cYyPWoqiQJaXCEIVLX2goBaku2lGhZXpyK',\n                    [BRAINTREE_SDK_ALPHA_VERSION]:\n                        'sha384-5l3JvGSYH74qGQJB8IlsrUAqeqrH58vkIkxJoW+LH7O99z4Np2BceIcFvZ46QGld',\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-0gdeYixIb/qimY4JRVwaybygpjWS7O4NtcwQPEJwFhx0nGBKE+NxbkQXOiTXY5QY',\n                };\n\n            case BraintreeModuleName.Fastlane:\n                // Info: fastlane.min.js does not have Access-Control-Allow-Origin: * or not found\n                return {\n                    [BRAINTREE_SDK_FASTLANE_COMPATIBLE_VERSION]:\n                        'sha384-Ca2r1xkeRMuYnf7qxF1rf9RrxNNYv/yqkVNZJ8f3CX6vwiagJNl7L65/3zWyu2hH',\n                };\n\n            default:\n                throw new Error('Unexpected fileName value');\n        }\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeIntegrationService } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _onClick = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _hasApplePaySession = false;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onClick = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n        this._onClick = onClick;\n\n        let state = this._paymentIntegrationService.getState();\n\n        try {\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeIntegrationService();\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = document.createElement('button');\n\n        button.setAttribute('type', 'button');\n        button.setAttribute('aria-label', 'Apple Pay');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (this._hasApplePaySession) {\n            return;\n        }\n\n        this._onClick();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n        this._hasApplePaySession = true;\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            this._hasApplePaySession = false;\n\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData() {\n        const braintreePaymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (braintreePaymentMethod?.clientToken) {\n            const data = await this._braintreeIntegrationService.getDataCollector();\n\n            return data.deviceData;\n        }\n    }\n\n    private async _initializeBraintreeIntegrationService() {\n        try {\n            // TODO: temporary solution to initialize the braintree payment method to get a clientToken to create a braintree client instance\n            // TODO: this approach should be removed in the future\n            // TODO: Jira ticket for tracking purpose: https://bigcommercecloud.atlassian.net/browse/PAYPAL-4122\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n            const state = this._paymentIntegrationService.getState();\n\n            const storeConfig = state.getStoreConfigOrThrow();\n\n            const braintreePaymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(\n                ApplePayGatewayType.BRAINTREE,\n            );\n\n            if (!braintreePaymentMethod.clientToken || !braintreePaymentMethod.initializationData) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._braintreeIntegrationService.initialize(\n                braintreePaymentMethod.clientToken,\n                storeConfig,\n            );\n        } catch (_) {\n            // we don't need to do anything in this block\n        }\n    }\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const hostWindow = window;\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeIntegrationService(\n            new BraintreeScriptLoader(getScriptLoader(), hostWindow),\n            hostWindow,\n        ),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { noop } from 'rxjs';\n\nimport {\n    CheckoutPaymentMethodExecutedOptions,\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    isCustomError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentMethodInvalidError,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BoltCheckout, BoltHostWindow, BoltInitializationData } from './bolt';\nimport { WithBoltCustomerInitializeOptions } from './bolt-customer-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltCustomerStrategy implements CustomerStrategy {\n    private boltHostWindow: BoltHostWindow = window;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBoltCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bolt } = options;\n        const { onInit } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod<BoltInitializationData> = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BoltInitializationData>(methodId);\n\n        if (!paymentMethod.initializationData?.publishableKey) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { developerConfig, publishableKey } = paymentMethod.initializationData;\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            paymentMethod.config.testMode,\n            developerConfig,\n        );\n\n        if (onInit && typeof onInit === 'function') {\n            const email = this.getCustomerEmail();\n            const hasBoltAccount = await this.hasBoltAccount(email);\n\n            onInit(hasBoltAccount, email);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const {\n            continueWithCheckoutCallback = noop,\n            checkoutPaymentMethodExecuted,\n            methodId,\n        } = options || {};\n        const email = this.getCustomerEmail();\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        if (!email) {\n            continueWithCheckoutCallback();\n\n            return;\n        }\n\n        return this.openBoltCheckoutModalOrThrow(\n            email,\n            methodId,\n            continueWithCheckoutCallback,\n            checkoutPaymentMethodExecuted,\n        );\n    }\n\n    private async openBoltCheckoutModalOrThrow(\n        email: string,\n        methodId: string,\n        continueWithCheckoutCallback: () => void,\n        checkoutPaymentMethodExecuted?: (payload: CheckoutPaymentMethodExecutedOptions) => void,\n    ): Promise<void> {\n        const boltClient = this.getBoltClientOrThrow();\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethod<BoltInitializationData>(methodId);\n\n        try {\n            if (paymentMethod?.initializationData?.embeddedOneClickEnabled) {\n                const hasBoltAccount = await this.hasBoltAccount(email);\n\n                if (hasBoltAccount) {\n                    const callbacks = {\n                        close: () => {\n                            continueWithCheckoutCallback();\n                        },\n                    };\n\n                    await boltClient.openCheckout(email, callbacks);\n                } else {\n                    continueWithCheckoutCallback();\n                }\n\n                if (typeof checkoutPaymentMethodExecuted === 'function') {\n                    checkoutPaymentMethodExecuted({ hasBoltAccount });\n                }\n            } else {\n                continueWithCheckoutCallback();\n            }\n        } catch (error) {\n            if (\n                isCustomError(error) &&\n                error.name !== 'MissingDataError' &&\n                error.name !== 'NotInitializedError'\n            ) {\n                throw new PaymentMethodFailedError(error.message);\n            }\n\n            throw error;\n        }\n    }\n\n    private getBoltClientOrThrow(): BoltCheckout {\n        const boltClient = this.boltHostWindow.BoltCheckout;\n\n        if (!boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return boltClient;\n    }\n\n    private async hasBoltAccount(email: string) {\n        const boltClient = this.getBoltClientOrThrow();\n\n        try {\n            return await boltClient.hasBoltAccount(email);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private getCustomerEmail() {\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n\n        return customer?.email || billingAddress?.email || '';\n    }\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","type PaymentInstrument = CardInstrument | AccountInstrument;\n\nexport default PaymentInstrument;\n\ninterface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltCustomerStrategy from './bolt-customer-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltCustomerStrategy: CustomerStrategyFactory<BoltCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltCustomerStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltCustomerStrategy, [{ id: 'bolt' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerInitializeOptions, {\n    WithBraintreePaypalCustomerInitializeOptions,\n} from './braintree-paypal-customer-initialize-options';\n\nexport default class BraintreePaypalCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, methodId } = options;\n        const { container, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                methodId,\n                Boolean(config.testMode),\n                checkoutTopButtonStyles,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken, storeConfig);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypal;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const paypalButtonRender = paypal.Buttons({\n                env: this.braintreeIntegrationService.getBraintreeEnv(testMode),\n                fundingSource,\n                style: { ...buttonStyles, height: DefaultCheckoutButtonHeight },\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        braintreepaypal,\n                    ),\n                onClick,\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${container}`);\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerStrategy from './braintree-paypal-customer-strategy';\n\nconst createBraintreePaypalCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCustomerStrategy, [\n    { id: 'braintreepaypal' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerInitializeOptions, {\n    WithBraintreePaypalCreditCustomerInitializeOptions,\n} from './braintree-paypal-credit-customer-options';\n\nexport default class BraintreePaypalCreditCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, methodId } = options;\n        const { container, onError } = braintreepaypalcredit || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                methodId,\n                Boolean(config.testMode),\n                { ...checkoutTopButtonStyles, height: DefaultCheckoutButtonHeight },\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken, storeConfig);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyles,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                braintreepaypalcredit,\n                            ),\n                        onClick,\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${container}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerStrategy from './braintree-paypal-credit-customer-strategy';\n\nconst createBraintreePaypalCreditCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCreditCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCreditCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditCustomerStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"local-storage-fallback\");","import LocalStorage from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(private namespace: string) {}\n\n    getItem<TValue = unknown>(key: string): TValue | null {\n        const rawValue = LocalStorage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = unknown>(key: string): TValue | null {\n        const value = this.getItem<TValue>(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = unknown>(key: string, value: TValue): void {\n        return LocalStorage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return LocalStorage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this.namespace}.${key}`;\n    }\n}\n","import { BraintreeInitializationData } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeFastlaneCustomerInitializeOptions } from './braintree-fastlane-customer-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlaneCustomerStrategy implements CustomerStrategy {\n    private isAcceleratedCheckoutEnabled = false;\n    private isFastlaneEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n    ) {}\n\n    async initialize({\n        methodId,\n        braintreeafastlane,\n    }: CustomerInitializeOptions & WithBraintreeFastlaneCustomerInitializeOptions): Promise<void> {\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n\n        this.isAcceleratedCheckoutEnabled =\n            !!paymentMethod.initializationData?.isAcceleratedCheckoutEnabled;\n\n        this.isFastlaneEnabled = !!paymentMethod.initializationData?.isFastlaneEnabled;\n\n        try {\n            if (this.isAcceleratedCheckoutEnabled) {\n                await this.braintreeFastlaneUtils.initializeBraintreeAcceleratedCheckoutOrThrow(\n                    paymentMethod.id,\n                    braintreeafastlane?.styles,\n                );\n            }\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback } = options || {};\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (this.isAcceleratedCheckoutEnabled && customer.isGuest) {\n            const shouldRunAuthenticationFlow = await this.shouldRunAuthenticationFlow();\n\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            if (shouldRunAuthenticationFlow && !this.isFastlaneEnabled) {\n                await this.braintreeFastlaneUtils.runPayPalConnectAuthenticationFlowOrThrow();\n            }\n\n            if (shouldRunAuthenticationFlow && this.isFastlaneEnabled) {\n                await this.braintreeFastlaneUtils.runPayPalFastlaneAuthenticationFlowOrThrow(\n                    undefined,\n                    true,\n                );\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    // TODO: remove this method after A/B testing finished\n    private async shouldRunAuthenticationFlow(): Promise<boolean> {\n        const primaryMethodId = 'braintreeacceleratedcheckout';\n\n        try {\n            // Info: we should load payment method each time to detect if the user\n            // should be in a test or in a control group\n            await this.paymentIntegrationService.loadPaymentMethod(primaryMethodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(primaryMethodId);\n\n            // Info: shouldRunAcceleratedCheckout is responsible for the flow of A/B testing purposes\n            // when shouldRunAcceleratedCheckout is true, the lookup PayPal Connect method should be called,\n            // otherwise AcceleratedCheckout should not be available for the customer\n            return paymentMethod.initializationData?.shouldRunAcceleratedCheckout || false;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === 'braintree' ? 'braintreeacceleratedcheckout' : 'braintree';\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BraintreeInitializationData>(validPaymentMethodId);\n    }\n}\n","import { BraintreeConnectPhone } from '../';\n\nexport default function isBraintreeConnectPhone(\n    braintreeConnectPhone: BraintreeConnectPhone | string | undefined,\n): braintreeConnectPhone is BraintreeConnectPhone {\n    if (!braintreeConnectPhone) {\n        return false;\n    }\n\n    return (\n        braintreeConnectPhone.hasOwnProperty('country_code') &&\n        braintreeConnectPhone.hasOwnProperty('national_number')\n    );\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    BraintreeConnect,\n    BraintreeConnectAddress,\n    BraintreeConnectPhone,\n    BraintreeConnectProfileData,\n    BraintreeConnectVaultedInstrument,\n    BraintreeFastlane,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneProfileData,\n    BraintreeFastlaneStylesOption,\n    BraintreeFastlaneVaultedInstrument,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    isBraintreeConnectPhone,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CardInstrument,\n    CustomerAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nexport default class BraintreeFastlaneUtils {\n    private braintreeConnect?: BraintreeConnect;\n    private braintreeFastlane?: BraintreeFastlane;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private browserStorage: BrowserStorage,\n    ) {}\n\n    async getDeviceSessionId(): Promise<string | undefined> {\n        const cart = this.paymentIntegrationService.getState().getCart();\n\n        return this.braintreeIntegrationService.getSessionId(cart?.id);\n    }\n\n    /**\n     *\n     * Initialization method\n     *\n     */\n    async initializeBraintreeAcceleratedCheckoutOrThrow(\n        // TODO: Rename to initializeBraintreeFastlaneOrThrow when connect will be deprecated\n        methodId: string,\n        styles?: BraintreeFastlaneStylesOption,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCart();\n        const storeConfig = state.getStoreConfigOrThrow();\n        const { clientToken, config, initializationData } =\n            state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.methodId = methodId;\n\n        this.braintreeIntegrationService.initialize(clientToken, storeConfig);\n\n        if (initializationData?.isFastlaneEnabled) {\n            this.braintreeFastlane = await this.braintreeIntegrationService.getBraintreeFastlane(\n                cart?.id,\n                config.testMode,\n                styles,\n            );\n        } else {\n            this.braintreeConnect = await this.braintreeIntegrationService.getBraintreeConnect(\n                cart?.id,\n                config.testMode,\n                styles,\n            );\n        }\n    }\n\n    /**\n     *\n     * Braintree Connect methods\n     *\n     */\n    getBraintreeConnectOrThrow(): BraintreeConnect {\n        if (!this.braintreeConnect) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeConnect;\n    }\n\n    getBraintreeConnectComponentOrThrow(): BraintreeConnect['ConnectCardComponent'] {\n        const braintreeConnect = this.getBraintreeConnectOrThrow();\n\n        return braintreeConnect.ConnectCardComponent;\n    }\n\n    /**\n     *\n     * Braintree Fastlane methods\n     *\n     */\n    getBraintreeFastlaneOrThrow(): BraintreeFastlane {\n        if (!this.braintreeFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeFastlane;\n    }\n\n    getBraintreeFastlaneComponentOrThrow(): BraintreeFastlane['FastlaneCardComponent'] {\n        const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n\n        return braintreeFastlane.FastlaneCardComponent;\n    }\n\n    /**\n     *\n     * Authentication methods\n     *\n     * */\n    async runPayPalConnectAuthenticationFlowOrThrow(email?: string): Promise<void> {\n        try {\n            const methodId = this.getMethodIdOrThrow();\n\n            const braintreeConnect = this.getBraintreeConnectOrThrow();\n            const { lookupCustomerByEmail, triggerAuthenticationFlow } = braintreeConnect.identity;\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n\n            const customerEmail = email || customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n            if (!customerContextId) {\n                // Info: we should clean up previous experience with default data and related authenticationState\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState: BraintreeFastlaneAuthenticationState.UNRECOGNIZED,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.browserStorage.setItem('sessionId', cart.id);\n\n                return;\n            }\n\n            const { authenticationState, profileData } = await triggerAuthenticationFlow(\n                customerContextId,\n            );\n\n            if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.browserStorage.removeItem('sessionId');\n\n                return;\n            }\n\n            const shippingAddresses =\n                this.mapPayPalToBcAddress(profileData.addresses, profileData.phones) || [];\n            const paypalBillingAddresses = this.getPayPalBillingAddresses(profileData);\n            const billingAddresses =\n                this.mapPayPalToBcAddress(paypalBillingAddresses, profileData.phones) || [];\n            const instruments = this.mapPayPalToBcInstrument(methodId, profileData.cards) || [];\n            const addresses = this.mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            this.browserStorage.setItem('sessionId', cart.id);\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            if (billingAddresses.length > 0) {\n                await this.paymentIntegrationService.updateBillingAddress(billingAddresses[0]);\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddresses[0]);\n            }\n        } catch (error) {\n            // TODO: we should figure out what to do here\n            // TODO: because we should not to stop the flow if the error occurs on paypal side\n        }\n    }\n\n    async runPayPalFastlaneAuthenticationFlowOrThrow(\n        email?: string,\n        shouldSetShippingOption?: boolean,\n    ): Promise<void> {\n        try {\n            const methodId = this.getMethodIdOrThrow();\n            const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n            const { lookupCustomerByEmail, triggerAuthenticationFlow } = braintreeFastlane.identity;\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n\n            const customerEmail = email || customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n            if (!customerContextId) {\n                // Info: we should clean up previous experience with default data and related authenticationState\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState: BraintreeFastlaneAuthenticationState.UNRECOGNIZED,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.browserStorage.setItem('sessionId', cart.id);\n\n                return;\n            }\n\n            const { authenticationState, profileData } = await triggerAuthenticationFlow(\n                customerContextId,\n            );\n            const phoneNumber = profileData?.shippingAddress?.phoneNumber || '';\n\n            if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.browserStorage.removeItem('sessionId');\n\n                return;\n            }\n\n            const shippingAddresses =\n                this.mapPayPalToBcAddress([profileData.shippingAddress], [phoneNumber]) || [];\n            const paypalBillingAddress = this.getPayPalFastlaneBillingAddress(profileData);\n            const billingAddresses = paypalBillingAddress\n                ? this.mapPayPalToBcAddress([paypalBillingAddress], [phoneNumber])\n                : [];\n            const instruments = profileData.card\n                ? this.mapPayPalToBcInstrument(methodId, [profileData.card])\n                : [];\n            const addresses = this.mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            this.browserStorage.setItem('sessionId', cart.id);\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            if (billingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateBillingAddress(billingAddresses[0]);\n            }\n\n            // Prefill billing form if only digital items in cart with billing data and firstName and lastName\n            // from shippingAddresses because there are empty in billing\n            if (\n                billingAddresses.length > 0 &&\n                cart.lineItems.digitalItems.length > 0 &&\n                cart.lineItems.physicalItems.length === 0\n            ) {\n                const { firstName, lastName } = addresses[0];\n                const digitalItemBilling = {\n                    ...billingAddresses[0],\n                    firstName,\n                    lastName,\n                };\n\n                await this.paymentIntegrationService.updateBillingAddress(digitalItemBilling);\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddresses[0]);\n\n                if (shouldSetShippingOption) {\n                    await this.setShippingOption();\n                }\n            }\n        } catch (error) {\n            // TODO: we should figure out what to do here\n            // TODO: because we should not to stop the flow if the error occurs on paypal side\n        }\n    }\n\n    /**\n     *\n     * PayPal to BC data mappers\n     *\n     * */\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instruments?: BraintreeConnectVaultedInstrument[] | BraintreeFastlaneVaultedInstrument[],\n    ): CardInstrument[] | undefined {\n        if (!instruments) {\n            return;\n        }\n\n        return instruments.map((instrument) => {\n            const { id, paymentSource } = instrument;\n            const { brand, expiry, lastDigits } = paymentSource.card;\n\n            const [expiryYear, expiryMonth] = expiry.split('-');\n\n            return {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                type: 'card',\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n            };\n        });\n    }\n\n    private mapPayPalToBcAddress(\n        addresses?: BraintreeFastlaneAddress[],\n        phones?: BraintreeConnectPhone[] | string[],\n    ): CustomerAddress[] {\n        if (!addresses) {\n            return [];\n        }\n\n        const countries = this.paymentIntegrationService.getState().getCountries() || [];\n        let phoneNumber: string;\n\n        if (phones && typeof phones[0] === 'string') {\n            phoneNumber = phones[0];\n        }\n\n        if (phones && isBraintreeConnectPhone(phones[0])) {\n            phoneNumber = phones[0].country_code + phones[0].national_number;\n        }\n\n        const getCountryNameByCountryCode = (countryCode: string) => {\n            const matchedCountry = countries.find((country) => country.code === countryCode);\n\n            return matchedCountry?.name || '';\n        };\n\n        return addresses.map((address) => ({\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: address.firstName || '',\n            lastName: address.lastName || '',\n            company: address.company || '',\n            address1: address.streetAddress,\n            address2: address.extendedAddress || '',\n            city: address.locality,\n            stateOrProvince: address.region,\n            stateOrProvinceCode: address.region,\n            country: getCountryNameByCountryCode(address.countryCodeAlpha2),\n            countryCode: address.countryCodeAlpha2,\n            postalCode: address.postalCode,\n            phone: phoneNumber || '',\n            customFields: [],\n        }));\n    }\n\n    /**\n     *\n     * Get PayPal billing addresses from stored braintree instruments info\n     *\n     * */\n    private getPayPalBillingAddresses(\n        profileData?: BraintreeConnectProfileData,\n    ): BraintreeConnectAddress[] | undefined {\n        const { cards, name } = profileData || {};\n\n        if (!cards?.length) {\n            return;\n        }\n\n        return cards.reduce(\n            (\n                billingAddressesList: BraintreeConnectAddress[],\n                instrument: BraintreeConnectVaultedInstrument,\n            ) => {\n                const { firstName, lastName } = instrument.paymentSource.card.billingAddress;\n                const { given_name, surname } = name || {};\n                const address = {\n                    ...instrument.paymentSource.card.billingAddress,\n                    firstName: firstName || given_name,\n                    lastName: lastName || surname,\n                };\n                const isAddressExist = billingAddressesList.some(\n                    (existingAddress: BraintreeConnectAddress) =>\n                        isEqual(\n                            this.normalizeAddress(address),\n                            this.normalizeAddress(existingAddress),\n                        ),\n                );\n\n                return isAddressExist ? billingAddressesList : [...billingAddressesList, address];\n            },\n            [],\n        );\n    }\n\n    private getPayPalFastlaneBillingAddress(\n        profileData?: BraintreeFastlaneProfileData,\n    ): BraintreeFastlaneAddress | undefined {\n        const { card, name } = profileData || {};\n\n        if (!card) {\n            return;\n        }\n\n        const { firstName, lastName } = card.paymentSource.card.billingAddress;\n        const { firstName: given_name, lastName: surname } = name || {};\n        const { shippingAddress } = profileData || {};\n        const address = {\n            ...card.paymentSource.card.billingAddress,\n            firstName: firstName || given_name,\n            lastName: lastName || surname,\n        };\n\n        const isAddressExist =\n            shippingAddress &&\n            isEqual(this.normalizeAddress(address), this.normalizeAddress(shippingAddress));\n\n        return isAddressExist ? shippingAddress : address;\n    }\n\n    private normalizeAddress(\n        address: CustomerAddress | BraintreeConnectAddress | BraintreeFastlaneAddress,\n    ) {\n        return omit(address, ['id']);\n    }\n\n    private mergeShippingAndBillingAddresses(\n        shippingAddresses: CustomerAddress[],\n        billingAddresses: CustomerAddress[],\n    ): CustomerAddress[] {\n        const filteredBillingAddresses = billingAddresses.filter(\n            (billingAddress: CustomerAddress) =>\n                !shippingAddresses.some((shippingAddress: CustomerAddress) => {\n                    return isEqual(\n                        this.normalizeAddress(shippingAddress),\n                        this.normalizeAddress(billingAddress),\n                    );\n                }),\n        );\n\n        return [...shippingAddresses, ...filteredBillingAddresses];\n    }\n\n    /**\n     *\n     * Other\n     *\n     * */\n    private getMethodIdOrThrow(): string {\n        if (!this.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        return this.methodId;\n    }\n\n    private async setShippingOption(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments() || [];\n        const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        if (recommendedShippingOption || availableShippingOptions.length) {\n            const selectedOption = recommendedShippingOption || availableShippingOptions[0];\n\n            await this.paymentIntegrationService.selectShippingOption(selectedOption.id);\n        }\n    }\n}\n","import { BuyNowCartRequestBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): Promise<NewTransactionInfo | void>;\n    };\n}\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    'emailRequired' | 'shippingAddressRequired' | 'shippingAddressParameters'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => void;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId?: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport BraintreeFastlaneCustomerStrategy from './braintree-fastlane-customer-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BraintreeFastlaneCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n    const browserStorage = new BrowserStorage('paypalFastlane');\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        browserStorage,\n    );\n\n    return new BraintreeFastlaneCustomerStrategy(paymentIntegrationService, braintreeFastlaneUtils);\n};\n\n// Info: braintree method id was added only for A/B testing purposes.\n// The main reason why we can't go in other way, because braintreeacceleratedcheckout\n// may be turned on only when BE knows customer's email address (to understand should we show the feature for the user or not).\n// So { id: 'braintree' }, should be removed after A/B testing\nexport default toResolvableModule(createBraintreeFastlaneCustomerStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n    { id: 'braintree' },\n]);\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    TotalPriceStatusType,\n} from '../types';\nimport itemsRequireShipping from '../utils/items-require-shipping';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email = response.email,\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone),\n            email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (this._isBuyNowFlow) {\n            return {\n                ...data,\n                shippingAddressRequired: true,\n                shippingAddressParameters: {\n                    phoneNumberRequired: true,\n                },\n            };\n        }\n\n        if (this._isShippingAddressRequired()) {\n            const state = await this._paymentIntegrationService.loadShippingCountries();\n            const allowedCountryCodes = state\n                .getShippingCountries()\n                ?.map((country) => country.code);\n\n            data.shippingAddressRequired = true;\n            data.shippingAddressParameters = {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            };\n        }\n\n        return data;\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import { Cart, StoreConfig } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (\n        config &&\n        config.checkoutSettings.features['CHECKOUT-4936.enable_custom_item_shipping'] &&\n        cart.lineItems.customItems\n    ) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { round } from 'lodash';\n\nimport {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    guard,\n    InvalidArgumentError,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCustomerInitializeOptions, {\n    WithGooglePayCustomerInitializeOptions,\n} from './google-pay-customer-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    IntermediatePaymentData,\n    NewTransactionInfo,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayCustomerInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: CustomerInitializeOptions & WithGooglePayCustomerInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        }\n\n        try {\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n            );\n        } catch {\n            return;\n        }\n\n        this._addPaymentButton(googlePayOptions);\n    }\n\n    signIn(): Promise<void> {\n        return Promise.reject(\n            new NotImplementedError(\n                'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n            ),\n        );\n    }\n\n    async signOut(): Promise<void> {\n        const providerId = this._paymentIntegrationService.getState().getPaymentId()?.providerId;\n\n        if (providerId) {\n            await this._googlePayPaymentProcessor.signOut(providerId);\n        }\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                }: IntermediatePaymentData): Promise<NewTransactionInfo | void> => {\n                    if (callbackTrigger !== CallbackTriggerType.INITIALIZE) {\n                        return;\n                    }\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const { getCheckoutOrThrow, getCartOrThrow } =\n                        this._paymentIntegrationService.getState();\n                    const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n                    const totalPrice = round(\n                        getCheckoutOrThrow().outstandingBalance,\n                        decimalPlaces,\n                    ).toFixed(decimalPlaces);\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                    };\n                },\n            },\n        };\n    }\n\n    private _addPaymentButton({\n        container,\n        buttonColor,\n        buttonType,\n        onClick,\n        onError,\n    }: GooglePayCustomerInitializeOptions): void {\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(container, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError, onClick),\n            });\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n        onClick: GooglePayCustomerInitializeOptions['onClick'],\n    ): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            if (onClick && typeof onClick === 'function') {\n                onClick();\n            }\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodId(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getMethodId(): keyof WithGooglePayCustomerInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    CallbackIntentsType,\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        await this._buildPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Google Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private async _buildPayloads(): Promise<void> {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n        this._cardPaymentMethod = {\n            ...this._baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: [CallbackIntentsType.OFFER],\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2CustomerStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3CustomerStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeDotNetCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.authorizenet_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepayauthorizenet requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAuthorizeDotNetCustomerStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n    paypalLoadScript?: (options: PayPalCommerceScriptParams) => Promise<{ paypal: PayPalSDK }>;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingChange?(data: ShippingChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface ShippingChangeCallbackPayload {\n    orderID: string;\n    shipping_address: PayPalAddress;\n    selected_shipping_option: PayPalSelectedShippingOption;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n *\n */\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.checkoutcom_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepaycheckoutcom requires using registryV1');\n    }\n\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComCustomerStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.cybersourcev2_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepaycybersourcev2 requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCybersourceCustomerStrategy, [\n    { id: 'googlepaycybersourcev2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBnzCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.bnz_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepaybnz requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBnzCustomerStrategy, [{ id: 'googlepaybnz' }]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.orbital_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepayorbital requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayOrbitalCustomerStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import {\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('stripe', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayStripeGateway from '../../gateways/google-pay-stripe-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayStripeCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.stripe_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepaystripe requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeCustomerStrategy, [\n    { id: 'googlepaystripe' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayStripeGateway from '../../gateways/google-pay-stripe-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayStripeUpeCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.stripeupe_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepaystripeupe requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeUpeCustomerStrategy, [\n    { id: 'googlepaystripeupe' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const useRegistryV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings\n        .features['INT-5659.worldpayaccess_use_new_googlepay_customer_strategy'];\n\n    if (useRegistryV1) {\n        throw new Error('googlepayworldpayaccess requires using registryV1');\n    }\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayWorldpayAccessCustomerStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import {\n    BraintreeGooglePayThreeDSecure,\n    BraintreeIntegrationService,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayBraintreeGatewayParameters,\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _paymentGatewayParameters?: GooglePayBraintreeGatewayParameters;\n    private _service: PaymentIntegrationService;\n\n    constructor(\n        service: PaymentIntegrationService,\n        private _braintreeService: BraintreeIntegrationService,\n    ) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeService.initialize(\n            paymentMethod.clientToken,\n            this._service.getState().getStoreConfig(),\n        );\n\n        const googleBraintreePaymentInstance =\n            await this._braintreeService.getGooglePaymentComponent();\n\n        const request = googleBraintreePaymentInstance.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        this._paymentGatewayParameters = request.paymentMethodTokenizationParameters.parameters;\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled) {\n            const threeDSecure = await this._braintreeService.get3DS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        if (!this._paymentGatewayParameters) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paymentGatewayParameters;\n    }\n\n    private async _getBraintreeDeviceData() {\n        const data = await this._braintreeService.getDataCollector();\n\n        return data.deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(\n        service: PaymentIntegrationService,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        await this.paypalCommerceScriptLoader.getPayPalSDK(paymentMethod, currency);\n\n        this.googlepayConfig = await this.paypalCommerceScriptLoader.getGooglePayConfigOrThrow();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    GooglePayConfig,\n    PayPalCommerceHostWindow,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './types';\n\nexport default class GooglePayPayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n    private googlepayConfig?: GooglePayConfig;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    async getGooglePayConfigOrThrow() {\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (!this.googlepayConfig) {\n            this.googlepayConfig = await this.window.paypal.Googlepay().config();\n        }\n\n        return this.googlepayConfig;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'messages',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\n\nconst createGooglePayPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceCustomerStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: shippingAddress.address_line_1,\n            city: shippingAddress.admin_area_2,\n            countryCode: shippingAddress.country_code,\n            postalCode: shippingAddress.postal_code,\n            stateOrProvinceCode: shippingAddress.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    // buttonStyle?: PayPalButtonStyleOptions; // TODO: PayPalButtonStyleOptions interface will be moved in the future\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    connectClientToken?: string; // TODO: remove when PPCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCommerceAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when PPCP Fastlane A/B test will be finished\n    // paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>; // TODO: PayPalButtonStyleOptions interface will be moved in the future\n}\n\n/**\n *\n * PayPalCommerceHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalCommerceHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n        'data-namespace'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<'fastlane' | 'messages'>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport interface PayPalFastlaneSdk {\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\n/**\n *\n * PayLater Messages related types\n *\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCustomerInitializeOptions, {\n    WithPayPalCommerceCustomerInitializeOptions,\n} from './paypal-commerce-customer-initialize-options';\n\nexport default class PayPalCommerceCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommerce.onClick && typeof paypalcommerce.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommerce.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.renderButton(methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommerceCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingChange: (data: ShippingChangeCallbackPayload) => this.onShippingChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingChange(data: ShippingChangeCallbackPayload): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shipping_address.city,\n            countryCode: data.shipping_address.country_code,\n            postalCode: data.shipping_address.postal_code,\n            stateOrProvinceCode: data.shipping_address.state,\n        });\n\n        try {\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n                data.selected_shipping_option?.id,\n            );\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCustomerStrategy from './paypal-commerce-customer-strategy';\n\nconst createPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCustomerStrategy, [{ id: 'paypalcommerce' }]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCustomerInitializeOptions, {\n    WithPayPalCommerceCreditCustomerInitializeOptions,\n} from './paypal-commerce-credit-customer-initialize-options';\n\nexport default class PayPalCommerceCreditCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercecredit.onClick && typeof paypalcommercecredit.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommercecredit.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.renderButton(methodId, paypalcommercecredit);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalCommerceCredit: PayPalCommerceCreditCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = paypalCommerceCredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingChange: (data: ShippingChangeCallbackPayload) => this.onShippingChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingChange(data: ShippingChangeCallbackPayload): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shipping_address.city,\n            countryCode: data.shipping_address.country_code,\n            postalCode: data.shipping_address.postal_code,\n            stateOrProvinceCode: data.shipping_address.state,\n        });\n\n        try {\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n                data.selected_shipping_option?.id,\n            );\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCustomerStrategy from './paypal-commerce-credit-customer-strategy';\n\nconst createPayPalCommerceCreditCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCreditCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditCustomerStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoCustomerInitializeOptions, {\n    WithPayPalCommerceVenmoCustomerInitializeOptions,\n} from './paypal-commerce-venmo-customer-initialize-options';\n\nexport default class PayPalCommerceVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercevenmo.onClick && typeof paypalcommercevenmo.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.renderButton(methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoCustomerStrategy from './paypal-commerce-venmo-customer-strategy';\n\nconst createPayPalCommerceVenmoCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoCustomerStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n\n            if (!this.window.paypalMessages) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            connectClientToken, // TODO: remove when PPCP Fastlane A/B testing will be finished\n        } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-user-id-token': connectClientToken || clientToken,\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceFastlaneUtils {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private browserStorage: BrowserStorage) {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     * - remove sessionId from browser storage if the customer canceled PayPal Fastlane Authentication\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(shouldBeRemoved: boolean, sessionId?: string): void {\n        if (shouldBeRemoved) {\n            // TODO: Should be rewritten to cookies implementation\n            this.browserStorage.removeItem('sessionId');\n        } else {\n            // TODO: Should be rewritten to cookies implementation\n            this.browserStorage.setItem('sessionId', sessionId);\n        }\n    }\n\n    getStorageSessionId(): string {\n        // TODO: Should be rewritten to cookies implementation\n        return this.browserStorage.getItem('sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport PayPalCommerceFastlaneUtils from './paypal-commerce-fastlane-utils';\n\nexport default function createPayPalCommerceFastlaneUtils(): PayPalCommerceFastlaneUtils {\n    return new PayPalCommerceFastlaneUtils(new BrowserStorage('paypalFastlane'));\n}\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport { WithPayPalCommerceFastlaneCustomerInitializeOptions } from './paypal-commerce-fastlane-customer-initialize-options';\n\nexport default class PayPalCommerceFastlaneCustomerStrategy implements CustomerStrategy {\n    private isAcceleratedCheckoutFeatureEnabled = false;\n    private primaryMethodId = 'paypalcommerceacceleratedcheckout';\n    private secondaryMethodId = 'paypalcommercecreditcards';\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n        const { isAcceleratedCheckoutEnabled, isDeveloperModeApplicable } =\n            paymentMethod.initializationData || {};\n\n        this.isAcceleratedCheckoutFeatureEnabled = !!isAcceleratedCheckoutEnabled;\n\n        try {\n            if (this.isAcceleratedCheckoutFeatureEnabled) {\n                const state = this.paymentIntegrationService.getState();\n                const cart = state.getCartOrThrow();\n                const currency = state.getCartOrThrow().currency.code;\n                const isTestModeEnabled = !!isDeveloperModeApplicable;\n\n                const paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                    paymentMethod,\n                    currency,\n                    cart.id,\n                );\n\n                await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                    paypalFastlaneSdk,\n                    isTestModeEnabled,\n                    paypalcommercefastlane?.styles,\n                );\n            }\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (this.isAcceleratedCheckoutFeatureEnabled && customer.isGuest) {\n            const shouldRunAuthenticationFlow = await this.shouldRunAuthenticationFlow();\n\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            if (shouldRunAuthenticationFlow) {\n                await this.runPayPalAuthenticationFlowOrThrow();\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    // TODO: remove when A/B testing will be finished\n    private async shouldRunAuthenticationFlow(): Promise<boolean> {\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(this.primaryMethodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n                this.primaryMethodId,\n            );\n\n            return paymentMethod.initializationData?.shouldRunAcceleratedCheckout || false;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cartId = state.getCartOrThrow().id;\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            await this.updateCustomerDataState(this.primaryMethodId, authenticationResult);\n            this.paypalCommerceFastlaneUtils.updateStorageSessionId(\n                isAuthenticationFlowCanceled,\n                cartId,\n            );\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldDisableFastlaneOneClickExperience =\n            features && features['PAYPAL-4142.disable_paypal_fastlane_one_click_experience'];\n\n        if (\n            shippingAddress &&\n            cart.lineItems.physicalItems.length > 0 &&\n            !shouldDisableFastlaneOneClickExperience\n        ) {\n            const consignments = state.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (recommendedShippingOption || firstShippingOption) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Other\n     *\n     */\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<PayPalCommerceInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === this.secondaryMethodId ? this.primaryMethodId : this.secondaryMethodId;\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<PayPalCommerceInitializationData>(validPaymentMethodId);\n    }\n}\n","import {\n    CustomFont,\n    PaymentIntent,\n    PaymentMethod,\n    StripeConfigurationOptions,\n} from '../stripev3/stripev3';\n\nexport { StripeAdditionalAction } from '../stripev3/stripev3';\n\nexport interface StripeError {\n    /**\n     * type of error. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user.\n     */\n    type: string;\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n}\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n\n    /**\n     * The change event is triggered when the Element's value changes. The event payload always contains certain keys,\n     * in addition to some Element-specific keys.\n     * https://stripe.com/docs/js/element/events/on_change?type=paymentElement\n     */\n    on(event: 'change' | 'ready', handler: (event: StripeEventType) => void): void;\n\n    /**\n     * Updates the options the Payment Element was initialized with. Updates are merged into the existing configuration.\n     * https://docs.stripe.com/js/elements_object/update_payment_element\n     */\n    update(options?: StripeElementsCreateOptions): void;\n}\n\nexport interface StripeEvent {\n    complete: boolean;\n    elementType: string;\n    empty: boolean;\n}\n\nexport interface StripeCustomerEvent extends StripeEvent {\n    collapsed?: boolean;\n    authenticated: boolean;\n    value: {\n        email: string;\n    };\n}\n\nexport interface StripeShippingEvent extends StripeEvent {\n    mode?: string;\n    isNewAddress?: boolean;\n    phoneFieldRequired: boolean;\n    value: {\n        address: Address;\n        name?: string;\n        firstName?: string;\n        lastName?: string;\n        phone?: string;\n    };\n    fields?: {\n        phone: string;\n    };\n    display?: {\n        name: string;\n    };\n}\n\ninterface Address {\n    city: string;\n    country: string;\n    line1: string;\n    line2?: string;\n    postal_code: string;\n    state: string;\n}\n\nexport type StripeEventType = StripeShippingEvent | StripeCustomerEvent;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping\n */\nexport type AddressOptions = Partial<Address>;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface AddressProperties {\n    city?: AutoOrNever;\n    country?: AutoOrNever;\n    state?: AutoOrNever;\n    postalCode?: AutoOrNever;\n    line1?: AutoOrNever;\n    line2?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsOptions {\n    name?: string;\n    email?: string;\n    address?: AddressOptions;\n    phone?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsProperties {\n    name?: AutoOrNever;\n    email?: AutoOrNever;\n    address?: AutoOrNever | AddressProperties;\n    phone?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface PaymentMethodDataOptions {\n    billing_details: BillingDetailsOptions;\n}\n\n/**\n * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n */\nexport interface StripeUPEConfirmParams {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n    payment_method_data?: PaymentMethodDataOptions;\n}\n\n/**\n * Data to be sent with a `stripe.confirmPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/js/payment_intents/confirm_payment) for a full list of parameters.\n */\nexport interface StripeConfirmPaymentData {\n    /**\n     * The Elements instance that was used to create the Payment Element.\n     */\n    elements: StripeElements;\n\n    /**\n     * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n     */\n    confirmParams?: StripeUPEConfirmParams;\n\n    /**\n     * By default, confirmPayment will always redirect to your return_url after a successful confirmation.\n     * If you set redirect: \"if_required\", then confirmPayment will only redirect if your user chooses a redirect-based payment method.\n     */\n    redirect?: StripeStringConstants.ALWAYS | StripeStringConstants.IF_REQUIRED;\n}\n\nexport interface FieldsOptions {\n    billingDetails?: AutoOrNever | BillingDetailsProperties;\n    phone?: string;\n}\n\nexport interface WalletOptions {\n    applePay?: AutoOrNever;\n    googlePay?: AutoOrNever;\n}\n\nexport interface TermOptions {\n    card?: AutoOrNever;\n}\n\n/**\n * All available options are here https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface StripeElementsCreateOptions {\n    mode?: string;\n    fields?: FieldsOptions;\n    wallets?: WalletOptions;\n    allowedCountries?: string[];\n    defaultValues?: ShippingDefaultValues | CustomerDefaultValues;\n    validation?: validationElement;\n    display?: { name: DisplayName };\n    terms?: TermOptions;\n}\n\ninterface validationElement {\n    phone?: validationRequiredElement;\n}\n\ninterface validationRequiredElement {\n    required?: string;\n}\n\ninterface ShippingDefaultValues {\n    name?: string;\n    firstName?: string;\n    lastName?: string;\n    phone: string;\n    address: Address;\n}\n\n/*\nDecide which mode you are going to use the Address Element\nShipping: is used with the Payment Element and Link Authentication Element, it will automatically pass shipping\ninformation when confirming Payment Intent or Setup Intent.\nBilling: is used with the Payment Element, it will automatically pass the billing information when confirming\nPayment Intent or Setup Intent.\n */\nexport enum StripeFormMode {\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n}\n\nexport enum DisplayName {\n    SPLIT = 'split',\n    FULL = 'full',\n    ORGANIZATION = 'organization',\n}\n\ninterface CustomerDefaultValues {\n    mode: StripeFormMode;\n    email: string;\n    allowedCountries?: string[];\n    display?: {\n        name: DisplayName;\n    };\n}\n\nexport interface StripeElements {\n    /**\n     * Creates an Elements instance, which manages a group of elements.\n     * https://stripe.com/docs/js/elements_object/create\n     */\n    create(elementType: StripeElementType, options?: StripeElementsCreateOptions): StripeElement;\n\n    /**\n     * Looks up a previously created element.\n     * https://stripe.com/docs/js/elements_object/get_payment_element or\n     * https://stripe.com/docs/js/elements_object/get_link_authentication_element\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n\n    /**\n     * Updates options on an existing instance of Elements.\n     * https://stripe.com/docs/js/elements_object/update\n     */\n    update(options?: StripeUpdateElementsOptions): StripeElement;\n\n    /**\n     * Fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements,\n     * and reflects these updates in the Payment Element.\n     * https://stripe.com/docs/js/elements_object/fetch_updates\n     */\n    fetchUpdates(): Promise<void>;\n}\n\n/**\n * All available options are here https://stripe.com/docs/stripe-js/appearance-api#supported-css-properties\n */\nexport interface StripeUPEAppearanceOptions {\n    variables?: {\n        colorPrimary?: string;\n        colorBackground?: string;\n        colorText?: string;\n        colorDanger?: string;\n        colorTextSecondary?: string;\n        colorTextPlaceholder?: string;\n        colorIcon?: string;\n        colorIconCardError?: string;\n        colorIconRedirect?: string;\n        spacingUnit?: string;\n        borderRadius?: string;\n    };\n\n    rules?: {\n        '.Input'?: {\n            borderColor?: string;\n            color?: string;\n            boxShadow?: string;\n        };\n    };\n}\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n     * The client secret can be used to complete a payment from your frontend.\n     * It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer.\n     * Make sure that you have TLS enabled on any page that includes the client secret.\n     * Refer to our docs to accept a payment and learn about how client_secret should be handled.\n     */\n    clientSecret: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeUPEAppearanceOptions;\n}\n\nexport interface StripeUpdateElementsOptions {\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeUPEAppearanceOptions;\n}\n\nexport interface StripeUPEClient {\n    /**\n     * Use confirmPayment to confirm a PaymentIntent using data collected by the Payment Element.\n     * When called, confirmPayment will attempt to complete any required actions,\n     * such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\n     */\n    confirmPayment(options: StripeConfirmPaymentData): Promise<StripeUpeResult>;\n\n    /**\n     * When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n     */\n    confirmCardPayment(clientSecret: string): Promise<StripeUpeResult>;\n\n    /**\n     * Retrieve a PaymentIntent using its client secret.\n     */\n    retrievePaymentIntent(clientSecret: string): Promise<StripeUpeResult>;\n\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options: StripeElementsOptions): StripeElements;\n}\n\ninterface StripeUpeResult {\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n}\n\nexport interface StripeHostWindow extends Window {\n    bcStripeClient?: StripeUPEClient;\n    bcStripeElements?: StripeElements;\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeUPEClient;\n}\n\nexport enum StripePaymentMethodType {\n    CreditCard = 'card',\n    SOFORT = 'sofort',\n    EPS = 'eps',\n    GRABPAY = 'grabpay',\n    BANCONTACT = 'bancontact',\n    IDEAL = 'ideal',\n    GIROPAY = 'giropay',\n    ALIPAY = 'alipay',\n    KLARNA = 'klarna',\n}\n\ntype AutoOrNever = StripeStringConstants.AUTO | StripeStringConstants.NEVER;\n\nexport enum StripeStringConstants {\n    NEVER = 'never',\n    AUTO = 'auto',\n    ALWAYS = 'always',\n    PAYMENT = 'payment',\n    IF_REQUIRED = 'if_required',\n}\n\nexport enum StripeElementType {\n    PAYMENT = 'payment',\n    AUTHENTICATION = 'linkAuthentication',\n    SHIPPING = 'address',\n}\n\nexport enum StripeUPEPaymentIntentStatus {\n    REQUIRES_PAYMENT_METHOD = 'requires_payment_method',\n    REQUIRES_CONFIRMATION = 'requires_confirmation',\n    REQUIRES_ACTION = 'requires_action',\n    PROCESSING = 'processing',\n    SUCCEEDED = 'succeeded',\n    CANCELED = 'canceled',\n}\n\nexport interface StripeUPEPaymentMethod extends PaymentMethod {\n    initializationData: StripeUPEInitializationData;\n}\n\nexport interface StripeUPEInitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    shopperLanguage: string;\n}\n\nexport interface StripeElementUpdateOptions {\n    shouldShowTerms?: boolean;\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerStrategy from './paypal-commerce-fastlane-customer-strategy';\n\nconst createPayPalCommerceFastlaneCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceFastlaneCustomerStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // this method id will be provided for users from test group\n    { id: 'paypalcommercecreditcards' }, // this method id will be provided for users from control group\n]);\n","import {\n    PaymentProviderCustomer,\n    StripeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isStripeAcceleratedCheckoutCustomer(\n    customer: PaymentProviderCustomer,\n): customer is StripeAcceleratedCheckoutCustomer {\n    return 'stripeLinkAuthenticationState' in customer;\n}\n","import { PaymentMethod } from '../stripev3/stripev3';\n\nimport { StripeUPEPaymentMethod } from './stripe-upe';\n\nexport function isStripeUPEPaymentMethodLike(\n    paymentMethod: PaymentMethod,\n): paymentMethod is StripeUPEPaymentMethod {\n    return (\n        typeof paymentMethod === 'object' &&\n        paymentMethod !== null &&\n        'initializationData' in paymentMethod &&\n        (paymentMethod as StripeUPEPaymentMethod).initializationData !== undefined &&\n        (paymentMethod as StripeUPEPaymentMethod).initializationData !== null &&\n        typeof (paymentMethod as StripeUPEPaymentMethod).initializationData === 'object' &&\n        'stripePublishableKey' in (paymentMethod as StripeUPEPaymentMethod).initializationData &&\n        'stripeConnectedAccount' in (paymentMethod as StripeUPEPaymentMethod).initializationData &&\n        'shopperLanguage' in (paymentMethod as StripeUPEPaymentMethod).initializationData &&\n        typeof (paymentMethod as StripeUPEPaymentMethod).initializationData.stripePublishableKey !==\n            'undefined' &&\n        typeof (paymentMethod as StripeUPEPaymentMethod).initializationData\n            .stripeConnectedAccount !== 'undefined' &&\n        typeof (paymentMethod as StripeUPEPaymentMethod).initializationData.shopperLanguage !==\n            'undefined'\n    );\n}\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { isStripeUPEPaymentMethodLike } from './is-stripe-upe-payment-method-like';\nimport {\n    StripeElements,\n    StripeElementType,\n    StripeEventType,\n    StripeFormMode,\n    StripeUPEAppearanceOptions,\n    StripeUPEClient,\n} from './stripe-upe';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { WithStripeUPECustomerInitializeOptions } from './stripeupe-customer-initialize-options';\n\nexport default class StripeUPECustomerStrategy implements CustomerStrategy {\n    private _stripeElements?: StripeElements;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeUPECustomerInitializeOptions,\n    ): Promise<void> {\n        let stripeUPEClient: StripeUPEClient;\n\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { container, gatewayId, methodId, onEmailChange, getStyles, isLoading } =\n            options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { clientToken } = paymentMethod;\n\n        if (!isStripeUPEPaymentMethodLike(paymentMethod) || !clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const {\n            initializationData: { stripePublishableKey, stripeConnectedAccount },\n        } = paymentMethod;\n\n        const { email } = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (!email) {\n            let appearance: StripeUPEAppearanceOptions | undefined;\n            const styles = typeof getStyles === 'function' && getStyles();\n\n            if (styles) {\n                appearance = {\n                    variables: {\n                        colorPrimary: styles.fieldInnerShadow,\n                        colorBackground: styles.fieldBackground,\n                        colorText: styles.labelText,\n                        colorDanger: styles.fieldErrorText,\n                        colorTextSecondary: styles.labelText,\n                        colorTextPlaceholder: styles.fieldPlaceholderText,\n                    },\n                    rules: {\n                        '.Input': {\n                            borderColor: styles.fieldBorder,\n                            color: styles.fieldText,\n                            boxShadow: styles.fieldInnerShadow,\n                        },\n                    },\n                };\n            } else {\n                appearance = {};\n            }\n\n            stripeUPEClient = await this.scriptLoader.getStripeClient(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            this._stripeElements = await this.scriptLoader.getElements(stripeUPEClient, {\n                clientSecret: clientToken,\n                appearance,\n            });\n\n            const { getBillingAddress, getConsignments } =\n                this.paymentIntegrationService.getState();\n            const consignments = getConsignments();\n            const id = consignments?.[0]?.id;\n            const { email: billingEmail } = getBillingAddress() || {};\n            const options = billingEmail\n                ? { defaultValues: { mode: StripeFormMode.SHIPPING, email: billingEmail } }\n                : {};\n            const linkAuthenticationElement =\n                this._stripeElements.getElement(StripeElementType.AUTHENTICATION) ||\n                this._stripeElements.create(StripeElementType.AUTHENTICATION, options);\n\n            linkAuthenticationElement.on('change', (event: StripeEventType) => {\n                if (!('authenticated' in event)) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCustomer);\n                }\n\n                this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    stripeLinkAuthenticationState: event.authenticated,\n                });\n\n                if (event.complete) {\n                    onEmailChange(event.authenticated, event.value.email);\n                } else {\n                    onEmailChange(false, '');\n                }\n\n                if (isLoading) {\n                    isLoading(false);\n                }\n\n                if (stripeLinkAuthenticationState === undefined && event.authenticated && id) {\n                    this.paymentIntegrationService.deleteConsignment(id);\n                }\n            });\n            linkAuthenticationElement.mount(`#${container}`);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.AUTHENTICATION)?.unmount();\n\n        return Promise.resolve();\n    }\n\n    signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    signOut(options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    StripeElements,\n    StripeElementsOptions,\n    StripeHostWindow,\n    StripeUPEClient,\n} from './stripe-upe';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    async getElements(\n        stripeClient: StripeUPEClient,\n        options: StripeElementsOptions,\n    ): Promise<StripeElements> {\n        let stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            stripeElements = stripeClient.elements(options);\n\n            Object.assign(this.stripeWindow, { bcStripeElements: stripeElements });\n        } else {\n            await stripeElements.fetchUpdates();\n            stripeElements.update(options);\n        }\n\n        return stripeElements;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeUPECustomerStrategy from './stripe-upe-customer-strategy';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createStripeUPECustomerStrategy: CustomerStrategyFactory<StripeUPECustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new StripeUPECustomerStrategy(\n        paymentIntegrationService,\n        new StripeUPEScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeUPECustomerStrategy, [{ id: 'stripeupe' }]);\n","import {\n    CustomerStrategy,\n    CustomerStrategyFactory,\n    CustomerStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCustomerStrategyFactories from '../generated/customer-strategies';\n\nexport interface CustomerStrategyFactories {\n    [key: string]: CustomerStrategyFactory<CustomerStrategy>;\n}\n\nexport default function createCustomerStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    customerStrategyFactories: CustomerStrategyFactories = defaultCustomerStrategyFactories,\n): ResolveIdRegistry<CustomerStrategy, CustomerStrategyResolveId> {\n    const registry = new ResolveIdRegistry<CustomerStrategy, CustomerStrategyResolveId>();\n\n    for (const [, createCustomerStrategy] of Object.entries(customerStrategyFactories)) {\n        if (\n            !isResolvableModule<\n                CustomerStrategyFactory<CustomerStrategy>,\n                CustomerStrategyResolveId\n            >(createCustomerStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCustomerStrategy.resolveIds) {\n            registry.register(resolverId, () => createCustomerStrategy(paymentIntegrationService));\n        }\n    }\n\n    return registry;\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\n        Response<InternalCustomerResponseBody>\n    > {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { CustomerStrategy as CustomerStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyExecutePaymentMethodCheckoutAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport CustomerStrategyRegistryV2 from './customer-strategy-registry-v2';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>,\n        private _strategyRegistryV2: CustomerStrategyRegistryV2,\n    ) {}\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(CustomerStrategyActionType.SignInRequested, undefined, meta),\n            );\n\n            const promise: Promise<InternalCheckoutSelectors | void> = this._getStrategy(\n                methodId,\n            ).signIn(credentials, options);\n\n            promise\n                .then(() => {\n                    observer.next(\n                        createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta),\n                    );\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta),\n            );\n\n            const promise: Promise<InternalCheckoutSelectors | void> =\n                this._getStrategy(methodId).signOut(options);\n\n            promise\n                .then(() => {\n                    observer.next(\n                        createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta),\n                    );\n                });\n        });\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Observable<CustomerStrategyExecutePaymentMethodCheckoutAction> {\n        return Observable.create(\n            (observer: Observer<CustomerStrategyExecutePaymentMethodCheckoutAction>) => {\n                const methodId = options && options.methodId;\n                const meta = { methodId };\n\n                observer.next(\n                    createAction(\n                        CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested,\n                        undefined,\n                        meta,\n                    ),\n                );\n\n                const promise: Promise<InternalCheckoutSelectors | void> =\n                    this._getStrategy(methodId).executePaymentMethodCheckout(options);\n\n                promise\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed,\n                                error,\n                                meta,\n                            ),\n                        );\n                    });\n            },\n        );\n    }\n\n    initialize(\n        options?: CustomerInitializeOptions,\n    ): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n                const state = store.getState();\n                const methodId = options && options.methodId;\n                const meta = { methodId };\n\n                if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta),\n                );\n\n                const promise: Promise<InternalCheckoutSelectors | void> =\n                    this._getStrategy(methodId).initialize(options);\n\n                promise\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                CustomerStrategyActionType.InitializeSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                CustomerStrategyActionType.InitializeFailed,\n                                error,\n                                meta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deinitialize(\n        options?: CustomerRequestOptions,\n    ): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n                const state = store.getState();\n                const methodId = options && options.methodId;\n                const meta = { methodId };\n\n                if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta),\n                );\n\n                const promise: Promise<InternalCheckoutSelectors | void> =\n                    this._getStrategy(methodId).deinitialize(options);\n\n                promise\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                CustomerStrategyActionType.DeinitializeSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                CustomerStrategyActionType.DeinitializeFailed,\n                                error,\n                                meta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    widgetInteraction(\n        method: () => Promise<any>,\n        options?: CustomerRequestOptions,\n    ): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta),\n            );\n\n            method()\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            CustomerStrategyActionType.WidgetInteractionFinished,\n                            undefined,\n                            meta,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(\n                            CustomerStrategyActionType.WidgetInteractionFailed,\n                            error,\n                            meta,\n                        ),\n                    );\n                });\n        });\n    }\n\n    private _getStrategy(methodId?: string): CustomerStrategy | CustomerStrategyV2 {\n        let strategy: CustomerStrategy | CustomerStrategyV2;\n\n        try {\n            strategy = this._strategyRegistryV2.get({ id: methodId || '' });\n        } catch {\n            strategy = this._strategyRegistry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: (methodId: string) => PaymentMethod<AmazonPayV2InitializeOptions>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency || !createCheckoutSessionConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator, StoreConfig } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            return concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        ...options,\n                        useCache: true,\n                        params: { ...options?.params, checkoutId: id },\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(() => {\n                    return this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) => {\n                            return createAction(\n                                CheckoutActionType.LoadCheckoutSucceeded,\n                                this._shouldTransformCustomerAddress(\n                                    store.getState().config.getStoreConfigOrThrow(),\n                                )\n                                    ? this._transformCustomerAddresses(body)\n                                    : body,\n                            );\n                        });\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n        };\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig(),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(\n                        CheckoutActionType.LoadCheckoutSucceeded,\n                        this._shouldTransformCustomerAddress(state.config.getStoreConfigOrThrow())\n                            ? this._transformCustomerAddresses(body)\n                            : body,\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n\n    private _shouldTransformCustomerAddress(storeConfig: StoreConfig): boolean {\n        return (\n            storeConfig.checkoutSettings.features[\n                'CHECKOUT-8183.set_shouldSaveAddress_false_for_existing_address'\n            ] ?? true\n        );\n    }\n\n    private _transformCustomerAddresses(body: Checkout): Checkout {\n        return {\n            ...body,\n            customer: {\n                ...body.customer,\n                addresses: body.customer.addresses.map((address) => ({\n                    ...address,\n                    shouldSaveAddress: false,\n                })),\n            },\n        };\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nconst isPaymentMethod = (value: PaymentMethod | undefined): value is PaymentMethod => {\n    return !!value;\n};\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethodsById(\n        methodIds: string[],\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n                Promise.all(\n                    methodIds.map(async (id) => {\n                        try {\n                            const response = await this._requestSender.loadPaymentMethod(id, {\n                                ...options,\n                                params,\n                            });\n\n                            return response.body;\n                        } catch (_e) {\n                            return undefined;\n                        }\n                    }),\n                )\n                    .then((response) => {\n                        const paymentMethods = response.filter(isPaymentMethod);\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                paymentMethods,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                        observer.complete();\n                    });\n            });\n    }\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\ntype EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitStoredCardForm(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<HostedInputStoredCardSucceededEvent> {\n        const promise = this._eventPoster.post<HostedInputStoredCardSucceededEvent>(\n            {\n                type: HostedFieldEventType.StoredCardRequested,\n                payload: { fields, data },\n            },\n            {\n                successType: HostedInputEventType.StoredCardSucceeded,\n                errorType: HostedInputEventType.StoredCardFailed,\n            },\n        );\n\n        return this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async submitStoredCard(payload: {\n        fields: StoredCardHostedFormInstrumentFields;\n        data: StoredCardHostedFormData;\n    }): Promise<HostedInputStoredCardSucceededEvent | void> {\n        return this._getFirstField().submitStoredCardForm(payload.fields, payload.data);\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.physicalItems.categories',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n            'lineItems.digitalItems.categories',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes(include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum PaymentProviderCustomerType {\n    UpdatePaymentProviderCustomer = 'UPDATE_PAYMENT_PROVIDER_CUSTOMER',\n}\n\nexport type PaymentProviderCustomerAction = UpdatePaymentProviderCustomerAction;\n\nexport interface UpdatePaymentProviderCustomerAction extends Action {\n    type: PaymentProviderCustomerType.UpdatePaymentProviderCustomer;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { Observable, of } from 'rxjs';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerAction,\n    PaymentProviderCustomerType,\n} from './payment-provider-customer-actions';\n\nexport default class PaymentProviderCustomerActionCreator {\n    updatePaymentProviderCustomer(\n        providerCustomerData: PaymentProviderCustomer,\n    ): Observable<PaymentProviderCustomerAction> {\n        return of(\n            createAction(\n                PaymentProviderCustomerType.UpdatePaymentProviderCustomer,\n                providerCustomerData,\n            ),\n        );\n    }\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(private _shippingCountryRequestSender: ShippingCountryRequestSender) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender\n                .loadCountries(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(\n                            ShippingCountryActionType.LoadShippingCountriesSucceeded,\n                            response.body.data,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingCountryActionType.LoadShippingCountriesFailed,\n                            response,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow, getOutstandingBalance },\n    config: { getContextConfig, getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    countries: { getCountries },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow, getInstruments },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentProviderCustomer: { getPaymentProviderCustomer, getPaymentProviderCustomerOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n    shippingCountries: { getShippingCountries },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getCountries: clone(getCountries),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getContextConfig: clone(getContextConfig),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getInstruments: clone(getInstruments),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getPaymentProviderCustomer: clone(getPaymentProviderCustomer),\n        getPaymentProviderCustomerOrThrow: clone(getPaymentProviderCustomerOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        getShippingCountries: clone(getShippingCountries),\n        getOutstandingBalance: clone(getOutstandingBalance),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport {\n    PaymentProviderCustomer,\n    PaymentProviderCustomerActionCreator,\n} from '../payment-provider-customer';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport { RemoteCheckoutActionCreator } from '../remote-checkout';\nimport { InitializePaymentOptions } from '../remote-checkout/remote-checkout-request-sender';\nimport { ConsignmentActionCreator, ShippingCountryActionCreator } from '../shipping';\nimport { SpamProtectionActionCreator } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _checkoutValidator: CheckoutValidator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethods(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n\n    async applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\n        const { checkout } = this._store.getState();\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n        if (shouldExecuteSpamCheck) {\n            await this._store.dispatch(\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\n            );\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCurrentOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async updatePaymentProviderCustomer(\n        paymentProviderCustomer: PaymentProviderCustomer,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer(\n                paymentProviderCustomer,\n            ),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadShippingCountries(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._shippingCountryActionCreator.loadCountries(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.deleteConsignment(consignmentId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, params, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async forgetCheckout(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async validateCheckout(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        await this._checkoutValidator.validate(checkout, options);\n    }\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { PaymentProviderCustomerActionCreator } from '../payment-provider-customer';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n} from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost, getLocale },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const checkoutValidator = new CheckoutValidator(new CheckoutRequestSender(requestSender));\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    const paymentProviderCustomerActionCreator = new PaymentProviderCustomerActionCreator();\n\n    const shippingCountryActionCreator = new ShippingCountryActionCreator(\n        new ShippingCountryRequestSender(requestSender, { locale: getLocale() }),\n    );\n\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender),\n        checkoutActionCreator,\n    );\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        checkoutValidator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        customerActionCreator,\n        cartRequestSender,\n        storeCreditActionCreator,\n        spamProtectionActionCreator,\n        paymentProviderCustomerActionCreator,\n        shippingCountryActionCreator,\n        remoteCheckoutActionCreator,\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeScriptLoader,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    PAYPAL_COMPONENTS,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { StoreConfig } from '../../../config';\nimport { PaypalHostWindow } from '../paypal';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string, storeConfig?: StoreConfig) {\n        this._clientToken = clientToken;\n        this._braintreeScriptLoader.initialize(storeConfig);\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(\n                    this._getPayPalSDKConfig(config),\n                    paypalSdkLoadCallback,\n                );\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module\n            ? module\n                  .then((mod) => mod.teardown())\n                  .catch((error) => {\n                      if (error.code !== 'METHOD_CALLED_AFTER_TEARDOWN') {\n                          throw error;\n                      }\n                  })\n            : Promise.resolve();\n    }\n\n    private _getPayPalSDKConfig(config: Partial<BraintreePaypalSdkCreatorConfig>) {\n        return {\n            currency: config.currency,\n            ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n            components: PAYPAL_COMPONENTS.toString(),\n            intent: config.intent,\n            commit: false,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { StoreConfig } from '../../../config';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(\n        clientToken: string,\n        storeConfig: StoreConfig,\n        options: VisaCheckoutInitializeOptions,\n    ): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken, storeConfig);\n\n        return this._braintreeSDKCreator.getVisaCheckout().then((visaCheckout) =>\n            visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(\n        payment: VisaCheckoutPaymentSuccessPayload,\n        shipping?: Address,\n        billing?: Address,\n    ): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout().then((braintreeVisaCheckout) =>\n            Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ]).then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm(\n                    {\n                        ...tokenizedPayload,\n                        shippingAddress,\n                        billingAddress,\n                    },\n                    dataCollector,\n                );\n            }),\n        );\n    }\n\n    private _postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BraintreeScriptLoader } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender,\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader, window);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeVerifyPayload } from '../braintree';\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(\n        checkout: Checkout | void,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n        publishableKey?: string,\n    ): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): Promise<NewTransactionInfo | void>;\n    };\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface CardInformation {\n    cardType: string;\n    lastFour: string;\n    lastTwo?: string;\n    bin?: string;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: CardInformation;\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n            bin: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus?: TotalPriceStatusType;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    callbackIntents?: CallbackIntentsType[];\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface UpdatePaymentDataRequestPayload {\n    apiVersion?: number;\n    apiVersionMinor?: number;\n    merchantInfo?: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods?: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo?: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus?: TotalPriceStatusType;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    callbackIntents?: CallbackIntentsType[];\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n}\n\nexport type GooglePayTransactionInfo = Pick<GooglePayPaymentDataRequestV2, 'transactionInfo'>;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window,\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n            )\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, public _window: ChasePayHostWindow = window) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(\n                `//pwc${\n                    testMode ? 'psb' : ''\n                }.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`,\n            )\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(public error?: Error) {\n        super(\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\n        );\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    CardInformation,\n    EnvironmentType,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    GooglePayPaymentOptions,\n    GooglePaySDK,\n    TokenizePayload,\n    UpdatePaymentDataRequestPayload,\n} from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n    private _isBuyNowFlow = false;\n    private _shouldThrowError = true;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(\n        methodId: string,\n        googlePayClientOptions?: GooglePayPaymentOptions,\n    ): Promise<boolean> {\n        this._methodId = methodId;\n\n        return this._configureWallet(googlePayClientOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default,\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    updatePaymentDataRequest(paymentDataRequest: UpdatePaymentDataRequestPayload) {\n        const existingPaymentDataRequest = this._getPaymentDataRequest();\n\n        this._paymentDataRequest = {\n            ...existingPaymentDataRequest,\n            ...paymentDataRequest,\n            merchantInfo: {\n                ...(existingPaymentDataRequest.merchantInfo ?? {}),\n                ...(paymentDataRequest.merchantInfo ?? {}),\n            },\n            transactionInfo: {\n                ...(existingPaymentDataRequest.transactionInfo ?? {}),\n                ...(paymentDataRequest.transactionInfo ?? {}),\n            },\n            shippingAddressParameters: {\n                ...(existingPaymentDataRequest.shippingAddressParameters ?? {}),\n                ...(paymentDataRequest.shippingAddressParameters ?? {}),\n            },\n        };\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer\n            .parseResponse(paymentData)\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\n            ),\n        );\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow: boolean): void {\n        this._isBuyNowFlow = isBuyNowFlow;\n    }\n\n    updateShouldThrowInvalidError(shouldThrowPaymentInvalidError: boolean) {\n        this._shouldThrowError = shouldThrowPaymentInvalidError;\n    }\n\n    private _configureWallet(\n        googlePayClientOptions?: Partial<GooglePayPaymentOptions>,\n    ): Promise<boolean> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options =\n            features && features['INT-5826.google_hostname_alias']\n                ? { params: { origin: window.location.hostname } }\n                : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then((state) => {\n                const checkout = this._getCheckout(state);\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(\n                        checkout,\n                        paymentMethod,\n                        hasShippingAddress,\n                    ),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(\n                        googlePay,\n                        testMode,\n                        googlePayClientOptions,\n                    );\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient\n                        .isReadyToPay({\n                            allowedPaymentMethods: [\n                                {\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                    parameters: {\n                                        allowedAuthMethods:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedAuthMethods,\n                                        allowedCardNetworks:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedCardNetworks,\n                                    },\n                                },\n                            ],\n                            apiVersion: paymentDataRequest.apiVersion,\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                        })\n                        .then(({ result: isReadyToPay }) => {\n                            if (isReadyToPay) {\n                                return isReadyToPay;\n                            }\n\n                            if (!this._shouldThrowError) {\n                                return isReadyToPay;\n                            }\n\n                            throw new PaymentMethodInvalidError();\n                        });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: CardInformation) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n            ...(cardInformation?.bin ? { bin: cardInformation?.bin } : {}),\n        };\n    }\n\n    private _getCheckout(state: InternalCheckoutSelectors): Checkout | void {\n        if (this._isBuyNowFlow) {\n            return;\n        }\n\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return checkout;\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(\n        google: GooglePaySDK,\n        testMode?: boolean,\n        googlePayClientOptions?: Partial<GooglePayPaymentOptions>,\n    ): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({\n            environment,\n            ...(googlePayClientOptions ?? {}),\n        });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(\n        paymentData: GooglePaymentData,\n        id: string,\n        customerEmail?: string,\n    ): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2:\n                paymentData.paymentMethodData.info.billingAddress.address2 +\n                paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode:\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n        const buyNowCartId = this._isBuyNowFlow\n            ? this._store.getState().cart.getCartOrThrow().id\n            : undefined;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            },\n        });\n    }\n\n    private _updateBillingAddress(\n        paymentData: GooglePaymentData,\n    ): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\n            paymentData,\n            remoteBillingAddress.id,\n            remoteBillingAddress.email,\n        );\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window,\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\n            if (!this._window.google) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.google;\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(\n    store: CheckoutStore,\n    initializer: GooglePayInitializer,\n): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender),\n        ),\n        requestSender,\n    );\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizationSpecification,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(\n            paymentGatewaySpecification,\n            supportedCards,\n        );\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo: {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(\n        tokenizationSpecification: TokenizationSpecification,\n        supportedCards: string[],\n    ) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map((card) =>\n                    card === 'MC' ? 'MASTERCARD' : card,\n                ),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","enum GooglePayCustomerMethodType {\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_ADYENV3 = 'googlepayadyenv3',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BNZ = 'googlepaybnz',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_CYBERSOURCEV2 = 'googlepaycybersourcev2',\n    GOOGLEPAY_ORBITAL = 'googlepayorbital',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    GOOGLEPAY_STRIPEUPE = 'googlepaystripeupe',\n    GOOGLEPAY_WORLDPAYACCESS = 'googlepayworldpayaccess',\n}\n\nexport default GooglePayCustomerMethodType;\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(private _requestSender: RequestSender) {}\n\n    async initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress,\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(\n        testMode: boolean,\n        checkoutcomkey: string,\n        token: CheckoutcomGooglePayToken,\n    ): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\n            testMode,\n            checkoutcomkey,\n            {\n                type: 'googlepay',\n                token_data: token,\n            },\n        );\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(\n        testMode: boolean,\n        checkoutcomKey: string,\n        data = {},\n    ): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout | undefined,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'checkoutltd',\n                            gatewayMerchantId: initializationData.checkoutcomkey,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'chase',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n        const consignments = checkout?.consignments || [];\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired:\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                    ? false\n                    : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (\n            !payload.id ||\n            !payload.type ||\n            !payload.card ||\n            !payload.card.brand ||\n            !payload.card.last4\n        ) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const decimalPlaces = checkout?.cart.currency.decimalPlaces || 2;\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, decimalPlaces).toFixed(decimalPlaces)\n            : '';\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n    TotalPriceStatusType,\n} from './googlepay';\n\nexport default class GooglePayWorldpayAccessInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout | undefined,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const currencyCode = checkout?.cart.currency.code || '';\n        const totalPrice = checkout?.outstandingBalance\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\n            : '';\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'worldpay',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay?.container) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        let state = this._store.getState();\n        let paymentMethod: PaymentMethod<any>;\n\n        try {\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n            );\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId: amazonpay.container,\n            methodId,\n            placement: AmazonPayV2Placement.Checkout,\n        });\n\n        return this._store.getState();\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return this._store.getState();\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.',\n        );\n    }\n\n    async signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        await this._amazonPayV2PaymentProcessor.signout();\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeVisaCheckoutPaymentProcessor,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutScriptLoader,\n} from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader,\n        private _formPoster: FormPoster,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n                const { clientToken } = this._paymentMethod;\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { container, onError = () => {} } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(\n                        clientToken,\n                        storeConfig,\n                        initOptions,\n                    ),\n                ])\n                    .then(([visaCheckout, initOptions]) => {\n                        const signInButton = this._createSignInButton(\n                            container,\n                            this._buttonClassName,\n                        );\n\n                        visaCheckout.init(initOptions);\n                        visaCheckout.on(\n                            'payment.success',\n                            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                                this._paymentInstrumentSelected(paymentSuccessPayload).catch(\n                                    (error) => onError(error),\n                                ),\n                        );\n                        visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                        return signInButton;\n                    })\n                    .then((signInButton) => {\n                        signInButton.style.visibility = 'visible';\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor\n            .deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(\n                () => {\n                    return this._braintreeVisaCheckoutPaymentProcessor\n                        .handleSuccess(\n                            paymentSuccessPayload,\n                            state.shippingAddress.getShippingAddress(),\n                            state.billingAddress.getBillingAddress(),\n                        )\n                        .then(async () => {\n                            await this._store.dispatch(\n                                this._checkoutActionCreator.loadCurrentCheckout(),\n                            );\n                            this._onPaymentSelectComplete();\n                        });\n                },\n                { methodId },\n            ),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (\n            (container.querySelector(`.${buttonClass}`) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass)\n        );\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.chasepay\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (\n                    !this._paymentMethod ||\n                    !this._paymentMethod.initializationData.digitalSessionId\n                ) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader\n                    .load(this._paymentMethod.config.testMode)\n                    .then((JPMC) => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store\n                                .dispatch(\n                                    this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n                                )\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId =\n                                        method &&\n                                        method.initializationData &&\n                                        method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(\n                            ChasePay.EventType.COMPLETE_CHECKOUT,\n                            (payload: ChasePaySuccessPayload) => {\n                                const state = this._store.getState();\n                                const method = state.paymentMethods.getPaymentMethod(methodId);\n                                const requestId =\n                                    method &&\n                                    method.initializationData &&\n                                    method.initializationData.merchantRequestId;\n\n                                if (requestId) {\n                                    this._setExternalCheckoutData(payload, requestId).then(() => {\n                                        this._reloadPage();\n                                    });\n                                }\n                            },\n                        );\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _setExternalCheckoutData(\n        payload: ChasePaySuccessPayload,\n        requestId: string,\n    ): Promise<Response<any>> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport {\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator,\n    ) {}\n\n    signIn(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { getShippableItemsCount } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\nimport { default as MethodType } from './googlepay-customer-method-type';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n    private _onClick?: () => void;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._onClick = googlePayOptions.onClick;\n\n        this._googlePayPaymentProcessor.updateShouldThrowInvalidError(false);\n\n        return this._googlePayPaymentProcessor\n            .initialize(methodId)\n            .then((isReadyToPay: boolean) => {\n                if (isReadyToPay) {\n                    this._walletButton = this._createSignInButton(\n                        googlePayOptions.container,\n                        googlePayOptions,\n                    );\n                }\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize().then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayCustomerInitializeOptions,\n    ): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(\n            this._handleWalletButtonClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(\n        options: CustomerInitializeOptions,\n    ): GooglePayCustomerInitializeOptions {\n        if (\n            options.methodId === MethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_BRAINTREE && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_CHECKOUTCOM && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === MethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_ORBITAL && options.googlepayorbital) {\n            return options.googlepayorbital;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_STRIPE && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        if (options.methodId === MethodType.GOOGLEPAY_STRIPEUPE && options.googlepaystripeupe) {\n            return options.googlepaystripeupe;\n        }\n\n        if (\n            options.methodId === MethodType.GOOGLEPAY_WORLDPAYACCESS &&\n            options.googlepayworldpayaccess\n        ) {\n            return options.googlepayworldpayaccess;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        if (this._onClick && typeof this._onClick === 'function') {\n            this._onClick();\n        }\n\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        const payloadToUpdate = {\n            transactionInfo: {\n                currencyCode: cart.currency.code,\n                totalPrice: String(cart.cartAmount),\n            },\n        };\n\n        this._googlePayPaymentProcessor.updatePaymentDataRequest(payloadToUpdate);\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        const checkoutUrl = this._store.getState().config.getStoreConfigOrThrow().links.siteLink;\n\n        this._formPoster.postForm(\n            window.location.pathname === '/embedded-checkout'\n                ? `${checkoutUrl}/checkout`\n                : '/checkout.php',\n            {\n                headers: {\n                    Accept: 'text/html',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    ...SDK_VERSION_HEADERS,\n                },\n            },\n        );\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.masterpass\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: this._paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: this._paymentMethod.config.testMode,\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader\n                    .load(masterpassScriptLoaderParams)\n                    .then((Masterpass) => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (this._paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = this._paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = this._paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Extension } from './extension';\n\nexport enum ExtensionActionType {\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\n}\n\nexport type ExtensionAction =\n    | LoadExtensionsRequestedAction\n    | LoadExtensionsSucceededAction\n    | LoadExtensionsFailedAction\n    | RenderExtensionRequestedAction\n    | RenderExtensionSucceededAction\n    | RenderExtensionFailedAction;\n\nexport interface LoadExtensionsRequestedAction extends Action {\n    type: ExtensionActionType.LoadExtensionsRequested;\n}\n\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\n    type: ExtensionActionType.LoadExtensionsSucceeded;\n}\n\nexport interface LoadExtensionsFailedAction extends Action<Error> {\n    type: ExtensionActionType.LoadExtensionsFailed;\n}\n\nexport interface RenderExtensionRequestedAction extends Action {\n    type: ExtensionActionType.RenderExtensionRequested;\n}\n\nexport interface RenderExtensionSucceededAction extends Action {\n    type: ExtensionActionType.RenderExtensionSucceeded;\n}\n\nexport interface RenderExtensionFailedAction extends Action<Error> {\n    type: ExtensionActionType.RenderExtensionFailed;\n}\n","export enum ExtensionInternalEventType {\n    ExtensionReady = 'EXTENSION:READY',\n    ExtensionFailed = 'EXTENSION:FAILED',\n}\n\nexport interface ExtensionReadyEvent {\n    type: ExtensionInternalEventType.ExtensionReady;\n}\n\nexport interface ExtensionFailedEvent {\n    type: ExtensionInternalEventType.ExtensionFailed;\n}\n\nexport type ExtensionInternalEvent = ExtensionReadyEvent | ExtensionFailedEvent;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport {\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n} from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.',\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options),\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport class ExtensionNotFoundError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to no extension configured for this region.');\n\n        this.name = 'ExtensionNotFoundError';\n        this.type = 'extension_not_found';\n    }\n}\n","import { IframeEventPoster } from '../common/iframe';\n\nimport { ExtensionNotFoundError } from './errors';\nimport { Extension } from './extension';\n\nexport function createExtensionEventPoster<T>(extension: Extension): IframeEventPoster<T> {\n    const iframe = document\n        .querySelector(`[data-extension-id=\"${extension.id}\"]`)\n        ?.querySelector('iframe');\n\n    if (!iframe?.contentWindow) {\n        throw new ExtensionNotFoundError(\n            `Unable to post due to no extension rendered for ID: ${extension.id}.`,\n        );\n    }\n\n    return new IframeEventPoster<T>(extension.url, iframe.contentWindow);\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(\n    options: IFrameOptions,\n    target: string | HTMLElement,\n): IFrameComponent[] {\n    /* eslint-disable @typescript-eslint/no-var-requires */\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport class ExtensionNotLoadedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to load an extension');\n\n        this.name = 'ExtensionNotLoadedError';\n        this.type = 'extension_not_loaded';\n    }\n}\n","import { ExtensionEventType } from './extension-events';\n\nexport enum ExtensionInternalCommandType {\n    Subscribe = 'EXTENSION_INTERNAL:SUBSCRIBE',\n    Unsubscribe = 'EXTENSION_INTERNAL:UNSUBSCRIBE',\n    ResizeIframe = 'EXTENSION_INTERNAL:RESIZE_IFRAME',\n}\n\nexport interface ExtensionSubscribeCommand {\n    type: ExtensionInternalCommandType.Subscribe;\n    payload: {\n        extensionId: string;\n        eventType: ExtensionEventType;\n    };\n}\n\nexport interface ExtensionUnsubscribeCommand {\n    type: ExtensionInternalCommandType.Unsubscribe;\n    payload: {\n        extensionId: string;\n        eventType: ExtensionEventType;\n    };\n}\n\nexport interface ExtensionResizeIframeCommand {\n    type: ExtensionInternalCommandType.ResizeIframe;\n    payload: {\n        extensionId: string;\n    };\n}\n\nexport interface ExtensionInternalCommandMap {\n    [ExtensionInternalCommandType.Subscribe]: ExtensionSubscribeCommand;\n    [ExtensionInternalCommandType.Unsubscribe]: ExtensionUnsubscribeCommand;\n    [ExtensionInternalCommandType.ResizeIframe]: ExtensionResizeIframeCommand;\n}\n\nexport type ExtensionInternalCommand =\n    | ExtensionSubscribeCommand\n    | ExtensionUnsubscribeCommand\n    | ExtensionResizeIframeCommand;\n","import { IFrameComponent, iframeResizer, isIframeEvent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { ExtensionNotLoadedError } from './errors';\nimport { ExtensionInternalCommandType } from './extension-internal-commands';\n\nexport default class ResizableIframeCreator {\n    constructor(private _options?: { timeout: number }) {}\n\n    createFrame(\n        src: string,\n        containerId: string,\n        initCallback: () => void,\n        failedCallback: () => void,\n    ): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new ExtensionNotLoadedError(\n                'Unable to embed the iframe because the container element could not be found.',\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout, initCallback, failedCallback).catch(\n            (error) => {\n                container.removeChild(iframe);\n\n                throw error;\n            },\n        );\n    }\n\n    private _toResizableFrame(\n        iframe: HTMLIFrameElement,\n        timeoutInterval: number,\n        initCallback: () => void,\n        failedCallback: () => void,\n    ): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                failedCallback();\n\n                reject(\n                    new ExtensionNotLoadedError(\n                        'Unable to load the extension because the content could not be loaded.',\n                    ),\n                );\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, ExtensionInternalCommandType.ResizeIframe)) {\n                    iframe.style.display = '';\n\n                    const iframes = iframeResizer(\n                        {\n                            autoResize: false,\n                            scrolling: false,\n                            sizeWidth: false,\n                            heightCalculationMethod: 'bodyOffset',\n                            initCallback,\n                        },\n                        iframe,\n                    );\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","export type ExtensionCommand =\n    | ReloadCheckoutCommand\n    | ShowLoadingIndicatorCommand\n    | SetIframeStyleCommand;\n\nexport enum ExtensionCommandType {\n    ReloadCheckout = 'EXTENSION:RELOAD_CHECKOUT',\n    ShowLoadingIndicator = 'EXTENSION:SHOW_LOADING_INDICATOR',\n    SetIframeStyle = 'EXTENSION:SET_IFRAME_STYLE',\n}\n\nexport interface ExtensionCommandContext {\n    extensionId: string;\n}\n\nexport interface ReloadCheckoutCommand {\n    type: ExtensionCommandType.ReloadCheckout;\n}\n\nexport interface ShowLoadingIndicatorCommand {\n    type: ExtensionCommandType.ShowLoadingIndicator;\n    payload: {\n        show: boolean;\n    };\n}\n\nexport interface SetIframeStyleCommand {\n    type: ExtensionCommandType.SetIframeStyle;\n    payload: {\n        style: {\n            [key: string]: string | number | null;\n        };\n    };\n}\n\nexport interface ExtensionCommandMap {\n    [ExtensionCommandType.ReloadCheckout]: ReloadCheckoutCommand;\n    [ExtensionCommandType.ShowLoadingIndicator]: ShowLoadingIndicatorCommand;\n    [ExtensionCommandType.SetIframeStyle]: SetIframeStyleCommand;\n}\n","import { createExtensionEventPoster } from './create-extension-event-poster';\nimport { Extension, ExtensionIframeConfig } from './extension';\nimport { ExtensionInternalEvent, ExtensionInternalEventType } from './extension-internal-events';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport class ExtensionIframe {\n    private _iframe: HTMLIFrameElement | undefined;\n    private _url: URL;\n\n    constructor(\n        private _containerId: string,\n        private _extension: Extension,\n        private _config: ExtensionIframeConfig,\n    ) {\n        const { cartId, parentOrigin } = this._config;\n\n        this._url = new URL(this._extension.url);\n\n        this._url.searchParams.set('extensionId', this._extension.id);\n        this._url.searchParams.set('cartId', cartId);\n        this._url.searchParams.set('parentOrigin', parentOrigin);\n    }\n\n    async attach(): Promise<void> {\n        if (\n            document\n                .querySelector(`[data-extension-id=\"${this._extension.id}\"]`)\n                ?.querySelector('iframe')\n        ) {\n            return;\n        }\n\n        const iframeCreator = new ResizableIframeCreator();\n        const iframeResizerCallback = (type: ExtensionInternalEventType) => {\n            const poster = createExtensionEventPoster<ExtensionInternalEvent>(this._extension);\n\n            poster.post({\n                type,\n            });\n        };\n        const initCallback = () => {\n            iframeResizerCallback(ExtensionInternalEventType.ExtensionReady);\n        };\n        const failedCallback = () => {\n            iframeResizerCallback(ExtensionInternalEventType.ExtensionFailed);\n        };\n\n        this._iframe = await iframeCreator.createFrame(\n            this._url.toString(),\n            this._containerId,\n            initCallback,\n            failedCallback,\n        );\n\n        const container = document.getElementById(this._containerId);\n\n        container?.setAttribute('data-extension-id', this._extension.id);\n    }\n\n    detach(): void {\n        if (this._iframe && this._iframe.parentElement) {\n            this._iframe.parentElement.removeChild(this._iframe);\n        }\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\nimport { parseUrl } from '../common/url';\n\nimport { ExtensionNotFoundError } from './errors';\nimport { ExtensionRegion } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport { ExtensionIframe } from './extension-iframe';\nimport { ExtensionRequestSender } from './extension-request-sender';\n\nexport class ExtensionActionCreator {\n    constructor(private _requestSender: ExtensionRequestSender) {}\n\n    loadExtensions(\n        options?: RequestOptions,\n    ): ThunkAction<ExtensionAction, InternalCheckoutSelectors> {\n        return () =>\n            Observable.create((observer: Observer<ExtensionAction>) => {\n                observer.next(createAction(ExtensionActionType.LoadExtensionsRequested));\n\n                this._requestSender\n                    .loadExtensions(options)\n                    .then((response) => {\n                        const extensions = response.body;\n\n                        observer.next(\n                            createAction(ExtensionActionType.LoadExtensionsSucceeded, extensions),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(ExtensionActionType.LoadExtensionsFailed, response),\n                        );\n                    });\n            });\n    }\n\n    renderExtension(\n        container: string,\n        region: ExtensionRegion,\n    ): ThunkAction<ExtensionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create(async (observer: Observer<ExtensionAction>) => {\n                const state = store.getState();\n                const { id: cartId } = state.cart.getCartOrThrow();\n                const {\n                    links: { checkoutLink },\n                    checkoutSettings: { features },\n                } = state.config.getStoreConfigOrThrow();\n\n                if (!features['PROJECT-5029.checkout_extension']) {\n                    return observer.complete();\n                }\n\n                const extension = state.extensions.getExtensionByRegion(region);\n\n                try {\n                    if (!extension) {\n                        throw new ExtensionNotFoundError(\n                            `Unable to proceed due to no extension configured for the region: ${region}.`,\n                        );\n                    }\n\n                    observer.next(createAction(ExtensionActionType.RenderExtensionRequested));\n\n                    const iframe = new ExtensionIframe(container, extension, {\n                        cartId,\n                        parentOrigin: parseUrl(checkoutLink).origin,\n                    });\n\n                    await iframe.attach();\n\n                    observer.next(createAction(ExtensionActionType.RenderExtensionSucceeded));\n                    observer.complete();\n                } catch (error) {\n                    observer.error(\n                        createErrorAction(ExtensionActionType.RenderExtensionFailed, error),\n                    );\n                }\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Extension } from './extension';\n\nexport const EXTENSIONS_API_URL = '/api/storefront/checkout-extensions';\n\nexport class ExtensionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadExtensions({ timeout, params }: RequestOptions = {}): Promise<Response<Extension[]>> {\n        return this._requestSender.get(EXTENSIONS_API_URL, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport class UnsupportedExtensionCommandError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to unsupported extension command.');\n\n        this.name = 'UnsupportedExtensionCommandError';\n        this.type = 'unsupported_extension_command_error';\n    }\n}\n","import { ReadableCheckoutStore } from '../checkout';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\n\nimport { createExtensionEventPoster } from './create-extension-event-poster';\nimport { ExtensionNotFoundError } from './errors';\nimport { UnsupportedExtensionCommandError } from './errors/unsupported-extension-command-error';\nimport { Extension } from './extension';\nimport {\n    ExtensionCommandContext,\n    ExtensionCommandMap,\n    ExtensionCommandType,\n} from './extension-commands';\nimport { ExtensionEvent } from './extension-events';\n\nexport class ExtensionMessenger {\n    private _extensions: Extension[] | undefined;\n\n    constructor(\n        private _store: ReadableCheckoutStore,\n        private _listeners: {\n            [extensionId: string]: IframeEventListener<ExtensionCommandMap>;\n        } = {},\n        private _posters: { [extensionId: string]: IframeEventPoster<ExtensionEvent> } = {},\n    ) {}\n\n    listen<T extends keyof ExtensionCommandMap>(\n        extensionId: string,\n        command: T,\n        commandHandler: (\n            command: ExtensionCommandMap[T],\n            context?: ExtensionCommandContext,\n        ) => void,\n    ): () => void {\n        const extension = this._getExtensionById(extensionId);\n\n        if (!this._listeners[extensionId]) {\n            this._listeners[extensionId] = new IframeEventListener(extension.url);\n        }\n\n        const listener = this._listeners[extensionId];\n\n        listener.listen();\n\n        const validCommandType = this._validateCommand<T>(command);\n\n        const commandHandlerProxy = (\n            command: ExtensionCommandMap[T],\n            context?: ExtensionCommandContext,\n        ) => {\n            if (context?.extensionId === extensionId) {\n                commandHandler(command, context);\n            }\n        };\n\n        listener.addListener(validCommandType, commandHandlerProxy);\n\n        return () => {\n            listener.removeListener(validCommandType, commandHandlerProxy);\n        };\n    }\n\n    stopListen(extensionId: string): void {\n        if (!this._listeners[extensionId]) {\n            return;\n        }\n\n        const listener = this._listeners[extensionId];\n\n        listener.stopListen();\n    }\n\n    post(extensionId: string, event: ExtensionEvent): void {\n        if (!this._posters[extensionId]) {\n            const extension = this._getExtensionById(extensionId);\n\n            this._posters[extensionId] = createExtensionEventPoster<ExtensionEvent>(extension);\n        }\n\n        this._posters[extensionId].post(event);\n    }\n\n    private _getExtensionById(extensionId: string): Extension {\n        const {\n            extensions: { getExtensions },\n        } = this._store.getState();\n\n        this._extensions = getExtensions();\n\n        if (!this._extensions) {\n            throw new ExtensionNotFoundError(`Extension configurations not found.`);\n        }\n\n        const extension = this._extensions.find((e) => e.id === extensionId);\n\n        if (!extension) {\n            throw new ExtensionNotFoundError(\n                `Unable to proceed due to no extension found for ID: ${extensionId}.`,\n            );\n        }\n\n        return extension;\n    }\n\n    private _validateCommand<T extends keyof ExtensionCommandMap>(command: T): T {\n        if (Object.values(ExtensionCommandType).includes(command)) {\n            return command;\n        }\n\n        throw new UnsupportedExtensionCommandError();\n    }\n}\n","import { Consignment } from '../shipping';\n\nexport enum ExtensionEventType {\n    ConsignmentsChanged = 'EXTENSION:CONSIGNMENTS_CHANGED',\n}\n\nexport interface ConsignmentsChangedEvent {\n    type: ExtensionEventType.ConsignmentsChanged;\n    payload: {\n        consignments: Consignment[];\n        previousConsignments: Consignment[];\n    };\n}\n\nexport type ExtensionEvent = ConsignmentsChangedEvent;\n\nexport interface ExtensionEventMap {\n    [ExtensionEventType.ConsignmentsChanged]: ConsignmentsChangedEvent;\n}\n","import { CheckoutSelectors } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { IframeEventListener } from '../common/iframe';\n\nimport { ExtensionEvent, ExtensionEventType } from './extension-events';\nimport {\n    ExtensionInternalCommandMap,\n    ExtensionInternalCommandType,\n    ExtensionSubscribeCommand,\n    ExtensionUnsubscribeCommand,\n} from './extension-internal-commands';\nimport { ExtensionMessenger } from './extension-messenger';\nimport { ExtensionChangeSubscriber, ExtensionChangeUnsubscriber } from './subscribers';\n\nexport class ExtensionEventBroadcaster {\n    private _subscribed: { [id: string]: boolean } = {};\n    private _unsubscribers: { [type: string]: ExtensionChangeUnsubscriber } = {};\n    private _listeners: { [id: string]: IframeEventListener<ExtensionInternalCommandMap> } = {};\n\n    constructor(\n        private _store: DataStoreProjection<CheckoutSelectors>,\n        private _extensionMessenger: ExtensionMessenger,\n        private _subscribers: Record<ExtensionEventType, ExtensionChangeSubscriber>,\n    ) {}\n\n    listen(): void {\n        const {\n            data: { getExtensions },\n        } = this._store.getState();\n\n        getExtensions()?.forEach((extension) => {\n            if (this._listeners[extension.id]) {\n                return;\n            }\n\n            const eventListener = new IframeEventListener<ExtensionInternalCommandMap>(\n                extension.url,\n            );\n\n            eventListener.addListener(\n                ExtensionInternalCommandType.Subscribe,\n                this._handleSubscribe.bind(this),\n            );\n\n            eventListener.addListener(\n                ExtensionInternalCommandType.Unsubscribe,\n                this._handleUnsubscribe.bind(this),\n            );\n\n            eventListener.listen();\n\n            this._listeners[extension.id] = eventListener;\n        });\n    }\n\n    broadcast(event: ExtensionEvent): void {\n        const {\n            data: { getExtensions },\n        } = this._store.getState();\n\n        getExtensions()?.forEach((extension) => {\n            if (!this._subscribed[extension.id]) {\n                return;\n            }\n\n            this._extensionMessenger.post(extension.id, event);\n        });\n    }\n\n    private _handleSubscribe({\n        payload: { eventType, extensionId },\n    }: ExtensionSubscribeCommand): void {\n        this._subscribed[extensionId] = true;\n\n        if (this._unsubscribers[eventType]) {\n            return;\n        }\n\n        this._unsubscribers[eventType] = this._subscribers[eventType](this._store, this);\n    }\n\n    private _handleUnsubscribe({\n        payload: { eventType, extensionId },\n    }: ExtensionUnsubscribeCommand): void {\n        delete this._subscribed[extensionId];\n\n        if (Object.keys(this._subscribed).length) {\n            return;\n        }\n\n        this._unsubscribers[eventType]?.();\n\n        delete this._unsubscribers[eventType];\n    }\n}\n","import { CheckoutSelectors } from '../../checkout';\nimport { DataStoreProjection } from '../../common/data-store';\nimport { ExtensionEventBroadcaster } from '../extension-event-broadcaster';\nimport { ExtensionEventType } from '../extension-events';\n\nimport { ExtensionChangeSubscriber } from './extension-change-subscriber';\n\nexport const subscribeConsignmentsChange: ExtensionChangeSubscriber = (\n    store: DataStoreProjection<CheckoutSelectors>,\n    broadcaster: ExtensionEventBroadcaster,\n) => {\n    const {\n        data: { getConsignments: getInitialConsignments },\n    } = store.getState();\n\n    let consignments = getInitialConsignments() ?? [];\n\n    return store.subscribe(\n        ({ data: { getConsignments } }) => {\n            const currentConsignments = getConsignments() ?? [];\n\n            if (currentConsignments === consignments) {\n                return;\n            }\n\n            broadcaster.broadcast({\n                type: ExtensionEventType.ConsignmentsChanged,\n                payload: {\n                    consignments: currentConsignments,\n                    previousConsignments: consignments,\n                },\n            });\n\n            consignments = currentConsignments;\n        },\n        ({ data: { getConsignments } }) => getConsignments(),\n    );\n};\n","export enum AdyenV3ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2 = 'threeDS2',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n\n    /*\n     * The Component displays the widget which the shopper uses to complete the payment.\n     * */\n    Sdk = 'sdk',\n}\n\nexport enum AdyenV2ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface BoletoDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n    shopperName?: {\n        firstName?: string;\n        lastName?: string;\n    };\n    socialSecurityNumber?: string;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenV2Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV2ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenV3Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV3ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport type AdyenAction = AdyenV2Action | AdyenV3Action;\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        },\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n\n    showBrandsUnderCardNumber?: boolean;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called when the shopper selects the Pay button and payment details are valid.\n     */\n    onSubmit?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenValidationState, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenValidationState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenV2Action | AdyenV3Action,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | AdyenV3ThreeDS2ChallengeComponentOptions\n            | AdyenV2ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: CardState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n    submit(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /**\n     * Configuration for specific payment methods.\n     */\n    paymentMethodsConfiguration?: {\n        klarna: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_account: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_paynow: {\n            useKlarnaWidget: boolean;\n        };\n    };\n\n    showPayButton?: boolean;\n\n    /**\n     * If your shoppers use a language that isn't supported by the Components, you can create your own localization.\n     * To create a localization:\n     * Add a translations object to your payment page, specifying:\n     * The localization you want to create.\n     * An object containing the fields that are used in the Components, as well as the text you want displayed for each field.\n     *\n     * \"en\": {\n     *  \"paymentMethods.moreMethodsButton\": \"More payment methods\",\n     *  \"payButton\": \"Pay\",\n     *  \"storeDetails\": \"Save for my next payment\",\n     *   ...\n     * }\n     */\n    translations?: {\n        [index: string]: {\n            [index: string]: string;\n        };\n    };\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    firstName?: string;\n    lastName?: string;\n    holderName?: string;\n    prefillCardHolderName?: boolean;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\ntype AdyenClientConstructor = (configuration: AdyenConfiguration) => Promise<AdyenClient>;\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenV3HostWindow extends Window {\n    AdyenCheckout?: AdyenClientConstructor;\n}\n\nexport interface AdyenV2HostWindow extends Window {\n    AdyenCheckout?: new (configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions extends AdyenBaseCardComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenBoletoComponentOptions {\n    personalDetailsRequired?: boolean;\n    billingAddressRequired?: boolean;\n    showEmailAddress?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    issuer?: string;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface BoletoState {\n    data: BoletoDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    caretColor?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenV3ThreeDS2ChallengeComponentOptions {\n    challengeWindowSize?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenV2ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenValidationState {\n    valid: boolean;\n    fieldType?: AdyenCardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenComponentState = CardState | BoletoState | WechatState;\n\nexport type AdyenComponentOptions =\n    | AdyenCreditCardComponentOptions\n    | AdyenIdealComponentOptions\n    | AdyenBoletoComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport interface AdyenV3PaymentMethodInitializationData {\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n}\n\nexport interface AdyenV2PaymentMethodInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { AdyenComponentState, CardState } from '../types';\n\nexport default function isCardState(param: AdyenComponentState): param is CardState {\n    return (\n        (typeof param === 'object' &&\n            typeof (param as CardState).data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof (param as CardState).data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV2ActionType,\n    AdyenV2PaymentInitializeOptions,\n    AdyenV2PaymentMethodInitializationData,\n    AdyenV2ScriptLoader,\n    CardStateErrors,\n    isAccountState,\n    isCardState,\n    WithAdyenV2PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    HostedInstrument,\n    InvalidArgumentError,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV2ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv2\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV2PaymentMethodInitializationData>(options.methodId);\n        const { originKey, clientKey, environment, paymentMethodsResponse } =\n            paymentMethod.initializationData || {};\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = clientKey || '';\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument;\n\n        if (!payment) {\n            return Promise.reject(new PaymentArgumentInvalidError(['payment']));\n        }\n\n        this._validateCardData();\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState;\n\n        if (!componentState) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            if (isCardState(componentState) || isAccountState(componentState)) {\n                try {\n                    await this._paymentIntegrationService.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    ...bigpayToken,\n                                    token: paymentData.instrumentId,\n                                },\n                                origin: window.location.origin,\n                                browser_info: getBrowserInfo(),\n                                set_as_default_stored_instrument:\n                                    shouldSetAsDefaultInstrument || null,\n                            },\n                        },\n                    });\n\n                    return;\n                } catch (error) {\n                    await this._processAdditionalAction(\n                        error,\n                        shouldSaveInstrument,\n                        shouldSetAsDefaultInstrument,\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                ...componentState.data.paymentMethod,\n                                origin: window.location.origin,\n                            }),\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv2\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { additionalActionOptions, threeDS2Options } = this._getPaymentInitializeOptions();\n        const widgetSize = additionalActionOptions.widgetSize || threeDS2Options?.widgetSize;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } =\n                this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV2ActionType.ThreeDS2Challenge ||\n                        adyenAction.type === AdyenV2ActionType.QRCode,\n                );\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    styles: {\n                        ...adyenv2.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv2.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv2.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv2.validateCardFields(validateState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact: {\n                    const billingAddress = this._paymentIntegrationService\n                        .getState()\n                        .getBillingAddress();\n                    const { prefillCardHolderName } = paymentMethod.initializationData;\n\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                        ...adyenv2.options,\n                        onChange: (componentState) => this._updateComponentState(componentState),\n                        data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName),\n                    });\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    break;\n                }\n\n                case AdyenPaymentMethodType.IDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: (componentState) =>\n                                this._updateComponentState(componentState),\n                        });\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(\n                                new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                ),\n                            );\n                        }\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Klarna:\n                case AdyenPaymentMethodType.KlarnaPayNow:\n                case AdyenPaymentMethodType.KlarnaAccount:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentState) {\n        this._componentState = componentState;\n    }\n\n    private _validateCardData(): void {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv2.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n        const isEmptyString = (value: string) => value.toString().trim().length === 0;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        /**\n         * For some reason adyen sdk doesn't return isValid for payment methods with select field in form(iDeal for example)\n         * so we need to check state issuer field\n         */\n        if (\n            Object.keys(cardComponent.state).length === 0 ||\n            (!cardComponent.state.isValid && !cardComponent.state.issuer) ||\n            // prevent empty sepa fields from being sent\n            (cardComponent.props?.type === 'sepadirectdebit' &&\n                Object.values(cardComponent.state.data).some(isEmptyString))\n        ) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n}\n","import { AccountState, AdyenComponentState } from '../types';\n\nexport default function isAccountState(param: AdyenComponentState): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf((param as AccountState).data.paymentMethod.type) !== -1;\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV2PaymentStrategy from './adyenv2-payment-strategy';\n\nconst createAdyenV2PaymentStrategy: PaymentStrategyFactory<AdyenV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV2PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV2PaymentStrategy, [{ gateway: 'adyenv2' }]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.58.0/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-zgFNrGzbwuX5qJLys75cOUIGru/BoEzhGMyC07I3OSdHqXuhUfoDPVG03G+61oF4',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.58.0/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-e0EBlzLdOXxOJimp2uut2z1m98HS2cdhQw+OmeJDp7MRCPRNrQhjIWZiWiIscJvf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV3ActionType,\n    AdyenV3PaymentInitializeOptions,\n    AdyenV3PaymentMethodInitializationData,\n    AdyenV3ScriptLoader,\n    CardStateErrors,\n    isBoletoState,\n    isCardState,\n    WithAdyenV3PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class Adyenv3PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV3PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV3ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV3PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv3 } = options;\n\n        if (!adyenv3) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv3\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv3;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV3PaymentMethodInitializationData>(options.methodId);\n        const { environment, clientKey, paymentMethodsResponse } =\n            paymentMethod.initializationData || {};\n\n        this._adyenClient = await this._scriptLoader.load({\n            paymentMethodsConfiguration: {\n                klarna: {\n                    useKlarnaWidget: true,\n                },\n                klarna_account: {\n                    useKlarnaWidget: true,\n                },\n                klarna_paynow: {\n                    useKlarnaWidget: true,\n                },\n            },\n            environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            clientKey,\n            paymentMethodsResponse,\n            showPayButton: false,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        this._validateCardData();\n\n        if (\n            payment.methodId === 'klarna' ||\n            payment.methodId === 'klarna_account' ||\n            payment.methodId === 'klarna_paynow'\n        ) {\n            this._paymentComponent?.submit();\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState || {\n            data: { paymentMethod: { type: payment.methodId } },\n        };\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            try {\n                await this._paymentIntegrationService.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        formattedPayload: {\n                            bigpay_token: {\n                                ...bigpayToken,\n                                token: paymentData.instrumentId,\n                            },\n                            origin: window.location.origin,\n                            browser_info: getBrowserInfo(),\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                        },\n                    },\n                });\n\n                return;\n            } catch (error) {\n                await this._processAdditionalAction(\n                    error,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                );\n\n                return;\n            }\n        }\n\n        let paymentToken = JSON.stringify({\n            ...componentState.data.paymentMethod,\n            type: payment.methodId,\n            origin: window.location.origin,\n        });\n\n        if (payment.methodId === 'boletobancario' && isBoletoState(componentState)) {\n            paymentToken = JSON.stringify({\n                socialSecurityNumber: componentState.data.socialSecurityNumber,\n                ...componentState.data.shopperName,\n                type: payment.methodId,\n                origin: window.location.origin,\n            });\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: paymentToken,\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _updateComponentState(componentState: AdyenComponentState) {\n        this._componentState = componentState;\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV3PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv3\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete, widgetSize } =\n                additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                challengeWindowSize: widgetSize || '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV3ActionType.ThreeDS2 ||\n                        adyenAction.type === AdyenV3ActionType.QRCode ||\n                        adyenAction.type === AdyenV3ActionType.Sdk,\n                );\n            }\n\n            this._mountElement(additionalActionComponent, containerId);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            firstName: prefillCardHolderName ? firstName : '',\n            lastName: prefillCardHolderName ? lastName : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv3.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv3.options,\n                    styles: {\n                        ...adyenv3.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv3.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv3.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv3.validateCardFields(validateState),\n                });\n\n                try {\n                    this._mountElement(\n                        cardVerificationComponent,\n                        adyenv3.cardVerificationContainerId,\n                    );\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._paymentIntegrationService.getState().getBillingAddress();\n\n            const { prefillCardHolderName } = paymentMethod.initializationData;\n\n            paymentComponent = adyenClient.create(paymentMethod.method, {\n                ...adyenv3.options,\n                showBrandsUnderCardNumber: false,\n                billingAddressRequired: false,\n                showEmailAddress: false,\n                onChange: (componentState) => this._updateComponentState(componentState),\n                onSubmit: (componentState) => this._updateComponentState(componentState),\n                ...(billingAddress\n                    ? { data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName) }\n                    : {}),\n            });\n\n            try {\n                this._mountElement(paymentComponent, adyenv3.containerId);\n            } catch (error) {\n                reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _validateCardData(): void {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv3.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        if (Object.keys(cardComponent.state).length === 0 || !cardComponent.state.isValid) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    private _mountElement(adyenComponent: AdyenComponent, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        adyenComponent.mount(`#${containerId}`);\n    }\n}\n","export interface Affirm {\n    checkout: AffirmCheckout;\n    ui: {\n        error: {\n            on(event: string, callback: () => void): void;\n        };\n        ready(callback: () => void): void;\n    };\n}\n\ninterface AffirmCheckout {\n    (options: AffirmRequestData): void;\n    open(modalOptions: AffirmCallback): void;\n    init(): void;\n}\n\ninterface AffirmCallback {\n    onFail(onFail: AffirmFailResponse): void;\n    onSuccess(success: AffirmSuccessResponse): void;\n}\n\nexport interface AffirmHostWindow extends Window {\n    affirm?: Affirm;\n}\n\nexport interface AffirmSuccessResponse {\n    checkout_token: string;\n    created: string;\n}\n\nexport interface AffirmFailResponse {\n    reason: string;\n}\n\nexport interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string;\n        user_cancel_url: string;\n        user_confirmation_url_action?: string;\n        name?: string;\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    discounts: AffirmDiscount;\n    metadata: {\n        shipping_type: string;\n        entity_name?: string;\n        webhook_session_id?: string;\n        mode?: string;\n        platform_type: string;\n        platform_version: string;\n        platform_affirm: string;\n    };\n    order_id?: string;\n    shipping_amount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: string[][];\n}\n\nexport interface AffirmDiscount {\n    [key: string]: {\n        discount_amount: number;\n        discount_display_name: string;\n    };\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string;\n        last: string;\n        full?: string;\n    };\n    address: {\n        line1: string;\n        line2?: string;\n        city: string;\n        state: string;\n        zipcode: string;\n        country?: string;\n    };\n    phone_number?: string;\n    email?: string;\n}\n\nexport enum AFFIRM_SCRIPTS {\n    PROD = '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX = '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n}\n","import { AdyenComponentState, BoletoState } from '../types';\n\nexport default function isBoletoState(param: AdyenComponentState): param is BoletoState {\n    return (\n        (typeof param === 'object' && typeof (param as BoletoState).data.socialSecurityNumber) ===\n            'string' &&\n        typeof (param as BoletoState).data.shopperName?.firstName === 'string' &&\n        typeof (param as BoletoState).data.shopperName?.lastName === 'string'\n    );\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV3PaymentStrategy from './adyenv3-payment-strategy';\n\nconst createAdyenV3PaymentStrategy: PaymentStrategyFactory<AdyenV3PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV3PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV3PaymentStrategy, [{ gateway: 'adyenv3' }]);\n","import {\n    AmountTransformer,\n    Consignment,\n    LineItemCategory,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Order,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    Affirm,\n    AffirmAddress,\n    AffirmDiscount,\n    AffirmFailResponse,\n    AffirmItem,\n    AffirmRequestData,\n    AffirmSuccessResponse,\n} from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private affirm?: Affirm;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private affirmScriptLoader: AffirmScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await this.paymentIntegrationService.loadPaymentMethod(options.methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const {\n            clientToken,\n            config: { testMode },\n        } = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.affirm = await this.affirmScriptLoader.load(clientToken, testMode);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const methodId = payload.payment?.methodId;\n        const { useStoreCredit } = payload;\n\n        if (!this.affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.submitOrder({ useStoreCredit }, options);\n\n        const affirmCheckout = await this.initializeAffirmCheckout();\n\n        const paymentPayload = {\n            methodId,\n            paymentData: { nonce: affirmCheckout.checkout_token },\n        };\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.affirm) {\n            this.affirm = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private initializeAffirmCheckout(): Promise<AffirmSuccessResponse> {\n        this.affirm?.checkout(this.getCheckoutInformation());\n\n        return new Promise((resolve, reject) => {\n            this.affirm?.checkout.open({\n                onFail: (failObject: AffirmFailResponse) => {\n                    if (failObject.reason === 'canceled') {\n                        reject(new PaymentMethodCancelledError());\n                    } else {\n                        reject(new PaymentMethodInvalidError());\n                    }\n                },\n                onSuccess: (successObject) => {\n                    resolve(successObject);\n                },\n            });\n            this.affirm?.ui.error.on('close', () => {\n                reject(new PaymentMethodCancelledError());\n            });\n        });\n    }\n\n    private getCheckoutInformation(): AffirmRequestData {\n        const state = this.paymentIntegrationService.getState();\n        const config = state.getStoreConfig();\n        const consignments = state.getConsignments();\n        const order = state.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this.getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this.getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this.getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this.getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this.getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return consignment?.selectedShippingOption ? consignment.selectedShippingOption.type : '';\n    }\n\n    private getBillingAddress(): AffirmAddress {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private getShippingAddress(): AffirmAddress | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const shippingAddress = state.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        order.lineItems.physicalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.digitalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.giftCertificates.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        });\n\n        if (order.lineItems.customItems) {\n            order.lineItems.customItems.forEach((item) => {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            });\n        }\n\n        return items;\n    }\n\n    private getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        order.coupons.forEach((line) => {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        });\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return [[]];\n        }\n\n        return categories.map((categoryTree) => categoryTree.map((category) => category.name));\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport isAfterpayWindow from './is-afterpay-window';\n\nenum SCRIPTS_DEFAULT {\n    PROD = '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX = '//portal-sandbox.afterpay.com/afterpay-async.js',\n}\n\nenum SCRIPTS_US {\n    PROD = '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX = '//portal.sandbox.afterpay.com/afterpay-async.js',\n}\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     *\n     * @param {PaymentMethod} method the payment method data\n     */\n    async load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI).then(() => {\n            if (!isAfterpayWindow(window)) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return window.AfterPay;\n        });\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Affirm, AFFIRM_SCRIPTS, AffirmHostWindow } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(public affirmWindow: AffirmHostWindow = window) {}\n\n    load(apikey = '', testMode?: boolean): Promise<Affirm> {\n        const scriptURI = testMode ? AFFIRM_SCRIPTS.SANDBOX : AFFIRM_SCRIPTS.PROD;\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this.affirmWindow.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this.affirmWindow.affirm);\n    }\n}\n","/* istanbul ignore file */\n\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable no-plusplus */\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-underscore-dangle */\n/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nimport { Affirm, AffirmHostWindow } from './affirm';\n\ninterface AffirmConfig {\n    public_api_key: string;\n    script: string;\n}\n\nexport default function loadAffirmJS(apiKey: string, scriptURL: string) {\n    const _AFFIRM_CONFIG: AffirmConfig = {\n        public_api_key: apiKey,\n        script: scriptURL,\n    };\n\n    (function foo(\n        m: AffirmHostWindow | any,\n        g: AffirmConfig,\n        n: 'affirm',\n        d: 'checkout',\n        a: 'ui',\n        e: 'script',\n        h: 'ready',\n        c: 'jsReady',\n    ) {\n        const b = m[n] || {};\n        const k = document.createElement(e);\n        const p = document.getElementsByTagName(e)[0];\n        const l = function bar(a: Affirm | any, b: keyof Affirm, c: string) {\n            return function baz() {\n                a[b]._.push([c, arguments]);\n            };\n        };\n\n        b[d] = l(b, d, 'set');\n\n        const f = b[d];\n\n        b[a] = {};\n        b[a]._ = [];\n        f._ = [];\n        b._ = [];\n        b[a][h] = l(b, a, h);\n\n        b[c] = function qux() {\n            b._.push([h, arguments]);\n        };\n\n        let a1 = 0;\n\n        for (\n            const c1 = 'set add save post open empty reset on off trigger ready setProduct'.split(\n                ' ',\n            );\n            a1 < c1.length;\n            a1++\n        ) {\n            f[c1[a1]] = l(b, d, c1[a1]);\n        }\n\n        let a2 = 0;\n\n        for (const c2 = ['get', 'token', 'url', 'items']; a2 < c2.length; a2++) {\n            f[c2[a2]] = function foobar() {};\n        }\n\n        k.async = !0;\n        k.src = g[e];\n\n        if (p.parentNode) {\n            p.parentNode.insertBefore(k, p);\n        }\n\n        delete (g as Partial<AffirmConfig>)[e];\n        f(g);\n        m[n] = b;\n    })(window, _AFFIRM_CONFIG, 'affirm', 'checkout', 'ui', 'script', 'ready', 'jsReady');\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AffirmPaymentStrategy from './affirm-payment-strategy';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nconst createAffirmPaymentStrategy: PaymentStrategyFactory<AffirmPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AffirmPaymentStrategy(paymentIntegrationService, new AffirmScriptLoader());\n};\n\nexport default toResolvableModule(createAffirmPaymentStrategy, [{ id: 'affirm' }]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the order finalization request\n * was not completed successfully.\n */\nexport default class OrderFinalizationNotCompletedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The current order could not be finalized successfully');\n\n        this.name = 'OrderFinalizationNotCompletedError';\n        this.type = 'order_finalization_not_completed';\n    }\n}\n","import {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotCompletedError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _afterpayScriptLoader: AfterpayScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(options.methodId, options.gatewayId);\n        const currencyCode = state.getCart()?.currency.code || '';\n        const countryCode = this._mapCurrencyToISO2(currencyCode);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, countryCode);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { gatewayId, methodId } = payload.payment;\n\n        if (!gatewayId || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        await this._loadPaymentMethod(gatewayId, methodId, options);\n\n        const state = this._paymentIntegrationService.getState();\n\n        await this._paymentIntegrationService.validateCheckout(state.getCheckout(), options);\n\n        const currencyCode = state.getCart()?.currency.code || '';\n        const countryCode = this._mapCurrencyToISO2(currencyCode);\n\n        this._redirectToAfterpay(countryCode, state.getPaymentMethod(methodId, gatewayId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n        const config = state.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config?.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._paymentIntegrationService.submitOrder({}, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._paymentIntegrationService.forgetCheckout(payment.providerId);\n            await this._paymentIntegrationService.loadPaymentMethods();\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n            throw new OrderFinalizationNotCompletedError(error.body?.errors?.[0]?.message);\n        }\n    }\n\n    private _redirectToAfterpay(countryCode: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod?.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode });\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCurrencyToISO2(currencyCode: string): string {\n        const countryByCurrency: { [key: string]: string } = {\n            AUD: 'AU',\n            NZD: 'NZ',\n            CAD: 'CA',\n            USD: 'US',\n        };\n\n        return countryByCurrency[currencyCode] || 'AU';\n    }\n\n    private async _loadPaymentMethod(\n        gatewayId: string,\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        try {\n            return await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                ...options,\n                params: { ...options?.params, method: methodId },\n            });\n        } catch (error) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (error instanceof RequestError && error.body?.status === 422) {\n                throw new InvalidArgumentError(\n                    \"Afterpay can't process your payment for this order, please try another payment method\",\n                );\n            }\n\n            throw error;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeIntegrationService } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n    StoreCredit = 'Store Credit',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _storeCreditLabel: string = DefaultLabels.StoreCredit;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        this._storeCreditLabel = options.applepay?.storeCreditLabel || DefaultLabels.StoreCredit;\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeIntegrationService();\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(state, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        state: PaymentIntegrationSelectors,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const { grandTotal, isStoreCreditApplied, outstandingBalance } = checkout;\n\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        if (isStoreCreditApplied) {\n            const { storeCredit } = state.getCustomerOrThrow();\n\n            lineItems.push({\n                label: this._storeCreditLabel,\n                amount: `-${Math.min(grandTotal, storeCredit).toFixed(decimalPlaces)}`,\n            });\n        }\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${outstandingBalance.toFixed(decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n\n    private async _getBraintreeDeviceData() {\n        const braintreePaymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (braintreePaymentMethod?.clientToken) {\n            const data = await this._braintreeIntegrationService.getDataCollector();\n\n            return data.deviceData;\n        }\n    }\n\n    private async _initializeBraintreeIntegrationService() {\n        try {\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n            const state = this._paymentIntegrationService.getState();\n\n            const storeConfig = state.getStoreConfigOrThrow();\n\n            const braintreePaymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(\n                ApplePayGatewayType.BRAINTREE,\n            );\n\n            if (!braintreePaymentMethod.clientToken || !braintreePaymentMethod.initializationData) {\n                return;\n            }\n\n            this._braintreeIntegrationService.initialize(\n                braintreePaymentMethod.clientToken,\n                storeConfig,\n            );\n        } catch (_) {\n            // we don't need to do anything in this block\n        }\n    }\n}\n","import AfterpayWindow from './afterpay-window';\n\nexport default function isAfterpayWindow(window: Window): window is AfterpayWindow {\n    return 'AfterPay' in window;\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AfterpayPaymentStrategy from './afterpay-payment-strategy';\nimport AfterpayScriptLoader from './afterpay-script-loader';\n\nconst createAfterpayPaymentStrategy: PaymentStrategyFactory<AfterpayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AfterpayPaymentStrategy(\n        paymentIntegrationService,\n        new AfterpayScriptLoader(createScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createAfterpayPaymentStrategy, [\n    { gateway: 'afterpay' },\n    { id: 'afterpay' },\n]);\n","// copied from packages/core/src/hosted-form/hosted-field-type.ts\n\nenum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n    CardExpiryVerification = 'cardExpiryVerification',\n}\n\nexport default HostedFieldType;\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const hostWindow = window;\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeIntegrationService(\n            new BraintreeScriptLoader(getScriptLoader(), hostWindow),\n            hostWindow,\n        ),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import {\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectPreviouslyUsedCard, BlueSnapDirectSdk } from '../types';\n\nexport default class BlueSnapDirect3ds {\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n\n    initialize(blueSnapSdk: BlueSnapDirectSdk) {\n        this._blueSnapSdk = blueSnapSdk;\n    }\n\n    async initialize3ds(\n        token: string,\n        cardData: BlueSnapDirectPreviouslyUsedCard,\n    ): Promise<string> {\n        const blueSnapSdk = this._getBlueSnapSdk();\n\n        return new Promise((resolve, reject) => {\n            blueSnapSdk.threeDsPaymentsSetup(token, (sdkResponse) => {\n                const code = sdkResponse.code;\n\n                if (code === '1') {\n                    return resolve(sdkResponse.threeDSecure.threeDSecureReferenceId);\n                }\n\n                return reject(new PaymentMethodFailedError());\n            });\n\n            blueSnapSdk.threeDsPaymentsSubmitData(cardData);\n        });\n    }\n\n    private _getBlueSnapSdk(): BlueSnapDirectSdk {\n        return guard(\n            this._blueSnapSdk,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import {\n    HostedCardFieldOptionsMap,\n    HostedFieldOptionsMap,\n    HostedFieldType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isHostedCardFieldOptionsMap(\n    fields: HostedFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return HostedFieldType.CardNumber in fields;\n}\n","import {\n    HostedFieldOptionsMap,\n    HostedFieldType,\n    HostedStoredCardFieldOptionsMap,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isHostedStoredCardFieldOptionsMap(\n    fields: HostedFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardCodeVerification in fields ||\n        HostedFieldType.CardNumberVerification in fields\n    );\n}\n","import { WithCreditCardPaymentInitializeOptions } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    guard,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectSdk, BlueSnapDirectThreeDSecureData } from '../types';\nimport isHostedCardFieldOptionsMap from '../utils/is-hosted-card-field-options-map';\nimport isHostedStoredCardFieldOptionsMap from '../utils/is-hosted-stored-card-field-options-map';\n\nimport BlueSnapDirect3ds from './bluesnap-direct-3ds';\nimport BlueSnapDirectHostedForm from './bluesnap-direct-hosted-form';\nimport BlueSnapDirectScriptLoader from './bluesnap-direct-script-loader';\n\nexport default class BlueSnapDirectCreditCardPaymentStrategy implements PaymentStrategy {\n    private _paymentFieldsToken?: string;\n    private _shouldUseHostedFields?: boolean;\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n\n    constructor(\n        private _scriptLoader: BlueSnapDirectScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _blueSnapDirectHostedForm: BlueSnapDirectHostedForm,\n        private _blueSnapDirect3ds: BlueSnapDirect3ds,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, gatewayId, creditCard } = options;\n\n        if (!gatewayId || !creditCard) {\n            throw new InvalidArgumentError();\n        }\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId, bigpayToken: creditCard.bigpayToken },\n        });\n\n        const {\n            config: { testMode, is3dsEnabled },\n            clientToken,\n        } = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        this._blueSnapSdk = await this._scriptLoader.load(testMode);\n\n        this._paymentFieldsToken = clientToken;\n        this._shouldUseHostedFields =\n            isHostedCardFieldOptionsMap(creditCard.form.fields) ||\n            (isHostedStoredCardFieldOptionsMap(creditCard.form.fields) &&\n                !!creditCard.form.fields.cardNumberVerification);\n\n        if (this._shouldUseHostedFields) {\n            this._blueSnapDirectHostedForm.initialize(this._blueSnapSdk, creditCard.form.fields);\n            await this._blueSnapDirectHostedForm.attach(\n                this._getPaymentFieldsToken(),\n                creditCard,\n                is3dsEnabled,\n            );\n        }\n    }\n\n    async execute(payload: OrderRequestBody): Promise<void> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._blueSnapSdk) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData } = payload.payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const pfToken = this._getPaymentFieldsToken();\n        let threeDSecureReferenceId;\n\n        const { is3dsEnabled } = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(payload.payment.methodId, payload.payment.gatewayId).config;\n\n        const bluesnapSubmitedForm = this._shouldUseHostedFields\n            ? await this._blueSnapDirectHostedForm\n                  .validate()\n                  .submit(\n                      is3dsEnabled ? this._getBlueSnapDirectThreeDSecureData() : undefined,\n                      !(isHostedInstrumentLike(paymentData) && isVaultedInstrument(paymentData)),\n                  )\n            : undefined;\n\n        await this._paymentIntegrationService.submitOrder();\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            this._paymentFieldsToken &&\n            paymentData.instrumentId\n        ) {\n            if (is3dsEnabled) {\n                this._blueSnapDirect3ds.initialize(this._blueSnapSdk);\n\n                const { last4, brand } = this._paymentIntegrationService\n                    .getState()\n                    .getCardInstrumentOrThrow(paymentData.instrumentId);\n\n                const previouslyUsedCard = {\n                    last4Digits: last4,\n                    ccType: brand.toUpperCase(),\n                    ...this._getBlueSnapDirectThreeDSecureData(),\n                };\n\n                threeDSecureReferenceId = await this._blueSnapDirect3ds.initialize3ds(\n                    this._paymentFieldsToken,\n                    previouslyUsedCard,\n                );\n            }\n\n            await this._paymentIntegrationService.submitPayment({\n                ...payload.payment,\n                paymentData: {\n                    instrumentId: paymentData.instrumentId,\n                    ...(this._shouldUseHostedFields ? { nonce: pfToken } : {}),\n                    ...(threeDSecureReferenceId\n                        ? { deviceSessionId: threeDSecureReferenceId }\n                        : {}),\n                    shouldSetAsDefaultInstrument: !!shouldSetAsDefaultInstrument,\n                },\n            });\n\n            return;\n        }\n\n        await this._paymentIntegrationService.submitPayment({\n            ...payload.payment,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: {\n                        token: JSON.stringify({\n                            pfToken,\n                            cardHolderName:\n                                bluesnapSubmitedForm && bluesnapSubmitedForm.cardHolderName,\n                        }),\n                    },\n                    vault_payment_instrument: shouldSaveInstrument,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                },\n            },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._shouldUseHostedFields) {\n            this._blueSnapDirectHostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getBlueSnapDirectThreeDSecureData(): BlueSnapDirectThreeDSecureData {\n        const {\n            getBillingAddress,\n            getShippingAddress,\n            getCustomer,\n            getCheckoutOrThrow,\n            getCartOrThrow,\n        } = this._paymentIntegrationService.getState();\n        const billingAddress = getBillingAddress();\n        const shippingAddress = getShippingAddress();\n        const email = getCustomer()?.email || billingAddress?.email;\n        const phone = billingAddress?.phone || shippingAddress?.phone;\n\n        return {\n            amount: getCheckoutOrThrow().outstandingBalance,\n            currency: getCartOrThrow().currency.code,\n            ...(email && { email }),\n            ...(phone && { phone }),\n            ...(billingAddress && {\n                billingFirstName: billingAddress.firstName,\n                billingLastName: billingAddress.lastName,\n                billingCountry: billingAddress.countryCode,\n                billingCity: billingAddress.city,\n                billingAddress: `${billingAddress.address1} ${billingAddress.address2}`.trim(),\n                billingZip: billingAddress.postalCode,\n            }),\n            ...(shippingAddress && {\n                shippingFirstName: shippingAddress.firstName,\n                shippingLastName: shippingAddress.lastName,\n                shippingCountry: shippingAddress.countryCode,\n                shippingCity: shippingAddress.city,\n                shippingAddress: `${shippingAddress.address1} ${shippingAddress.address2}`.trim(),\n                shippingZip: shippingAddress.postalCode,\n            }),\n        };\n    }\n\n    private _getPaymentFieldsToken(): string {\n        return guard(\n            this._paymentFieldsToken,\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    }\n}\n","export type BluesnapDirectNocInputAllowedStyle = Pick<\n    CSSStyleDeclaration,\n    'color' | 'fontFamily' | 'fontSize' | 'fontWeight'\n>;\n\nexport interface BlueSnapDirectStyleDeclaration {\n    [k: string]: string;\n}\n\nexport interface BlueSnapDirectStyle {\n    '.invalid'?: BlueSnapDirectStyleDeclaration;\n    ':focus'?: BlueSnapDirectStyleDeclaration;\n    input?: BlueSnapDirectStyleDeclaration;\n}\n\nexport enum BlueSnapDirectCardType {\n    AMEX = 'american-express',\n    CHINA_UNION_PAY = 'unionpay',\n    DINERS = 'diners-club',\n    DISCOVER = 'discover',\n    JCB = 'jcb',\n    MASTERCARD = 'mastercard',\n    UNKNOWN = 'unknown',\n    VISA = 'visa',\n}\n\nexport type BlueSnapDirectCardTypeValues = keyof typeof BlueSnapDirectCardType;\n\nexport enum BlueSnapDirectEventOrigin {\n    ON_BLUR = 'onBlur',\n    ON_SUBMIT = 'onSubmit',\n}\n\nexport enum BlueSnapDirectErrorDescription {\n    EMPTY = 'empty',\n    INVALID = 'invalid',\n    THREE_DS_NOT_ENABLED = '3D Secure is not enabled',\n}\n\nexport type BlueSnapDirectInputValidationErrorDescription = Extract<\n    BlueSnapDirectErrorDescription,\n    BlueSnapDirectErrorDescription.EMPTY | BlueSnapDirectErrorDescription.INVALID\n>;\n\nexport enum BlueSnapDirectErrorCode {\n    CC_NOT_SUPORTED = '22013',\n    ERROR_403 = '403',\n    ERROR_404 = '404',\n    ERROR_500 = '500',\n    INVALID_OR_EMPTY = '10',\n    SESSION_EXPIRED = '400',\n    THREE_DS_AUTH_FAILED = '14101',\n    THREE_DS_CLIENT_ERROR = '14103',\n    THREE_DS_MISSING_FIELDS = '14102',\n    THREE_DS_NOT_ENABLED = '14100',\n    TOKEN_EXPIRED = '14040',\n    TOKEN_NOT_ASSOCIATED = '14042',\n    TOKEN_NOT_FOUND = '14041',\n}\n\nexport enum BlueSnapDirectHostedFieldTagId {\n    CardCode = 'cvv',\n    CardExpiry = 'exp',\n    CardName = 'noc',\n    CardNumber = 'ccn',\n}\n\nexport interface BlueSnapDirectHostedPaymentFieldsOptions {\n    token: string;\n    onFieldEventHandler?: {\n        setupComplete?: () => void;\n        threeDsChallengeExecuted?: () => void;\n        onFocus?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onBlur?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onError?: (\n            tagId: BlueSnapDirectHostedFieldTagId | undefined,\n            errorCode: BlueSnapDirectErrorCode,\n            errorDescription: BlueSnapDirectErrorDescription | undefined,\n            eventOrigin: BlueSnapDirectEventOrigin | undefined,\n        ) => void;\n        onType?: (\n            tagId: BlueSnapDirectHostedFieldTagId,\n            cardType: BlueSnapDirectCardTypeValues,\n            cardData: BlueSnapDirectCardData | undefined,\n        ) => void;\n        onEnter?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onValid?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n    };\n    ccnPlaceHolder?: string;\n    cvvPlaceHolder?: string;\n    expPlaceHolder?: string;\n    style?: BlueSnapDirectStyle;\n    '3DS'?: boolean;\n}\n\ninterface BlueSnapDirectCallback {\n    statusCode: string;\n    transactionFraudInfo: {\n        fraudSessionId: string;\n    };\n}\n\ninterface BlueSnapDirectCardData {\n    binCategory: string;\n    cardSubType: string;\n    ccBin: string;\n    ccType: string;\n    isRegulatedCard: string;\n    issuingCountry: string;\n    last4Digits: string;\n}\n\nexport interface BlueSnapDirectCallbackCardData extends BlueSnapDirectCardData {\n    cardCategory: string;\n    exp: string;\n}\n\ninterface BlueSnapDirectCallbackData extends BlueSnapDirectCallback {\n    cardData: BlueSnapDirectCallbackCardData;\n}\n\nexport interface WithBlueSnapDirectCardHolderName {\n    cardHolderName?: string;\n}\n\ninterface BlueSnapDirectSubmitError {\n    errorCode: string;\n    errorDescription: string;\n    eventType: string;\n    tagId: string;\n}\n\nexport interface BlueSnapDirectCallbackError extends BlueSnapDirectCallback {\n    error: BlueSnapDirectSubmitError[];\n}\n\nexport type BlueSnapDirectCallbackResults =\n    | BlueSnapDirectCallbackData\n    | BlueSnapDirectCallbackError;\n\nexport interface BlueSnapDirectThreeDSecureData {\n    amount: number;\n    currency: string;\n    billingFirstName?: string;\n    billingLastName?: string;\n    billingCountry?: string;\n    billingState?: string;\n    billingCity?: string;\n    billingAddress?: string;\n    billingZip?: string;\n    shippingFirstName?: string;\n    shippingLastName?: string;\n    shippingCountry?: string;\n    shippingState?: string;\n    shippingCity?: string;\n    shippingAddress?: string;\n    shippingZip?: string;\n    email?: string;\n    phone?: string;\n}\n\nexport interface BlueSnapDirectSdk {\n    hostedPaymentFieldsCreate(options: BlueSnapDirectHostedPaymentFieldsOptions): void;\n    hostedPaymentFieldsSubmitData(\n        callback: (results: BlueSnapDirectCallbackResults) => void,\n        threeDSecureData?: BlueSnapDirectThreeDSecureData,\n    ): void;\n    threeDsPaymentsSetup(\n        token: string,\n        callback: (reponse: BlueSnapDirect3dsCallbackResponse) => void,\n    ): void;\n    threeDsPaymentsSubmitData(cardData: BlueSnapDirectPreviouslyUsedCard): void;\n}\n\nexport interface BlueSnapDirectPreviouslyUsedCard {\n    last4Digits?: string;\n    ccType?: string;\n    amount: number;\n    currency: string;\n    billingFirstName?: string;\n    billingLastName?: string;\n    billingCountry?: string;\n    billingState?: string;\n    billingCity?: string;\n    billingAddress?: string;\n    billingZip?: string;\n    shippingFirstName?: string;\n    shippingLastName?: string;\n    shippingCountry?: string;\n    shippingState?: string;\n    shippingCity?: string;\n    shippingAddress?: string;\n    shippingZip?: string;\n    email?: string;\n    phone?: string;\n}\n\nexport interface BlueSnapDirect3dsCallbackResponse {\n    code: string;\n    cardData: BlueSnapDirectCallbackCardData;\n    threeDSecure: {\n        authResult: string;\n        threeDSecureReferenceId: string;\n    };\n}\n\nexport interface BlueSnapDirectHostWindow extends Window {\n    bluesnap?: BlueSnapDirectSdk;\n}\n\nexport interface BlueSnapDirectStyleProps {\n    border?: string;\n    height?: string;\n    width?: string;\n}\n\nexport interface BlueSnapDirectRedirectResponseProviderData {\n    [key: string]: string;\n    merchantid: string;\n}\n\nexport interface BlueSnapDirectRedirectResponse {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n        status: string;\n        provider_data?: string;\n    };\n}\n\n/**\n * A set of options that are required to initialize the BlueSnap V2 payment\n * method.\n *\n * The payment step is done through a web page via an iframe provided by the\n * strategy.\n *\n * ```html\n * <!-- This is where the BlueSnap iframe will be inserted. It can be an in-page container or a modal -->\n * <div id=\"container\"></div>\n *\n * <!-- This is a cancellation button -->\n * <button type=\"button\" id=\"cancel-button\"></button>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'bluesnapDirect',\n *     bluesnapDirect: {\n *         onLoad: (iframe) => {\n *             document.getElementById('container')\n *                 .appendChild(iframe);\n *\n *             document.getElementById('cancel-button')\n *                 .addEventListener('click', () => {\n *                     document.getElementById('container').innerHTML = '';\n *                 });\n *         },\n *     },\n * });\n * ```\n */\nexport interface BlueSnapDirectAPMInitializeOptions {\n    /**\n     * A set of CSS properties to apply to the iframe.\n     */\n    style?: BlueSnapDirectStyleProps;\n\n    /**\n     * A callback that gets called when the iframe is ready to be added to the\n     * current page. It is responsible for determining where the iframe should\n     * be inserted in the DOM.\n     *\n     * @param iframe - The iframe element containing the payment web page\n     * provided by the strategy.\n     * @param cancel - A function, when called, will cancel the payment\n     * process and remove the iframe.\n     */\n    onLoad(iframe: HTMLIFrameElement, cancel: () => void): void;\n}\n\nexport interface WithBlueSnapDirectAPMPaymentInitializeOptions {\n    /**\n     * The options that are required to initialize the Apple Pay payment\n     * method. They can be omitted unless you need to support Apple Pay.\n     */\n    bluesnapdirect?: BlueSnapDirectAPMInitializeOptions;\n}\n","import { HostedFieldType } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectHostedFieldTagId as HostedFieldTagId } from './types';\n\nexport const BlueSnapHostedFieldType: {\n    [HostedFieldTagId.CardNumber]: HostedFieldType.CardNumber;\n    [HostedFieldTagId.CardExpiry]: HostedFieldType.CardExpiry;\n    [HostedFieldTagId.CardName]: HostedFieldType.CardName;\n    [HostedFieldTagId.CardCode]: HostedFieldType.CardCode;\n} = {\n    [HostedFieldTagId.CardNumber]: HostedFieldType.CardNumber,\n    [HostedFieldTagId.CardExpiry]: HostedFieldType.CardExpiry,\n    [HostedFieldTagId.CardName]: HostedFieldType.CardName,\n    [HostedFieldTagId.CardCode]: HostedFieldType.CardCode,\n};\n\nexport const CREDIT_CARD_ERRORS = {\n    empty: {\n        [HostedFieldType.CardNumber]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardNumberVerification]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardExpiry]: {\n            fieldType: 'cardExpiry',\n            message: 'Expiration date is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardCode]: {\n            fieldType: 'cardCode',\n            message: 'CVV is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardName]: {\n            fieldType: 'cardName',\n            message: 'Full name is required',\n            type: 'required',\n        },\n    },\n    invalid: {\n        [HostedFieldType.CardNumber]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number must be valid',\n            type: 'invalid_card_number',\n        },\n        [HostedFieldType.CardNumberVerification]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number must be valid',\n            type: 'invalid_card_number',\n        },\n        [HostedFieldType.CardExpiry]: {\n            fieldType: 'cardExpiry',\n            message: 'Expiration date must be a valid future date in MM / YY format',\n            type: 'invalid_card_expiry',\n        },\n        [HostedFieldType.CardCode]: {\n            fieldType: 'cardCode',\n            message: 'CVV must be valid',\n            type: 'invalid_card_code',\n        },\n        [HostedFieldType.CardName]: {\n            fieldType: 'cardName',\n            message: 'Full name is required',\n            type: 'required',\n        },\n    },\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectHostWindow, BlueSnapDirectSdk } from '../types';\n\nexport enum BlueSnapDirectSdkEnv {\n    PRODUCTION = 'https://pay.bluesnap.com/web-sdk/5/bluesnap.js',\n    SANDBOX = 'https://sandpay.bluesnap.com/web-sdk/5/bluesnap.js',\n}\n\nexport default class BlueSnapDirectScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BlueSnapDirectHostWindow = window,\n    ) {}\n\n    async load(testMode = false): Promise<BlueSnapDirectSdk> {\n        if (this._window.bluesnap) {\n            return this._window.bluesnap;\n        }\n\n        await this._scriptLoader.loadScript(\n            testMode ? BlueSnapDirectSdkEnv.SANDBOX : BlueSnapDirectSdkEnv.PRODUCTION,\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this._window.bluesnap) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.bluesnap;\n    }\n}\n","import { kebabCase } from 'lodash';\n\nimport { CreditCardPaymentInitializeOptions } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    guard,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldOptionsMap,\n    HostedFieldStylesMap,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapHostedFieldType } from '../bluesnap-direct-constants';\nimport {\n    BlueSnapDirectSdk,\n    BlueSnapDirectStyle,\n    BlueSnapDirectCallbackCardData as CallbackCardData,\n    BlueSnapDirectCallbackError as CallbackError,\n    BlueSnapDirectCallbackResults as CallbackResults,\n    WithBlueSnapDirectCardHolderName as CardHolderName,\n    BlueSnapDirectCardType as CardType,\n    BlueSnapDirectCardTypeValues as CardTypeValues,\n    BlueSnapDirectErrorCode as ErrorCode,\n    BlueSnapDirectErrorDescription as ErrorDescription,\n    BlueSnapDirectEventOrigin as EventOrigin,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n    BlueSnapDirectHostedPaymentFieldsOptions as HostedPaymentFieldsOptions,\n    BlueSnapDirectThreeDSecureData as ThreeDSecureData,\n} from '../types';\nimport isValidationErrorDescription from '../utils/is-bluesnap-direct-input-validation-error-description';\nimport isHostedCardFieldOptionsMap from '../utils/is-hosted-card-field-options-map';\nimport isHostedStoredCardFieldOptionsMap from '../utils/is-hosted-stored-card-field-options-map';\n\nimport BlueSnapHostedInputValidator from './bluesnap-direct-hosted-input-validator';\nimport BluesnapDirectNameOnCardInput from './bluesnap-direct-name-on-card-input';\n\nexport default class BlueSnapDirectHostedForm {\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n    private _onValidate: HostedFormOptions['onValidate'];\n\n    constructor(\n        private _nameOnCardInput: BluesnapDirectNameOnCardInput,\n        private _hostedInputValidator: BlueSnapHostedInputValidator,\n    ) {}\n\n    initialize(blueSnapSdk: BlueSnapDirectSdk, fields?: HostedFieldOptionsMap) {\n        this._blueSnapSdk = blueSnapSdk;\n\n        if (!fields) {\n            return;\n        }\n\n        if (isHostedCardFieldOptionsMap(fields)) {\n            this._hostedInputValidator.initialize();\n\n            return;\n        }\n\n        if (isHostedStoredCardFieldOptionsMap(fields) && !!fields.cardNumberVerification) {\n            this._hostedInputValidator.initializeValidationFields();\n        }\n    }\n\n    async attach(\n        paymentFieldsToken: string,\n        { form: { fields, ...callbacksAndStyles } }: CreditCardPaymentInitializeOptions,\n        enable3DS = false,\n    ): Promise<void> {\n        const blueSnapSdk = this._getBlueSnapSdk();\n\n        if (!isHostedCardFieldOptionsMap(fields) && !isHostedStoredCardFieldOptionsMap(fields)) {\n            throw new InvalidArgumentError(\n                'Field options must be of type HostedCardFieldOptionsMap',\n            );\n        }\n\n        this._onValidate = callbacksAndStyles.onValidate;\n\n        if (isHostedCardFieldOptionsMap(fields)) {\n            this._setCustomBlueSnapAttributes(fields);\n        }\n\n        if (isHostedStoredCardFieldOptionsMap(fields)) {\n            this._setCustomStoredCardsBlueSnapAttributes(fields);\n        }\n\n        return new Promise<void>((resolve) => {\n            const options = this._getHostedPaymentFieldsOptions(\n                paymentFieldsToken,\n                fields,\n                callbacksAndStyles,\n                resolve,\n                enable3DS,\n            );\n\n            blueSnapSdk.hostedPaymentFieldsCreate(options);\n\n            if (isHostedCardFieldOptionsMap(fields)) {\n                this._nameOnCardInput.attach(\n                    options,\n                    fields.cardName.accessibilityLabel,\n                    fields.cardName.placeholder,\n                );\n            }\n        });\n    }\n\n    validate(): this {\n        const results = this._hostedInputValidator.validate();\n\n        this._onValidate?.(results);\n\n        if (!results.isValid) {\n            const details = Object.entries(results.errors).reduce<PaymentInvalidFormErrorDetails>(\n                (result, [key, value]: [string, HostedInputValidateErrorData[]]) => ({\n                    ...result,\n                    [key]: value.map(({ message, type }) => ({ message, type })),\n                }),\n                {},\n            );\n\n            throw new PaymentInvalidFormError(details);\n        }\n\n        return this;\n    }\n\n    submit(\n        threeDSecureData?: ThreeDSecureData,\n        shouldSendName = false,\n    ): Promise<CallbackCardData & CardHolderName> {\n        return new Promise((resolve, reject) =>\n            this._getBlueSnapSdk().hostedPaymentFieldsSubmitData(\n                (data: CallbackResults) =>\n                    this._isBlueSnapDirectCallbackError(data)\n                        ? reject(\n                              new PaymentMethodFailedError(\n                                  data.statusCode === ErrorCode.THREE_DS_AUTH_FAILED\n                                      ? data.error[0].errorDescription\n                                      : `Submission failed with status: ${\n                                            data.statusCode\n                                        } and errors: ${JSON.stringify(data.error)}`,\n                              ),\n                          )\n                        : resolve({\n                              ...data.cardData,\n                              ...(shouldSendName\n                                  ? { cardHolderName: this._nameOnCardInput.getValue() }\n                                  : {}),\n                          }),\n                threeDSecureData,\n            ),\n        );\n    }\n\n    detach(): void {\n        this._nameOnCardInput.detach();\n    }\n\n    private _isBlueSnapDirectCallbackError(data: CallbackResults): data is CallbackError {\n        return 'error' in data;\n    }\n\n    private _getHostedPaymentFieldsOptions(\n        token: string,\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n        {\n            onFocus,\n            onBlur,\n            onValidate,\n            onCardTypeChange,\n            onEnter,\n            styles,\n        }: Omit<HostedFormOptions, 'fields'>,\n        resolve: () => void,\n        enable3DS: boolean,\n    ): HostedPaymentFieldsOptions {\n        return {\n            token,\n            onFieldEventHandler: {\n                setupComplete: () => resolve(),\n                onFocus: this._usetUiEventCallback(onFocus),\n                onBlur: this._usetUiEventCallback(onBlur),\n                onError: this._handleError(onValidate),\n                onType: (_tagId: HostedFieldTagId, cardType: CardTypeValues) =>\n                    onCardTypeChange?.({ cardType: CardType[cardType] }),\n                onEnter: this._usetUiEventCallback(onEnter),\n                onValid: (tagId: HostedFieldTagId) =>\n                    onValidate?.(this._hostedInputValidator.validate({ tagId })),\n            },\n            ...(isHostedCardFieldOptionsMap(fields) && {\n                ccnPlaceHolder: fields.cardNumber.placeholder || '',\n                cvvPlaceHolder: fields.cardCode?.placeholder || '',\n                expPlaceHolder: fields.cardExpiry.placeholder || 'MM / YY',\n            }),\n            ...(styles && { style: this._mapStyles(styles) }),\n            '3DS': enable3DS,\n        };\n    }\n\n    private _mapStyles({\n        default: input,\n        error,\n        focus,\n    }: HostedFieldStylesMap): BlueSnapDirectStyle {\n        return Object.entries({\n            ...(input && { input }),\n            ...(error && { '.invalid': error }),\n            ...(focus && { ':focus': focus }),\n        }).reduce((result, [selector, declaration]) => {\n            return {\n                ...result,\n                [selector]: Object.entries(declaration).reduce(\n                    (declarationBlock, [property, value]) => ({\n                        ...declarationBlock,\n                        [kebabCase(property)]: value,\n                    }),\n                    {},\n                ),\n            };\n        }, {});\n    }\n\n    private _handleError(\n        onValidate: HostedFormOptions['onValidate'],\n    ): (\n        tagId: HostedFieldTagId | undefined,\n        errorCode: ErrorCode,\n        errorDescription: ErrorDescription | undefined,\n        eventOrigin: EventOrigin | undefined,\n    ) => void {\n        return (tagId, errorCode, errorDescription, eventOrigin) => {\n            if (errorCode === ErrorCode.INVALID_OR_EMPTY) {\n                if (tagId && isValidationErrorDescription(errorDescription)) {\n                    return onValidate?.(\n                        this._hostedInputValidator.validate({ tagId, errorDescription }),\n                    );\n                }\n            }\n\n            throw new PaymentMethodFailedError(\n                `An unexpected error has occurred: ${JSON.stringify({\n                    tagId,\n                    errorCode,\n                    errorDescription,\n                    eventOrigin,\n                })}`,\n            );\n        };\n    }\n\n    private _usetUiEventCallback(\n        callback?: (\n            data: HostedFieldBlurEventData | HostedFieldEnterEventData | HostedFieldFocusEventData,\n        ) => void,\n    ): (tagId: HostedFieldTagId) => void {\n        return (tagId) => {\n            if (callback) {\n                callback({ fieldType: BlueSnapHostedFieldType[tagId] });\n            }\n        };\n    }\n\n    private _getBlueSnapSdk(): BlueSnapDirectSdk {\n        return guard(\n            this._blueSnapSdk,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _setCustomBlueSnapAttributes(fields: HostedCardFieldOptionsMap): void {\n        const { cardNumber, cardExpiry, cardCode, cardName } = fields;\n\n        const cardNumberContainer = document.getElementById(cardNumber.containerId);\n        const cardExpiryContainer = document.getElementById(cardExpiry.containerId);\n        const cardCodeContainer = cardCode && document.getElementById(cardCode.containerId);\n        const cardNameContainer = document.getElementById(cardName.containerId);\n\n        if (\n            !cardNumberContainer ||\n            !cardExpiryContainer ||\n            !cardCodeContainer ||\n            !cardNameContainer\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to create hosted payment fields to invalid HTML container elements.',\n            );\n        }\n\n        cardNumberContainer.dataset.bluesnap = HostedFieldTagId.CardNumber;\n        cardExpiryContainer.dataset.bluesnap = HostedFieldTagId.CardExpiry;\n        cardCodeContainer.dataset.bluesnap = HostedFieldTagId.CardCode;\n        cardNameContainer.dataset.bluesnap = HostedFieldTagId.CardName;\n    }\n\n    private _setCustomStoredCardsBlueSnapAttributes(fields: HostedStoredCardFieldOptionsMap): void {\n        const { cardNumberVerification, cardCodeVerification } = fields;\n\n        const cardNumberContainer =\n            cardNumberVerification && document.getElementById(cardNumberVerification.containerId);\n        const cardCodeContainer =\n            cardCodeVerification && document.getElementById(cardCodeVerification.containerId);\n\n        if (!cardNumberContainer && !cardCodeContainer) {\n            return;\n        }\n\n        if (cardNumberContainer) {\n            cardNumberContainer.dataset.bluesnap = HostedFieldTagId.CardNumber;\n        }\n\n        if (cardCodeContainer) {\n            cardCodeContainer.dataset.bluesnap = HostedFieldTagId.CardCode;\n        }\n    }\n}\n","import {\n    BlueSnapDirectErrorDescription,\n    BlueSnapDirectInputValidationErrorDescription,\n} from '../types';\n\nexport default function isBlueSnapDirectInputValidationErrorDescription(\n    errorDescription?: BlueSnapDirectErrorDescription,\n): errorDescription is BlueSnapDirectInputValidationErrorDescription {\n    if (errorDescription === undefined) {\n        return false;\n    }\n\n    return [BlueSnapDirectErrorDescription.EMPTY, BlueSnapDirectErrorDescription.INVALID].includes(\n        errorDescription,\n    );\n}\n","import {\n    HostedFieldType,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInputValidateResults,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapHostedFieldType, CREDIT_CARD_ERRORS } from '../bluesnap-direct-constants';\nimport {\n    BlueSnapDirectInputValidationErrorDescription as ErrorDescription,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n} from '../types';\n\nexport default class BlueSnapHostedInputValidator {\n    private _errors: HostedInputValidateErrorDataMap = {};\n\n    initialize(): void {\n        this._errors = {\n            cardNumber: [CREDIT_CARD_ERRORS.empty.cardNumber],\n            cardExpiry: [CREDIT_CARD_ERRORS.empty.cardExpiry],\n            cardCode: [CREDIT_CARD_ERRORS.empty.cardCode],\n            cardName: [CREDIT_CARD_ERRORS.empty.cardName],\n        };\n    }\n\n    initializeValidationFields(): void {\n        this._errors = {\n            cardNumberVerification: [CREDIT_CARD_ERRORS.empty.cardNumber],\n        };\n    }\n\n    validate(error?: {\n        tagId: HostedFieldTagId;\n        errorDescription?: ErrorDescription;\n    }): HostedInputValidateResults {\n        if (error) {\n            this._updateErrors(error.tagId, error.errorDescription);\n        }\n\n        return {\n            isValid: Object.values(this._errors).every(\n                (errorData: HostedInputValidateErrorData[]) => errorData.length === 0,\n            ),\n            errors: this._errors,\n        };\n    }\n\n    private _updateErrors(tagId: HostedFieldTagId, errorDescription?: ErrorDescription): void {\n        const fieldType = this._errors.cardNumberVerification\n            ? HostedFieldType.CardNumberVerification\n            : BlueSnapHostedFieldType[tagId];\n\n        this._errors[fieldType] = errorDescription\n            ? [CREDIT_CARD_ERRORS[errorDescription][fieldType]]\n            : [];\n    }\n}\n","import {\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BluesnapDirectNocInputAllowedStyle as AllowedStyle,\n    BlueSnapDirectStyle,\n    BlueSnapDirectErrorCode as ErrorCode,\n    BlueSnapDirectErrorDescription as ErrorDescription,\n    BlueSnapDirectEventOrigin as EventOrigin,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n    BlueSnapDirectHostedPaymentFieldsOptions as HostedPaymentFieldsOptions,\n    BlueSnapDirectStyleDeclaration as StyleDeclaration,\n} from '../types';\nimport isArrayOfAllowedProps from '../utils/is-array-of-allowed-props';\n\nexport default class BluesnapDirectNameOnCardInput {\n    private _input?: HTMLInputElement;\n    private _style?: BlueSnapDirectStyle;\n\n    attach(\n        {\n            style,\n            onFieldEventHandler: { onFocus, onBlur, onValid, onError, onEnter } = {},\n        }: HostedPaymentFieldsOptions,\n        accessibilityLabel?: string,\n        placeholder?: string,\n    ): void {\n        this._style = style;\n\n        this._create();\n\n        this._getInput().addEventListener('focus', this._handleFocus(onFocus));\n        this._getInput().addEventListener('blur', this._handleBlur(onBlur, onValid, onError));\n        this._getInput().addEventListener('enter', this._handleEnter(onEnter));\n\n        if (accessibilityLabel) {\n            this._getInput().setAttribute('aria-label', accessibilityLabel);\n        }\n\n        if (placeholder) {\n            this._getInput().placeholder = placeholder;\n        }\n\n        document.querySelector('[data-bluesnap=\"noc\"]')?.appendChild(this._getInput());\n    }\n\n    getValue(): string {\n        return this._getInput().value;\n    }\n\n    detach(): void {\n        if (this._input) {\n            this._input.remove();\n            this._input = undefined;\n        }\n    }\n\n    private _handleFocus(\n        onFocus: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onFocus'],\n    ): (event: Event) => void {\n        return () => {\n            this._applyStyles(this._style?.[':focus']);\n\n            onFocus?.(HostedFieldTagId.CardName);\n        };\n    }\n\n    private _handleBlur(\n        onBlur: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onBlur'],\n        onValid: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onValid'],\n        onError: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onError'],\n    ): (event: Event) => void {\n        return ({ target }) => {\n            onBlur?.(HostedFieldTagId.CardName);\n\n            if (target instanceof HTMLInputElement) {\n                if (/\\w{1,200}/.test(target.value)) {\n                    this._applyStyles(this._style?.input);\n\n                    onValid?.(HostedFieldTagId.CardName);\n                } else {\n                    this._applyStyles(this._style?.['.invalid']);\n\n                    onError?.(\n                        HostedFieldTagId.CardName,\n                        ErrorCode.INVALID_OR_EMPTY,\n                        ErrorDescription.EMPTY,\n                        EventOrigin.ON_BLUR,\n                    );\n                }\n            }\n        };\n    }\n\n    private _handleEnter(\n        onEnter: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onEnter'],\n    ): (event: Event) => void {\n        return () => onEnter?.(HostedFieldTagId.CardName);\n    }\n\n    private _applyStyles(styles: StyleDeclaration = {}): void {\n        const allowedStyle: AllowedStyle = {\n            color: styles.color,\n            fontFamily: styles['font-family'],\n            fontSize: styles['font-size'],\n            fontWeight: styles['font-weight'],\n        };\n        const styleKeys = Object.keys(allowedStyle);\n\n        if (isArrayOfAllowedProps(styleKeys)) {\n            styleKeys.forEach((key) => {\n                if (!allowedStyle[key]) {\n                    return;\n                }\n\n                this._getInput().style[key] = allowedStyle[key] || '';\n            });\n        }\n    }\n\n    private _configureInput(): void {\n        this._getInput().autocomplete = 'cc-name';\n        this._getInput().id = HostedFieldTagId.CardName;\n        this._getInput().inputMode = 'text';\n        this._getInput().maxLength = 200;\n        this._getInput().style.backgroundColor = 'transparent';\n        this._getInput().style.border = '0';\n        this._getInput().style.height = '100%';\n        this._getInput().style.margin = '0';\n        this._getInput().style.outline = 'none';\n        this._getInput().style.padding = '0';\n        this._getInput().style.width = '100%';\n        this._getInput().type = 'text';\n    }\n\n    private _getInput(): HTMLInputElement {\n        return guard(\n            this._input,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _create(): void {\n        this._input = document.createElement('input');\n        this._configureInput();\n        this._applyStyles(this._style?.input);\n    }\n}\n","import { BluesnapDirectNocInputAllowedStyle } from '../types';\n\nexport default function isArrayOfAllowedProps(\n    fields: string[],\n): fields is Array<keyof BluesnapDirectNocInputAllowedStyle> {\n    return fields.every((field) =>\n        ['color', 'fontFamily', 'fontSize', 'fontWeight'].includes(field),\n    );\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapDirect3ds from './bluesnap-direct-3ds';\nimport BlueSnapDirectCreditCardPaymentStrategy from './bluesnap-direct-credit-card-payment-strategy';\nimport BlueSnapDirectHostedForm from './bluesnap-direct-hosted-form';\nimport BlueSnapHostedInputValidator from './bluesnap-direct-hosted-input-validator';\nimport BluesnapDirectNameOnCardInput from './bluesnap-direct-name-on-card-input';\nimport BlueSnapDirectScriptLoader from './bluesnap-direct-script-loader';\n\nconst createBlueSnapDirectCreditCardPaymentStrategy: PaymentStrategyFactory<\n    BlueSnapDirectCreditCardPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BlueSnapDirectCreditCardPaymentStrategy(\n        new BlueSnapDirectScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n        new BlueSnapDirectHostedForm(\n            new BluesnapDirectNameOnCardInput(),\n            new BlueSnapHostedInputValidator(),\n        ),\n        new BlueSnapDirect3ds(),\n    );\n\nexport default toResolvableModule(createBlueSnapDirectCreditCardPaymentStrategy, [\n    { id: 'credit_card', gateway: 'bluesnapdirect' },\n]);\n","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectRedirectResponse } from '../types';\nimport {\n    isEcpInstrument,\n    isIdealInstrument,\n    isSepaInstrument,\n} from '../utils/is-bluesnap-direct-instrument';\nimport isBlueSnapDirectRedirectResponseProviderData from '../utils/is-bluesnap-direct-provider-data';\n\nexport default class BlueSnapDirectAPMPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody): Promise<void> {\n        const paymentPayload = this._formatePaymentPayload(payload);\n\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            if (this._isBlueSnapDirectRedirectResponse(error)) {\n                const providerData: unknown =\n                    error.body.provider_data && JSON.parse(error.body.provider_data);\n\n                let frameUrl = error.body.additional_action_required.data.redirect_url;\n\n                if (isBlueSnapDirectRedirectResponseProviderData(providerData)) {\n                    const providerDataQuery = new URLSearchParams(providerData).toString();\n\n                    frameUrl = `${frameUrl}&${providerDataQuery}`;\n                }\n\n                return new Promise(() => window.location.replace(frameUrl));\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _formatePaymentPayload({ payment }: OrderRequestBody) {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (\n            payment.paymentData &&\n            isVaultedInstrument(payment.paymentData) &&\n            isHostedInstrumentLike(payment.paymentData)\n        ) {\n            return {\n                ...payment,\n                paymentData: {\n                    instrumentId: payment.paymentData.instrumentId,\n                    shouldSetAsDefaultInstrument:\n                        !!payment.paymentData.shouldSetAsDefaultInstrument,\n                },\n            };\n        }\n\n        if (isEcpInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        ecp: {\n                            account_number: payment.paymentData.accountNumber,\n                            account_type: payment.paymentData.accountType,\n                            shopper_permission: payment.paymentData.shopperPermission,\n                            routing_number: payment.paymentData.routingNumber,\n                        },\n                        vault_payment_instrument: payment.paymentData.shouldSaveInstrument,\n                        set_as_default_stored_instrument:\n                            payment.paymentData.shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n        }\n\n        if (isSepaInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        sepa_direct_debit: {\n                            iban: payment.paymentData.iban,\n                            first_name: payment.paymentData.firstName,\n                            last_name: payment.paymentData.lastName,\n                            shopper_permission: payment.paymentData.shopperPermission,\n                        },\n                        vault_payment_instrument: payment.paymentData.shouldSaveInstrument,\n                        set_as_default_stored_instrument:\n                            payment.paymentData.shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n        }\n\n        if (isIdealInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        ideal: {\n                            bic: payment.paymentData.bic,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId: payment.methodId,\n        };\n    }\n\n    private _isBlueSnapDirectRedirectResponse(\n        response: unknown,\n    ): response is BlueSnapDirectRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<BlueSnapDirectRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<BlueSnapDirectRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required?.data.redirect_url\n        );\n    }\n}\n","import { BlueSnapDirectRedirectResponseProviderData } from '../types';\n\nexport default function isBlueSnapDirectRedirectResponseProviderData(\n    value: unknown,\n): value is BlueSnapDirectRedirectResponseProviderData {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n\n    const partialValue: Partial<BlueSnapDirectRedirectResponseProviderData> = value;\n\n    if (!partialValue.merchantid) {\n        return false;\n    }\n\n    return typeof partialValue.merchantid === 'string';\n}\n","import {\n    WithEcpInstrument,\n    WithIdealInstrument,\n    WithSepaInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isEcpInstrument(data: unknown): data is WithEcpInstrument {\n    return Boolean(\n        typeof data === 'object' &&\n            data !== null &&\n            'accountNumber' in data &&\n            'accountType' in data &&\n            'shopperPermission' in data &&\n            'routingNumber' in data,\n    );\n}\n\nexport function isIdealInstrument(paymentData: unknown): paymentData is WithIdealInstrument {\n    return Boolean(typeof paymentData === 'object' && paymentData !== null && 'bic' in paymentData);\n}\n\nexport function isSepaInstrument(paymentData: unknown): paymentData is WithSepaInstrument {\n    return Boolean(\n        typeof paymentData === 'object' &&\n            paymentData !== null &&\n            'iban' in paymentData &&\n            'firstName' in paymentData &&\n            'lastName' in paymentData &&\n            'shopperPermission' in paymentData,\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapDirectAPMPaymentStrategy from './bluesnap-direct-apm-payment-strategy';\n\nconst createBlueSnapDirectAPMPaymentStrategy: PaymentStrategyFactory<\n    BlueSnapDirectAPMPaymentStrategy\n> = (paymentIntegrationService) => new BlueSnapDirectAPMPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createBlueSnapDirectAPMPaymentStrategy, [\n    { gateway: 'bluesnapdirect' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CancellablePromise,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport {\n    BlueSnapV2PaymentInitializeOptions,\n    WithBlueSnapV2PaymentInitializeOptions,\n} from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions & WithBlueSnapV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        await this._paymentIntegrationService.submitOrder(orderRequest, options);\n\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId: payment.methodId,\n            gatewayId: payment.gatewayId,\n            shouldSaveInstrument: false,\n            target: frame.name,\n            promise: promise.promise,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBlueSnapV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        await Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.setAttribute(\n            'sandbox',\n            'allow-top-navigation allow-scripts allow-forms allow-same-origin',\n        );\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border ?? '';\n            iframe.style.height = height ?? '';\n            iframe.style.width = width ?? '';\n        }\n\n        return iframe;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapV2PaymentStrategy from './bluesnapv2-payment-strategy';\n\nconst createBluesnapV2PaymentStrategy: PaymentStrategyFactory<BlueSnapV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BlueSnapV2PaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createBluesnapV2PaymentStrategy, [{ gateway: 'bluesnapv2' }]);\n","import { isObject } from 'lodash';\n\nimport { LineItemMap } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ExtraItemsData } from './extra-items-data';\n\ntype StorageFallback = Pick<Storage, 'getItem' | 'setItem' | 'removeItem'>;\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nfunction isExtraItemsData(itemsData: unknown): itemsData is ExtraItemsData {\n    if (!isObject(itemsData)) {\n        return false;\n    }\n\n    const hasNotExtraItems = Object.values(itemsData).some(\n        (item) => !isObject(item) || !('brand' in item) || !('category' in item),\n    );\n\n    return Boolean(!hasNotExtraItems);\n}\n\nexport default class AnalyticsExtraItemsManager {\n    constructor(private storage: StorageFallback) {}\n\n    saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [...lineItems.physicalItems, ...lineItems.digitalItems].reduce<ExtraItemsData>(\n            (result, item) => {\n                result[item.productId] = {\n                    brand: item.brand ? item.brand : '',\n                    category: item.categoryNames ? item.categoryNames.join(', ') : '',\n                };\n\n                return result;\n            },\n            {},\n        );\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            if (!item) {\n                return null;\n            }\n\n            const data: unknown = JSON.parse(item);\n\n            return isExtraItemsData(data) ? data : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean(window.hasOwnProperty('analytics'));\n}\n","import { WithAccountCreation } from './payment';\n\nexport default function isWithAccountCreation(\n    paymentData: unknown,\n): paymentData is WithAccountCreation {\n    return (\n        typeof paymentData === 'object' &&\n        paymentData !== null &&\n        'shouldCreateAccount' in paymentData\n    );\n}\n","export * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree US Bank Account\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n","import { PaymentErrorData, StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BoltError extends StandardError {\n    body: { errors: PaymentErrorData[] };\n\n    constructor(public errorCode: string) {\n        super();\n\n        this.name = 'BoltPaymentsFieldError';\n        this.type = 'bolt_payments_field_error';\n        this.body = { errors: [BoltError.getError(errorCode)] };\n    }\n\n    private static getError(errorCode: string): PaymentErrorData {\n        switch (errorCode) {\n            case '1000':\n            case '2000':\n            case '3000':\n                return { code: 'invalid_number' };\n\n            case '1001':\n            case '2001':\n            case '3001':\n                return { code: 'invalid_expiry_date' };\n\n            case '1002':\n            case '2002':\n                return { code: 'invalid_cvc' };\n\n            case '1003':\n                return { code: 'invalid_zip' };\n\n            case '2003':\n                return { code: 'incorrect_zip' };\n\n            default:\n                return { code: 'general_error' };\n        }\n    }\n}\n","import {\n    AnalyticsExtraItemsManager,\n    isAnalyticsTrackerWindow,\n} from '@bigcommerce/checkout-sdk/analytics';\nimport {\n    InvalidArgumentError,\n    isWithAccountCreation,\n    MissingDataError,\n    MissingDataErrorType,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltEmbedded,\n    BoltEmbeddedTokenize,\n    BoltEmbededField,\n    BoltPaymentMethod,\n    BoltTransaction,\n} from './bolt';\nimport BoltError from './bolt-error';\nimport { WithBoltPaymentInitializeOptions } from './bolt-payment-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\nimport { isBoltPaymentData } from './is-bolt-payment-data';\n\nexport default class BoltPaymentStrategy implements PaymentStrategy {\n    private boltClient?: BoltCheckout;\n    private boltEmbedded?: BoltEmbedded;\n    private embeddedField?: BoltEmbededField;\n    private useBoltClient = false;\n    private useBoltEmbedded = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        private analyticsExtraItemsManager: AnalyticsExtraItemsManager,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBoltPaymentInitializeOptions,\n    ): Promise<void> {\n        const { bolt, methodId } = options;\n        const { containerId, onPaymentSelect, useBigCommerceCheckout } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!useBigCommerceCheckout) {\n            // info: calling loadBoltClient method without providing any params is necessary for Bolt Full Checkout and Fraud Protection\n            this.boltClient = await this.boltScriptLoader.loadBoltClient();\n\n            return;\n        }\n\n        const paymentMethod: BoltPaymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(options.methodId);\n\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig, embeddedOneClickEnabled } =\n            initializationData || {};\n        const { testMode } = config;\n\n        if (!publishableKey) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.boltClient = await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            testMode,\n            developerConfig,\n        );\n\n        this.useBoltClient = !embeddedOneClickEnabled;\n        this.useBoltEmbedded = !!embeddedOneClickEnabled;\n\n        if (this.useBoltEmbedded) {\n            if (!containerId) {\n                throw new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.bolt.containerId\" argument is not provided.',\n                );\n            }\n\n            if (!onPaymentSelect) {\n                throw new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.bolt.onPaymentSelect\" argument is not provided.',\n                );\n            }\n\n            this.boltEmbedded = await this.boltScriptLoader.loadBoltEmbedded(\n                publishableKey,\n                testMode,\n                developerConfig,\n            );\n\n            this.mountBoltEmbeddedField(containerId);\n            onPaymentSelect(await this.hasBoltAccount());\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this.embeddedField?.unmount();\n\n        this.boltClient = undefined;\n        this.boltEmbedded = undefined;\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        this.setExtraItemsForAnalytics();\n\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n        let paymentPayload;\n\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentData || !isBoltPaymentData(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (this.useBoltClient) {\n            paymentPayload = await this.getBoltClientPaymentPayload(methodId, paymentData, options);\n        } else if (this.useBoltEmbedded) {\n            paymentPayload = await this.getBoltEmbeddedPaymentPayload(methodId, paymentData);\n        } else {\n            paymentPayload = await this.getBoltFullCheckoutPaymentPayload(methodId, paymentData);\n        }\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private async getBoltClientPaymentPayload(\n        methodId: string,\n        paymentData: NonceInstrument,\n        options?: PaymentRequestOptions,\n    ): Promise<Payment> {\n        await this.paymentIntegrationService.loadPaymentMethod(methodId, options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const orderToken = paymentMethod.clientToken;\n        const { isStoreCreditApplied } = state.getCheckoutOrThrow();\n        const { shouldSaveInstrument } = paymentData;\n        const boltClient = this.getBoltClientOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(isStoreCreditApplied);\n\n        if (!orderToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const boltTransaction: BoltTransaction = await new Promise((resolve, reject) => {\n            const onSuccess = (transaction: BoltTransaction, callback: () => void) => {\n                if (!transaction.reference) {\n                    reject(\n                        new PaymentMethodFailedError(\n                            'Unable to proceed because transaction reference is unavailable. Please try again later.',\n                        ),\n                    );\n                } else {\n                    resolve(transaction);\n                }\n\n                callback();\n            };\n\n            const onClose = () => {\n                reject(new PaymentMethodCancelledError());\n            };\n\n            const callbacks = {\n                success: onSuccess,\n                close: onClose,\n            };\n\n            boltClient.configure({ orderToken }, {}, callbacks).open();\n        });\n\n        return {\n            methodId,\n            paymentData: {\n                nonce: boltTransaction.reference,\n                shouldSaveInstrument,\n            },\n        };\n    }\n\n    private async getBoltEmbeddedPaymentPayload(\n        methodId: string,\n        paymentData: WithAccountCreation,\n    ): Promise<Payment> {\n        if (!isWithAccountCreation(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const tokenizeResult = this.validateTokenizeResultOrThrow(\n            await this.embeddedField?.tokenize(),\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: {\n                        token: tokenizeResult.token,\n                        last_four_digits: tokenizeResult.last4,\n                        iin: tokenizeResult.bin,\n                        expiration_month: +tokenizeResult.expiration.split('-')[1],\n                        expiration_year: +tokenizeResult.expiration.split('-')[0],\n                    },\n                    provider_data: {\n                        create_account: !!paymentData.shouldCreateAccount,\n                        embedded_checkout: true,\n                    },\n                },\n            },\n        };\n    }\n\n    private async getBoltFullCheckoutPaymentPayload(\n        methodId: string,\n        paymentData: NonceInstrument,\n    ): Promise<Payment> {\n        await this.setBoltOrderId();\n\n        const boltClient = this.getBoltClientOrThrow();\n        const transactionReference = await boltClient.getTransactionReference();\n\n        if (!transactionReference) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                nonce: transactionReference,\n            },\n        };\n    }\n\n    private getBoltClientOrThrow(): BoltCheckout {\n        if (!this.boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.boltClient;\n    }\n\n    private getBoltEmbeddedOrThrow() {\n        if (!this.boltEmbedded) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.boltEmbedded;\n    }\n\n    private async hasBoltAccount(): Promise<boolean> {\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const email = customer?.email || billingAddress?.email || '';\n        const boltClient = this.getBoltClientOrThrow();\n\n        try {\n            return await boltClient.hasBoltAccount(email);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private async setBoltOrderId() {\n        const order = this.paymentIntegrationService.getState().getOrderOrThrow();\n        const boltClient = this.getBoltClientOrThrow();\n\n        try {\n            await boltClient.setOrderId(order.orderId);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private mountBoltEmbeddedField(containerId: string) {\n        const boltEmbedded = this.getBoltEmbeddedOrThrow();\n        const styles = { backgroundColor: '#fff' };\n        const embeddedField = boltEmbedded.create('payment_field', {\n            styles,\n            renderSeparateFields: true,\n        });\n\n        embeddedField.mount(`#${containerId}`);\n\n        this.embeddedField = embeddedField;\n    }\n\n    private validateTokenizeResultOrThrow(\n        tokenizeResult?: BoltEmbeddedTokenize | Error,\n    ): BoltEmbeddedTokenize {\n        if (!tokenizeResult) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (tokenizeResult instanceof Error) {\n            throw new BoltError(tokenizeResult.message);\n        }\n\n        const { token, last4, bin, expiration } = tokenizeResult;\n        const lastFourDigits = +last4;\n        const iin = +bin;\n        const expirationMonth = +`${expiration}`.split('-')[1];\n        const expirationYear = +`${expiration}`.split('-')[0];\n\n        if (\n            !token ||\n            Number.isNaN(lastFourDigits) ||\n            Number.isNaN(iin) ||\n            Number.isNaN(expirationMonth) ||\n            Number.isNaN(expirationYear)\n        ) {\n            throw new PaymentArgumentInvalidError();\n        }\n\n        return tokenizeResult;\n    }\n\n    private setExtraItemsForAnalytics() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n        const cart = state.getCartOrThrow();\n\n        if (storeConfig.checkoutSettings.isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n            const { id, lineItems } = cart;\n\n            this.analyticsExtraItemsManager.saveExtraItemsData(id, lineItems);\n        }\n    }\n}\n","import { isObject } from 'lodash';\n\nimport { isWithAccountCreation } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BoltPaymentData } from './bolt';\n\nexport function isBoltPaymentData(paymentData: unknown): paymentData is BoltPaymentData {\n    return Boolean(\n        isObject(paymentData) &&\n            ('shouldSaveInstrument' in paymentData ||\n                'nonce' in paymentData ||\n                isWithAccountCreation(paymentData)),\n    );\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\nimport localStorageFallback from 'local-storage-fallback';\n\nimport { AnalyticsExtraItemsManager } from '@bigcommerce/checkout-sdk/analytics';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltPaymentStrategy from './bolt-payment-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltPaymentStrategy: PaymentStrategyFactory<BoltPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltPaymentStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n        new AnalyticsExtraItemsManager(localStorageFallback),\n    );\n};\n\nexport default toResolvableModule(createBoltPaymentStrategy, [{ id: 'bolt' }]);\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeErrorCode,\n    BraintreeModule,\n    BraintreeUsBankAccount,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private usBankAccount?: BraintreeUsBankAccount;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string, storeConfig?: StoreConfig): void {\n        this.setBraintreeSdkVersion(storeConfig);\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    // TODO: update this method with code from this.braintreeScriptLoader.initialize and remove this.braintreeScriptLoader.initialize at all,\n    // therefore we can provide braintreeSdkVersion to different braintree script loader method to keep script loader without any side effect\n    private setBraintreeSdkVersion(storeConfig?: StoreConfig): void {\n        this.braintreeScriptLoader.initialize(storeConfig);\n    }\n\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import {\n    PaymentInstrumentPayload,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isUsBankAccountInstrumentLike(\n    instrument?: PaymentInstrumentPayload,\n): instrument is WithBankAccountInstrument {\n    if (!instrument) {\n        return false;\n    }\n\n    return (\n        'accountNumber' in instrument &&\n        'routingNumber' in instrument &&\n        'ownershipType' in instrument &&\n        'accountType' in instrument\n    );\n}\n","import {\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeUsBankAccount,\n    BraintreeUsBankAccountDetails,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isUsBankAccountInstrumentLike from '../is-us-bank-account-instrument-like';\n\nimport { WithBraintreeAchPaymentInitializeOptions } from './braintree-ach-initialize-options';\n\nexport default class BraintreeAchPaymentStrategy implements PaymentStrategy {\n    private usBankAccount?: BraintreeUsBankAccount;\n    private getMandateText?: () => string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeAchPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreeach } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.getMandateText = braintreeach?.getMandateText;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken, storeConfig);\n\n        try {\n            this.usBankAccount = await this.braintreeSdk.getUsBankAccount();\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const isSubmittingWithVaultingInstrument = isVaultedInstrument(payment.paymentData || {});\n\n        const nonce = isSubmittingWithVaultingInstrument\n            ? await this.tokenizePaymentForVaultedInstrument(payment)\n            : await this.tokenizePayment(payment);\n\n        const submitPaymentPayload = isSubmittingWithVaultingInstrument\n            ? await this.preparePaymentDataForVaultedInstrument(nonce, payment)\n            : await this.preparePaymentData(nonce, payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment({ paymentData }: OrderPaymentRequestBody): Promise<string> {\n        const usBankAccount = this.getUsBankAccountOrThrow();\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const mandateText = isVaultedInstrument(paymentData)\n            ? 'The data are used for stored instrument verification'\n            : typeof this.getMandateText === 'function' && this.getMandateText();\n\n        if (!mandateText) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because getMandateText is not provided or returned undefined value.',\n            );\n        }\n\n        try {\n            const { nonce } = await usBankAccount.tokenize({\n                bankDetails: this.getBankDetails(paymentData),\n                mandateText,\n            });\n\n            return nonce;\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    private async tokenizePaymentForVaultedInstrument(\n        payment: OrderPaymentRequestBody,\n    ): Promise<string | null> {\n        const { methodId, paymentData = {} } = payment;\n\n        const state = this.paymentIntegrationService.getState();\n        const { config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!config.isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n            );\n        }\n\n        const shouldVerifyVaultingInstrument = isUsBankAccountInstrumentLike(paymentData);\n\n        return shouldVerifyVaultingInstrument ? this.tokenizePayment(payment) : null;\n    }\n\n    private async preparePaymentData(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument, routingNumber, accountNumber } =\n            paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                shouldSetAsDefaultInstrument,\n                shouldSaveInstrument,\n                formattedPayload: {\n                    tokenized_bank_account: {\n                        issuer: routingNumber,\n                        masked_account_number: accountNumber.substr(-4),\n                        token: nonce,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentDataForVaultedInstrument(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isVaultedInstrument(paymentData) || !isHostedInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                ...(nonce && { nonce }),\n            },\n        };\n    }\n\n    private getBankDetails(paymentData: WithBankAccountInstrument): BraintreeUsBankAccountDetails {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const ownershipType = paymentData.ownershipType.toLowerCase();\n        const accountType = paymentData.accountType.toLowerCase();\n\n        return {\n            accountNumber: paymentData.accountNumber,\n            routingNumber: paymentData.routingNumber,\n            ownershipType,\n            ...(ownershipType === 'personal'\n                ? {\n                      firstName: paymentData.firstName,\n                      lastName: paymentData.lastName,\n                  }\n                : {\n                      businessName: paymentData.businessName,\n                  }),\n            accountType,\n            billingAddress: {\n                streetAddress: billingAddress.address1,\n                extendedAddress: billingAddress.address2,\n                locality: billingAddress.city,\n                region: billingAddress.stateOrProvinceCode,\n                postalCode: billingAddress.postalCode,\n            },\n        };\n    }\n\n    private getUsBankAccountOrThrow(): BraintreeUsBankAccount {\n        if (!this.usBankAccount) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.usBankAccount;\n    }\n\n    private handleBraintreeError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n}\n","import { createBraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeAchPaymentStrategy from './braintree-ach-payment-strategy';\n\nconst createBraintreeAchPaymentStrategy: PaymentStrategyFactory<BraintreeAchPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BraintreeAchPaymentStrategy(paymentIntegrationService, createBraintreeSdk());\n};\n\nexport default toResolvableModule(createBraintreeAchPaymentStrategy, [{ id: 'braintreeach' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSdk from './braintree-sdk';\n\nconst createBraintreeSdk = () => {\n    const braintreeScriptLoader = new BraintreeScriptLoader(getScriptLoader(), window);\n\n    return new BraintreeSdk(braintreeScriptLoader);\n};\n\nexport default createBraintreeSdk;\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => (this._element.style.opacity = '1'));\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => (this._element.style.opacity = '0'));\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton = false,\n            innerHtml = null,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className = classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(\n            getOverlayStyle({\n                id,\n                background,\n                transitionDuration,\n                classLayout,\n                classOverlayText,\n                classClose,\n            }),\n        );\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(\n        element?: HTMLElement,\n        onClick?: (event: MouseEvent) => void,\n    ): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = (event) => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } =\n        options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    PaypalAuthorizeData,\n    PaypalButtonRender,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isHostedVaultedInstrument,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    PaypalInstrument,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport isBraintreeError from '../is-braintree-error';\nimport isBraintreePaypalProviderError from '../is-braintree-paypal-provider-error';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport {\n    BraintreePaypalPaymentInitializeOptions,\n    WithBraintreePaypalPaymentInitializeOptions,\n} from './braintree-paypal-payment-initialize-options';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod;\n    private braintreeHostWindow: BraintreeHostWindow = window;\n    private braintree?: BraintreePaypalPaymentInitializeOptions;\n    private braintreeTokenizePayload?: BraintreeTokenizePayload;\n    private paypalButtonRender?: PaypalButtonRender;\n    private loadingIndicatorContainer?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreePaypalPaymentInitializeOptions,\n    ) {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this.braintree = braintreeOptions;\n\n        if (!this.paymentMethod || !this.paymentMethod.nonce) {\n            this.paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        if (this.paymentMethod.clientToken && braintreeOptions?.bannerContainerId) {\n            await this.loadPaypal();\n\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (this.paymentMethod.clientToken) {\n            return this.loadPaypal();\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (braintreeOptions?.bannerContainerId) {\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (!this.paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this.loadPaypal();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        const { onError } = this.braintree || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3521.handling_declined_error_braintree'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment, order.useStoreCredit);\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.loadPaypal();\n\n                this.paypalButtonRender?.close();\n\n                await this.loadPaypalCheckoutInstance();\n\n                await new Promise((_resolve, reject) => {\n                    if (onError && typeof onError === 'function') {\n                        onError(new Error('INSTRUMENT_DECLINED'));\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.braintreeTokenizePayload = undefined;\n\n        this.paypalButtonRender?.close();\n\n        return this.braintreeIntegrationService.teardown();\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        useStoreCredit?: boolean,\n    ): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n\n        const grandTotal = state.getOutstandingBalance(useStoreCredit);\n        const config = state.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            currency,\n            storeProfile: { storeLanguage },\n        } = config;\n        const {\n            nonce,\n            config: { isVaultingEnabled },\n        } = this.paymentMethod;\n        const { methodId, paymentData = {} } = payment;\n\n        const token = this.braintreeTokenizePayload?.nonce || nonce;\n\n        if (token) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            this.paymentMethod = state.getPaymentMethod(methodId);\n\n            return {\n                ...payment,\n                paymentData: this.formattedPayload(token),\n            };\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError(\n                    'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n                );\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (!isHostedInstrumentLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = paymentData;\n\n        if (shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but shouldSaveInstrument is set to true',\n            );\n        }\n\n        const shippingAddress = state.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress\n            ? mapToBraintreeShippingAddressOverride(shippingAddress)\n            : undefined;\n\n        return Promise.all([\n            this.braintreeIntegrationService.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this.paymentMethod.id === 'braintreepaypalcredit',\n                shippingAddressOverride,\n                shouldSaveInstrument: shouldSaveInstrument || false,\n                shippingAddressEditable: false,\n            }),\n            this.braintreeIntegrationService.getSessionId(),\n        ]).then(([{ nonce, details } = {} as any, sessionId]) => ({\n            ...payment,\n            paymentData: this.formattedPayload(\n                nonce,\n                details && details.email,\n                sessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            ),\n        }));\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n        vaultPaymentInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private async loadPaypalCheckoutInstance() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken, storeConfig);\n\n            const currencyCode = this.paymentIntegrationService.getState().getCartOrThrow()\n                .currency.code;\n\n            const paypalCheckoutConfig: Partial<BraintreePaypalSdkCreatorConfig> = {\n                currency: currencyCode,\n                intent: initializationData?.intent,\n                isCreditEnabled: initializationData?.isCreditEnabled,\n            };\n\n            await this.braintreeIntegrationService.getPaypalCheckout(\n                paypalCheckoutConfig,\n                (braintreePaypalCheckout) => {\n                    if (initializationData?.enableCheckoutPaywallBanner) {\n                        this.renderPayPalMessages();\n                    }\n\n                    this.renderPayPalButton(braintreePaypalCheckout);\n                },\n                this.handleError,\n            );\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private renderPayPalButton(braintreePaypalCheckout: BraintreePaypalCheckout) {\n        const { onPaymentError, submitForm, onRenderButton, containerId, onError } =\n            this.braintree || {};\n\n        if (!containerId) {\n            return;\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this.loadingIndicatorContainer = containerId.split('#')[1];\n\n        const {\n            id,\n            config: { testMode },\n        } = this.paymentMethod;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            this.paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                onClick: () => {\n                    this.toggleLoadingIndicator(true);\n                },\n                createOrder: () => this.setupPayment(braintreePaypalCheckout, id, onPaymentError),\n                onApprove: async (authorizeData: PaypalAuthorizeData) => {\n                    this.braintreeTokenizePayload = await this.tokenizePaymentOrThrow(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                    );\n\n                    if (submitForm && typeof submitForm === 'function') {\n                        submitForm();\n                    }\n                },\n                onCancel: () => {\n                    this.toggleLoadingIndicator(false);\n                },\n                onError: (error: Error) => {\n                    this.toggleLoadingIndicator(false);\n\n                    onError?.(error);\n                },\n            });\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            if (this.paypalButtonRender.isEligible()) {\n                this.paypalButtonRender.render(`${containerId}`);\n            }\n        } else {\n            this.removeElement(containerId.split('#')[1]);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        method: string,\n        onPaymentError: BraintreePaypalPaymentInitializeOptions['onPaymentError'],\n    ): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n\n        try {\n            const customer = state.getCustomer();\n\n            const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(method);\n\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = state.getStoreConfigOrThrow().currency.code;\n\n            const shippingAddress = state.getShippingAddress();\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePaymentOrThrow(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            return await braintreePaypalCheckout.tokenizePayment(authorizeData);\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderPayPalMessages() {\n        const { bannerContainerId } = this.braintree || {};\n\n        if (\n            this.braintreeHostWindow.paypal &&\n            bannerContainerId &&\n            Boolean(document.getElementById(bannerContainerId))\n        ) {\n            const state = this.paymentIntegrationService.getState();\n            const checkout = state.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: checkout.subtotal,\n                    placement: 'payment',\n                    style: {\n                        layout: 'text',\n                        logo: {\n                            type: 'inline',\n                        },\n                    },\n                })\n                .render(`#${bannerContainerId}`);\n        }\n    }\n\n    private async loadPaypal() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken, storeConfig);\n\n            await this.braintreeIntegrationService.getPaypal();\n        } catch (error) {\n            this.handleError(error);\n        }\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBraintreePaypalProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e: any) => e.provider_error) || [];\n\n            return paypalProviderError[0].provider_error?.code === '2046';\n        }\n\n        return false;\n    }\n\n    private removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBraintreePaypalProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator, Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../braintree-paypal-constants';\n\nimport BraintreePaypalPaymentStrategy from './braintree-paypal-payment-strategy';\n\nconst createBraintreePaypalPaymentStrategy: PaymentStrategyFactory<\n    BraintreePaypalPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const overlay = new Overlay();\n\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n        overlay,\n    );\n\n    return new BraintreePaypalPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalPaymentStrategy, [\n    { id: 'braintreepaypal' },\n    { id: 'braintreepaypalcredit' },\n]);\n","import {\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    LocalPaymentInstance,\n    LocalPaymentsPayload,\n    onPaymentStartData,\n    StartPaymentError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport {\n    BraintreeLocalMethods,\n    WithBraintreeLocalMethodsPaymentInitializeOptions,\n} from './braintree-local-methods-options';\n\nexport default class BraintreeLocalMethodsPaymentStrategy implements PaymentStrategy {\n    private orderId?: string;\n    private localPaymentInstance?: LocalPaymentInstance;\n    private braintreeLocalMethods?: BraintreeLocalMethods;\n    private loadingIndicatorContainer?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, braintreelocalmethods } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreelocalmethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.`,\n            );\n        }\n\n        this.braintreeLocalMethods = braintreelocalmethods;\n\n        this.loadingIndicatorContainer = braintreelocalmethods.container.split('#')[1];\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId);\n\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(gatewayId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken, storeConfig);\n            await this.braintreeIntegrationService.loadBraintreeLocalMethods(\n                this.getLocalPaymentInstance.bind(this),\n                config.merchantId || '',\n            );\n        } catch (error: unknown) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.orderId = undefined;\n        this.toggleLoadingIndicator(false);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const sessionId = await this.braintreeIntegrationService.getSessionId();\n        const billing = state.getBillingAddressOrThrow();\n        const { firstName, lastName, countryCode } = billing;\n        const { currency, email, lineItems } = cart;\n        const isShippingRequired = lineItems.physicalItems.length > 0;\n        const grandTotal = state.getCheckoutOrThrow().outstandingBalance;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        if (!this.localPaymentInstance) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.localPaymentInstance?.startPayment(\n                {\n                    paymentType: payment.methodId,\n                    amount: grandTotal,\n                    fallback: {\n                        url: 'url-placeholder',\n                        buttonText: 'button placeholder',\n                    },\n                    currencyCode: currency.code,\n                    shippingAddressRequired: isShippingRequired,\n                    email,\n                    givenName: firstName,\n                    surname: lastName,\n                    address: {\n                        countryCode,\n                    },\n                    onPaymentStart: (data: onPaymentStartData, start: () => void) => {\n                        // Call start to initiate the popup\n                        this.orderId = data.paymentId;\n                        start();\n                    },\n                },\n                async (\n                    startPaymentError: StartPaymentError | null,\n                    payloadData: LocalPaymentsPayload,\n                ) => {\n                    if (startPaymentError) {\n                        if (startPaymentError.code !== 'LOCAL_PAYMENT_WINDOW_CLOSED') {\n                            reject(() => this.handleError(startPaymentError));\n                        }\n\n                        this.toggleLoadingIndicator(false);\n                        reject();\n                    } else {\n                        if (!this.orderId) {\n                            throw PaymentMethodInvalidError;\n                        }\n\n                        const paymentData = {\n                            formattedPayload: {\n                                device_info: sessionId || null,\n                                method: payment.methodId,\n                                [`${payment.methodId}_account`]: {\n                                    email: cart.email,\n                                    token: payloadData.nonce,\n                                    order_id: this.orderId,\n                                },\n                                vault_payment_instrument: null,\n                                set_as_default_stored_instrument: null,\n                            },\n                        };\n\n                        try {\n                            await this.paymentIntegrationService.submitOrder(order, options);\n                            await this.paymentIntegrationService.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData,\n                            });\n                            resolve();\n                        } catch (error: unknown) {\n                            reject(() => this.handleError(error));\n                        }\n                    }\n                },\n            );\n        });\n    }\n\n    private getLocalPaymentInstance(localPaymentInstance: LocalPaymentInstance) {\n        if (!this.localPaymentInstance) {\n            this.localPaymentInstance = localPaymentInstance;\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.braintreeLocalMethods || {};\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeLocalMethodsPaymentStrategy from './braintree-local-methods-payment-strategy';\n\nconst createBraintreeLocalMethodsPaymentStrategy: PaymentStrategyFactory<\n    BraintreeLocalMethodsPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n\n    return new BraintreeLocalMethodsPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n};\n\nexport default toResolvableModule(createBraintreeLocalMethodsPaymentStrategy, [\n    { gateway: 'braintreelocalmethods' },\n]);\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBraintreeAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    BraintreeConnectAddress,\n    BraintreeConnectCardComponent,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneCardComponent,\n    BraintreeFastlaneCardComponentOptions,\n    BraintreeInitializationData,\n    isBraintreeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport { WithBraintreeFastlanePaymentInitializeOptions } from './braintree-fastlane-payment-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlanePaymentStrategy implements PaymentStrategy {\n    private braintreeCardComponent?: BraintreeFastlaneCardComponent | BraintreeConnectCardComponent;\n    private isFastlaneEnabled?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n        private browserStorage: BrowserStorage,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane.onInit || typeof braintreefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n\n        this.isFastlaneEnabled = !!paymentMethod?.initializationData?.isFastlaneEnabled;\n\n        if (\n            this.isFastlaneEnabled &&\n            (!braintreefastlane.onChange || typeof braintreefastlane.onChange !== 'function')\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.braintreeFastlaneUtils.initializeBraintreeAcceleratedCheckoutOrThrow(\n            methodId,\n            braintreefastlane.styles,\n        );\n\n        if (this.shouldRunAuthenticationFlow() && !this.isFastlaneEnabled) {\n            await this.braintreeFastlaneUtils.runPayPalConnectAuthenticationFlowOrThrow();\n        }\n\n        if (this.shouldRunAuthenticationFlow() && this.isFastlaneEnabled) {\n            await this.braintreeFastlaneUtils.runPayPalFastlaneAuthenticationFlowOrThrow();\n        }\n\n        await this.initializeCardComponent();\n\n        braintreefastlane.onInit((container) => this.renderBraintreeAXOComponent(container));\n\n        if (\n            this.isFastlaneEnabled &&\n            braintreefastlane.onChange &&\n            typeof braintreefastlane.onChange === 'function'\n        ) {\n            braintreefastlane.onChange(() => this.handleBraintreeStoredInstrumentChange(methodId));\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const paymentPayload = this.isFastlaneEnabled\n            ? await this.prepareFastlanePaymentPayload(methodId)\n            : await this.prepareConnectPaymentPayload(methodId, paymentData);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n        this.browserStorage.removeItem('sessionId');\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.braintreeCardComponent = undefined;\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Braintree AXO Component rendering method\n     *\n     */\n    private async initializeCardComponent() {\n        const state = this.paymentIntegrationService.getState();\n        const { phone, firstName, lastName } = state.getBillingAddressOrThrow();\n        const fullName = `${firstName} ${lastName}`;\n\n        const cardComponentOptions: BraintreeFastlaneCardComponentOptions = {\n            styles: {},\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        if (this.isFastlaneEnabled) {\n            const paypalPaymentComponent =\n                this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();\n\n            this.braintreeCardComponent = await paypalPaymentComponent(cardComponentOptions);\n        } else {\n            const paypalPaymentComponent =\n                this.braintreeFastlaneUtils.getBraintreeConnectComponentOrThrow();\n            const cardComponentOptions = {\n                fields: {\n                    ...(phone && {\n                        phoneNumber: {\n                            prefill: phone,\n                        },\n                    }),\n                },\n            };\n\n            this.braintreeCardComponent = paypalPaymentComponent(cardComponentOptions);\n        }\n    }\n\n    private renderBraintreeAXOComponent(container?: string) {\n        const braintreeCardComponent = this.getBraintreeCardComponentOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        braintreeCardComponent.render(container);\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareConnectPaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n\n        const deviceSessionId = await this.braintreeFastlaneUtils.getDeviceSessionId();\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const { instrumentId } = paymentData;\n\n            if (this.isPayPalInstrument(instrumentId)) {\n                return {\n                    methodId,\n                    paymentData: {\n                        deviceSessionId,\n                        formattedPayload: {\n                            paypal_connect_token: {\n                                token: instrumentId,\n                            },\n                        },\n                    },\n                };\n            }\n\n            return {\n                methodId,\n                paymentData: {\n                    ...paymentData,\n                    instrumentId,\n                    deviceSessionId,\n                },\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const braintreeCardComponent = this.getBraintreeCardComponentOrThrow();\n\n        const paypalBillingAddress = this.mapToPayPalAddress(billingAddress);\n        const paypalShippingAddress = shippingAddress && this.mapToPayPalAddress(shippingAddress);\n\n        const { nonce } = await braintreeCardComponent.tokenize({\n            billingAddress: paypalBillingAddress,\n            ...(paypalShippingAddress && { shippingAddress: paypalShippingAddress }),\n        });\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                deviceSessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                nonce,\n            },\n        };\n    }\n\n    private async prepareFastlanePaymentPayload(methodId: string): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const paypalInstrument = this.getPayPalInstruments()[0];\n\n        const deviceSessionId = await this.braintreeFastlaneUtils.getDeviceSessionId();\n\n        if (paypalInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    deviceSessionId,\n                    formattedPayload: {\n                        paypal_fastlane_token: {\n                            token: paypalInstrument.bigpayToken,\n                        },\n                    },\n                },\n            };\n        }\n\n        const { getPaymentToken } = this.getBraintreeCardComponentOrThrow();\n\n        const { id } = await getPaymentToken({\n            billingAddress: this.mapToPayPalAddress(billingAddress),\n        });\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId,\n                nonce: id,\n            },\n        };\n    }\n\n    private mapToPayPalAddress(address?: Address): BraintreeConnectAddress {\n        return {\n            streetAddress: address?.address1 || '',\n            locality: address?.city || '',\n            region: address?.stateOrProvinceCode || '',\n            postalCode: address?.postalCode || '',\n            countryCodeAlpha2: address?.countryCode || '',\n        };\n    }\n\n    /**\n     *\n     * Other methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.browserStorage.getItem('sessionId');\n\n        if (\n            !customer.isGuest ||\n            braintreePaymentProviderCustomer?.authenticationState ===\n                BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return (\n            !braintreePaymentProviderCustomer?.authenticationState &&\n            paypalFastlaneSessionId === cart.id\n        );\n    }\n\n    private getBraintreeCardComponentOrThrow() {\n        if (!this.braintreeCardComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeCardComponent;\n    }\n\n    private isPayPalInstrument(instrumentId: string): boolean {\n        const paypalInstruments = this.getPayPalInstruments();\n\n        return !!paypalInstruments.find((instrument) => instrument.bigpayToken === instrumentId);\n    }\n\n    private getPayPalInstruments(): CardInstrument[] {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return braintreePaymentProviderCustomer.instruments || [];\n    }\n\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === 'braintree' ? 'braintreeacceleratedcheckout' : 'braintree';\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BraintreeInitializationData>(validPaymentMethodId);\n    }\n\n    /**\n     *\n     * Braintree Fastlane instrument change\n     *\n     */\n    private async handleBraintreeStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const braintreeFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument = this.braintreeFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                [selectedCard],\n            );\n\n            if (selectedInstrument && selectedInstrument.length > 0) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    ...braintreeFastlaneCustomer,\n                    instruments: [...selectedInstrument],\n                });\n\n                return selectedInstrument[0];\n            }\n        }\n\n        return undefined;\n    }\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface AdditionalActionRequired {\n    type: AdditionalActionType;\n    data: AdditionalRedirectData;\n}\n\nexport interface AdditionalRedirectData {\n    redirect_url: string;\n    transaction_id?: string;\n}\n\nexport enum AdditionalActionType {\n    OffsiteRedirect = 'offsite_redirect',\n}\n\nexport function getCheckoutcom(): PaymentMethod {\n    return {\n        id: 'checkoutcom',\n        logoUrl: '',\n        method: 'checkoutcom',\n        supportedCards: [],\n        config: {\n            displayName: 'Checkout.com',\n            merchantId: '',\n            testMode: true,\n        },\n        initializationData: {\n            checkoutcomkey: 'key',\n        },\n        type: 'PAYMENT_TYPE_API',\n        clientToken: 'clientToken',\n    };\n}\n\nexport interface WithDocumentInstrument {\n    ccDocument: string;\n}\n\nexport interface WithCheckoutcomSEPAInstrument {\n    iban: string;\n    bic: string;\n}\n\nexport interface WithCheckoutcomFawryInstrument {\n    customerMobile: string;\n    customerEmail: string;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport BraintreeFastlanePaymentStrategy from './braintree-fastlane-payment-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlanePaymentStrategy: PaymentStrategyFactory<\n    BraintreeFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n    const browserStorage = new BrowserStorage('paypalFastlane');\n\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        browserStorage,\n    );\n\n    return new BraintreeFastlanePaymentStrategy(\n        paymentIntegrationService,\n        braintreeFastlaneUtils,\n        browserStorage,\n    );\n};\n\nexport default toResolvableModule(createBraintreeFastlanePaymentStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n]);\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, AdditionalActionType } from './checkoutcom';\n\nexport default class CheckoutComCustomPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(protected paymentIntegrationService: PaymentIntegrationService) {\n        super(paymentIntegrationService);\n    }\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await form.submit(payment);\n        } catch (error) {\n            return this._processResponse(error);\n        }\n\n        this.paymentIntegrationService.loadCurrentOrder();\n    }\n\n    protected _processResponse(error: unknown): Promise<void> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        const additionalActionRequired: AdditionalActionRequired =\n            error.body.additional_action_required;\n\n        // TODO validate all possible responses and perform respective additional actions\n        if (\n            additionalActionRequired &&\n            additionalActionRequired.type === AdditionalActionType.OffsiteRedirect\n        ) {\n            return this._performRedirect(additionalActionRequired);\n        }\n\n        return Promise.reject(error);\n    }\n\n    private _performRedirect(additionalActionRequired: AdditionalActionRequired): Promise<void> {\n        return new Promise(() => {\n            window.location.replace(additionalActionRequired.data.redirect_url);\n        });\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import {\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCheckoutcomFawryInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_FAWRY_PAYMENT_METHOD = 'fawry';\n\nexport default class CheckoutComFawryPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomFawryInstrument | undefined {\n        if (\n            CHECKOUTCOM_FAWRY_PAYMENT_METHOD === methodId &&\n            'customerMobile' in paymentData &&\n            'customerEmail' in paymentData\n        ) {\n            const fawryPaymentData = paymentData as {\n                customerMobile: string;\n                customerEmail: string;\n            };\n\n            return {\n                customerMobile: fawryPaymentData.customerMobile,\n                customerEmail: fawryPaymentData.customerEmail,\n            };\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComFawryPaymentStrategy from './checkoutcom-fawry-payment-strategy';\n\nconst createCheckoutComFawryPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComFawryPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComFawryPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComFawryPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'fawry' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CheckoutComCreditCardPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        protected formPoster: FormPoster,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() =>\n                this.formPoster.postForm(error.body.three_ds_result.acs_url, {\n                    PaReq: error.body.three_ds_result.payer_auth_request || null,\n                    TermUrl: error.body.three_ds_result.callback_url || null,\n                    MD: error.body.three_ds_result.merchant_data || null,\n                }),\n            );\n        }\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await form.submit(payment);\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() =>\n                this.formPoster.postForm(error.body.three_ds_result.acs_url, {\n                    PaReq: error.body.three_ds_result.payer_auth_request || null,\n                    TermUrl: error.body.three_ds_result.callback_url || null,\n                    MD: error.body.three_ds_result.merchant_data || null,\n                }),\n            );\n        }\n\n        this.paymentIntegrationService.loadCurrentOrder();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCreditCardPaymentStrategy from './checkoutcom-credit-card-payment-strategy';\n\nconst createCheckoutComCreditCardPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComCreditCardPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComCreditCardPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createCheckoutComCreditCardPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'credit_card' },\n    { gateway: 'checkoutcom', id: 'card' },\n]);\n","import {\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCheckoutcomSEPAInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_SEPA_PAYMENT_METHOD = 'sepa';\n\nexport default class CheckoutComSEPAPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomSEPAInstrument {\n        const formattedPayload: WithCheckoutcomSEPAInstrument = { iban: '', bic: '' };\n        const { iban, bic } =\n            'iban' in paymentData && 'bic' in paymentData ? paymentData : formattedPayload;\n\n        if (methodId === CHECKOUTCOM_SEPA_PAYMENT_METHOD && document) {\n            formattedPayload.iban = iban;\n            formattedPayload.bic = bic;\n        }\n\n        return formattedPayload;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComSepaPaymentStrategy from './checkoutcom-sepa-payment-strategy';\n\nconst createCheckoutComSepaPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComSepaPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComSepaPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComSepaPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'sepa' },\n]);\n","import {\n    CreditCardInstrument,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n    WithIdealInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_IDEAL_PAYMENT_METHOD = 'ideal';\n\nexport default class CheckoutComiDealPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument | (CreditCardInstrument & WithIdealInstrument),\n    ): WithIdealInstrument | undefined {\n        if (CHECKOUTCOM_IDEAL_PAYMENT_METHOD === methodId && 'bic' in paymentData) {\n            return { bic: paymentData.bic };\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComiDealPaymentStrategy from './checkoutcom-ideal-payment-strategy';\n\nconst createCheckoutComiDealPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComiDealPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComiDealPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComiDealPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'ideal' },\n]);\n","import {\n    CreditCardInstrument,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithDocumentInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst DOCUMENT_SUPPORTED_APMS = ['boleto', 'oxxo', 'qpay', 'ideal'];\n\nexport default class CheckoutComAPMPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument | (CreditCardInstrument & WithDocumentInstrument),\n    ): WithDocumentInstrument {\n        const formattedPayload: WithDocumentInstrument = { ccDocument: '' };\n        const ccDocument = 'ccDocument' in paymentData ? paymentData.ccDocument : '';\n\n        if (DOCUMENT_SUPPORTED_APMS.indexOf(methodId) !== -1 && ccDocument) {\n            formattedPayload.ccDocument = ccDocument;\n        }\n\n        return formattedPayload;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nimport CheckoutComAPMPaymentStrategy from './checkoutcom-apm-payment-strategy';\n\nconst createCheckoutComAPMPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComCustomPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComAPMPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComAPMPaymentStrategy, [\n    { gateway: 'checkoutcom' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotCompletedError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ClearpayScriptLoader from './clearpay-script-loader';\nimport ClearpaySdk from './clearpay-sdk';\n\nexport default class ClearpayPaymentStrategy implements PaymentStrategy {\n    private _clearpaySdk?: ClearpaySdk;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _clearpayScriptLoader: ClearpayScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId, options.gatewayId);\n\n        this._clearpaySdk = await this._clearpayScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._clearpaySdk = undefined;\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { gatewayId, methodId } = payload.payment || {};\n\n        if (!gatewayId || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const { isStoreCreditApplied: useStoreCredit } = state.getCheckoutOrThrow();\n\n        await this._paymentIntegrationService.applyStoreCredit(useStoreCredit);\n\n        await this._paymentIntegrationService.validateCheckout(state.getCheckout(), options);\n\n        const { countryCode } = state.getBillingAddressOrThrow();\n\n        if (!this._isCountrySupported(countryCode)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because billing country is not supported.',\n            );\n        }\n\n        await this._loadPaymentMethod(gatewayId, methodId, options);\n\n        await this._redirectToClearpay(\n            countryCode,\n            this._paymentIntegrationService.getState().getPaymentMethod(methodId, gatewayId),\n        );\n\n        // Clearpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise(noop);\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n        const config = state.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._paymentIntegrationService.submitOrder({}, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._paymentIntegrationService.forgetCheckout(payment.providerId);\n            await this._paymentIntegrationService.loadPaymentMethods();\n\n            if (error instanceof RequestError) {\n                throw new OrderFinalizationNotCompletedError(error.body?.errors?.[0]?.message);\n            }\n        }\n    }\n\n    private async _redirectToClearpay(\n        countryCode: string,\n        paymentMethod?: PaymentMethod,\n    ): Promise<void> {\n        if (!this._clearpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._clearpaySdk.initialize({ countryCode });\n        this._clearpaySdk.redirect({ token: paymentMethod.clientToken });\n\n        return Promise.resolve();\n    }\n\n    private _isCountrySupported(countryCode: string): boolean {\n        return countryCode === 'GB';\n    }\n\n    private async _loadPaymentMethod(\n        gatewayId: string,\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        try {\n            return await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                ...options,\n                params: { ...options?.params, method: methodId },\n            });\n        } catch (error) {\n            if (error instanceof RequestError && error.body?.status === 422) {\n                throw new InvalidArgumentError(\n                    \"Clearpay can't process your payment for this order, please try another payment method\",\n                );\n            }\n\n            throw error;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ClearpaySdk from './clearpay-sdk';\nimport ClearpayWindow from './clearpay-window';\n\nconst SCRIPTS_DEFAULT = {\n    PROD: '//portal.clearpay.co.uk/afterpay-async.js',\n    SANDBOX: '//portal.sandbox.clearpay.co.uk/afterpay-async.js',\n};\n\nexport default class ClearpayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, public _window: ClearpayWindow = window) {}\n\n    async load(method: PaymentMethod): Promise<ClearpaySdk> {\n        await this._scriptLoader.loadScript(this._getScriptUrl(method.config.testMode));\n\n        if (!this._window.AfterPay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.AfterPay;\n    }\n\n    private _getScriptUrl(testMode?: boolean): string {\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ClearpayPaymentStrategy from './clearpay-payment-strategy';\nimport ClearpayScriptLoader from './clearpay-script-loader';\n\nconst createClearpayPaymentStrategy: PaymentStrategyFactory<ClearpayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new ClearpayPaymentStrategy(\n        paymentIntegrationService,\n        new ClearpayScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createClearpayPaymentStrategy, [\n    { gateway: 'clearpay' },\n    { id: 'clearpay' },\n]);\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CreditCardPaymentStrategy from './credit-card-payment-strategy';\n\nconst createCreditCardPaymentStrategy: PaymentStrategyFactory<CreditCardPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CreditCardPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCreditCardPaymentStrategy, [{ default: true }]);\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isRequestError,\n    isVaultedInstrument,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument, getPaymentMethodOrThrow } =\n            this._paymentIntegrationService.getState();\n\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                await this._paymentIntegrationService.submitPayment(\n                    merge(payload.payment, {\n                        paymentData: { threeDSecure },\n                    }),\n                );\n\n                return;\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(method.id);\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(method.id);\n\n        return paymentMethod.clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n        const checkout = state.getCheckoutOrThrow();\n        const order = state.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import { includes, noop } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    CreditCardInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n    ThreeDSecureToken,\n    ThreeDsResult,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(noop);\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(noop),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(_paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CyberSourcePaymentStrategy from './cybersource-payment-strategy';\n\nconst createCyberSourcePaymentStrategy: PaymentStrategyFactory<CyberSourcePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CyberSourcePaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n};\n\nexport default toResolvableModule(createCyberSourcePaymentStrategy, [{ id: 'cybersource' }]);\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isCreditCardInstrument,\n    isRequestError,\n    isVaultedInstrument,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalThreeDSecureToken } from './cardinal';\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlowV2 {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument } = this._paymentIntegrationService.getState();\n        const { payment = { methodId: '' } } = payload;\n        const { paymentData = {} } = payment;\n\n        try {\n            return await execute(payload, options);\n        } catch (error) {\n            if (isRequestError(error) && error.body?.status === 'additional_action_required') {\n                const token = error.body.additional_action_required?.data?.token;\n                const xid = error.body.three_ds_result?.payer_auth_request;\n\n                await this._cardinalClient.configure(token);\n\n                const bin = this._getBin(paymentData, getCardInstrument, hostedForm);\n\n                if (bin) {\n                    await this._cardinalClient.runBinProcess(bin);\n                }\n\n                try {\n                    return await this._submitPayment(payment, { xid }, hostedForm);\n                } catch (err) {\n                    if (\n                        isRequestError(err) &&\n                        some(err.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        const threeDsResult = err.body.three_ds_result;\n                        const threeDsToken = threeDsResult?.payer_auth_request;\n\n                        await this._cardinalClient.getThreeDSecureData(\n                            threeDsResult,\n                            this._getOrderData(),\n                        );\n\n                        return this._submitPayment(payment, { token: threeDsToken }, hostedForm);\n                    }\n\n                    throw err;\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const store = this._paymentIntegrationService.getState();\n        const billingAddress = store.getBillingAddressOrThrow();\n        const shippingAddress = store.getShippingAddress();\n        const {\n            cart: {\n                currency: { code: currencyCode },\n                cartAmount: amount,\n            },\n        } = store.getCheckoutOrThrow();\n        const id = store.getOrderOrThrow().orderId.toString();\n\n        return { billingAddress, shippingAddress, currencyCode, id, amount };\n    }\n\n    private async _submitPayment(\n        payment: OrderPaymentRequestBody,\n        threeDSecure: CardinalThreeDSecureToken,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const paymentPayload = merge({}, payment, { paymentData: { threeDSecure } });\n\n        if (!hostedForm) {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        }\n\n        await hostedForm?.submit(paymentPayload);\n    }\n\n    private _getBin(\n        paymentData: NonNullable<OrderPaymentRequestBody['paymentData']>,\n        getCardInstrument: PaymentIntegrationSelectors['getCardInstrument'],\n        hostedForm?: HostedForm,\n    ): string {\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const ccNumber = isCreditCardInstrument(paymentData) && paymentData.ccNumber;\n        const hostedFormBin = hostedForm ? hostedForm.getBin() : ccNumber;\n        const bin = instrument ? instrument.iin : hostedFormBin;\n\n        return bin || '';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument } from './payment';\n\nexport default function isCreditCardInstrument(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return (\n        !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string'\n    );\n}\n","import { CardinalThreeDSecureFlowV2 } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CyberSourceV2PaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(_paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlowV2,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CyberSourceV2PaymentStrategy from './cybersourcev2-payment-strategy';\n\nconst createCyberSourceV2PaymentStrategy: PaymentStrategyFactory<CyberSourceV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CyberSourceV2PaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlowV2(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n};\n\nexport default toResolvableModule(createCyberSourceV2PaymentStrategy, [{ id: 'cybersourcev2' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            return new Promise(() => this.redirectUrl(redirect_url));\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import { AdyenAdditionalActionErrorResponse } from '../types';\n\nexport default function isAdditionalActionRequiredErrorResponse(\n    param: unknown,\n): param is AdyenAdditionalActionErrorResponse {\n    return (\n        typeof param === 'object' &&\n        param !== null &&\n        'errors' in (param as AdyenAdditionalActionErrorResponse) &&\n        Array.isArray((param as AdyenAdditionalActionErrorResponse).errors) &&\n        'code' in (param as AdyenAdditionalActionErrorResponse).errors[0] &&\n        typeof (param as AdyenAdditionalActionErrorResponse).errors[0].code === 'string' &&\n        'provider_data' in param &&\n        typeof (param as AdyenAdditionalActionErrorResponse).provider_data === 'object'\n    );\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV2ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV2 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV2ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","export type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { round } from 'lodash';\n\nimport {\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayPaymentInitializeOptions, {\n    WithGooglePayPaymentInitializeOptions,\n} from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    IntermediatePaymentData,\n    NewTransactionInfo,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _paymentButton?: HTMLElement;\n    private _clickListener?: (event: MouseEvent) => unknown;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n\n    constructor(\n        protected _paymentIntegrationService: PaymentIntegrationService,\n        protected _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithGooglePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions?.walletButton) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { walletButton, ...callbacks } = googlePayOptions;\n\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(this._getMethodId());\n\n        await this._googlePayPaymentProcessor.initialize(\n            () => paymentMethod,\n            this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n        );\n\n        this._addPaymentButton(walletButton, callbacks);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n        const extraData = await this._googlePayPaymentProcessor.extraPaymentData();\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce, ...extraData },\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._clickListener) {\n            this._paymentButton?.removeEventListener('click', this._clickListener);\n        }\n\n        this._paymentButton = undefined;\n        this._clickListener = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected _addPaymentButton(\n        walletButton: string,\n        callbacks: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>,\n    ): void {\n        if (this._paymentButton) {\n            return;\n        }\n\n        const paymentButton = document.getElementById(walletButton);\n\n        if (!paymentButton) {\n            throw new InvalidArgumentError('Unable to proceed without a walletButton.');\n        }\n\n        this._paymentButton = paymentButton;\n        this._clickListener = this._handleClick(callbacks);\n\n        this._paymentButton.addEventListener('click', this._clickListener);\n    }\n\n    protected _handleClick({\n        onPaymentSelect,\n        onError,\n    }: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n\n            onPaymentSelect?.();\n        };\n    }\n\n    protected async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(), response);\n\n        await this._paymentIntegrationService.loadCheckout();\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n    }\n\n    protected _getMethodId(): keyof WithGooglePayPaymentInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    protected _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                }: IntermediatePaymentData): Promise<NewTransactionInfo | void> => {\n                    if (callbackTrigger !== CallbackTriggerType.INITIALIZE) {\n                        return;\n                    }\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const { getCheckoutOrThrow, getCartOrThrow } =\n                        this._paymentIntegrationService.getState();\n                    const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n                    const totalPrice = round(\n                        getCheckoutOrThrow().outstandingBalance,\n                        decimalPlaces,\n                    ).toFixed(decimalPlaces);\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                    };\n                },\n            },\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV2Gateway from '../../gateways/google-pay-adyenv2-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV2Gateway(\n                paymentIntegrationService,\n                new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV2PaymentStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV3ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV3 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV3ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV3Gateway from '../../gateways/google-pay-adyenv3-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV3Gateway(\n                paymentIntegrationService,\n                new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV3PaymentStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetPaymentStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComPaymentStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourcePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourcePaymentStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalPaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalPaymentStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayStripeGateway from '../../gateways/google-pay-stripe-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayStripePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripePaymentStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessPaymentStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayPaypalCommercePaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayPayPalCommerceInitializationData>(\n                this._getMethodId(),\n            );\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepaypaypalcommercecheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { each, some } from 'lodash';\n\nimport {\n    getBrowserInfo,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { MollieClient, MollieElement } from './mollie';\nimport MolliePaymentInitializeOptions, {\n    WithMolliePaymentInitializeOptions,\n} from './mollie-payment-initialize-options';\nimport MollieScriptLoader from './mollie-script-loader';\n\nexport enum MolliePaymentMethodType {\n    CREDIT_CARD = 'credit_card',\n}\n\nconst methodsNotAllowedWhenDigitalOrder = ['klarnapaylater', 'klarnasliceit'];\n\nexport default class MolliePaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: MolliePaymentInitializeOptions;\n    private mollieClient?: MollieClient;\n    private cardHolderElement?: MollieElement;\n    private cardNumberElement?: MollieElement;\n    private verificationCodeElement?: MollieElement;\n    private expiryDateElement?: MollieElement;\n    private locale?: string;\n\n    private hostedForm?: HostedForm;\n\n    private unsubscribe?: () => void;\n\n    constructor(\n        private mollieScriptLoader: MollieScriptLoader,\n        private paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMolliePaymentInitializeOptions,\n    ): Promise<void> {\n        const { mollie, methodId, gatewayId } = options;\n\n        if (!mollie) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.mollie\" argument is not provided.',\n            );\n        }\n\n        if (!methodId || !gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" and/or \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        const controllers = document.querySelectorAll('.mollie-components-controller');\n\n        each(controllers, (controller) => controller.remove());\n\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        this.initializeOptions = mollie;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        const {\n            config: { merchantId, testMode },\n        } = paymentMethod;\n\n        this.locale = state.getLocale();\n\n        if (!merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this.isCreditCard(methodId) &&\n            mollie.form &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId)\n        ) {\n            this.hostedForm = await this.mountCardVerificationfields(mollie.form);\n        } else if (this.isCreditCard(methodId)) {\n            this.mollieClient = await this.loadMollieJs(\n                merchantId,\n                storeConfig.storeProfile.storeLanguage,\n                testMode,\n            );\n            this.mountElements();\n        }\n\n        this.unsubscribe = () => {\n            if (\n                this.paymentIntegrationService.getState().isPaymentMethodInitialized({\n                    methodId: options.methodId,\n                    gatewayId: options.gatewayId,\n                })\n            ) {\n                const element = document.getElementById(`${gatewayId}-${methodId}-paragraph`);\n\n                if (element) {\n                    element.remove();\n                }\n\n                mollie.disableButton(false);\n\n                this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n            }\n        };\n\n        this.unsubscribe();\n\n        this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !payment.gatewayId || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment', 'gatewayId', 'paymentData']);\n        }\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            if (isVaultedInstrument(paymentData)) {\n                return await this.executeWithVaulted(payment);\n            }\n\n            if (this.isCreditCard(payment.methodId)) {\n                return await this.executeWithCC(payment);\n            }\n\n            return await this.executeWithAPM(payment);\n        } catch (error) {\n            await this.processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (options && options.methodId && options.gatewayId && !this.hostedForm) {\n            const element = document.getElementById(`${options.gatewayId}-${options.methodId}`);\n\n            if (element) {\n                element.remove();\n            }\n        } else if (options && options.methodId && this.isCreditCard(options.methodId)) {\n            if (\n                this.cardHolderElement &&\n                this.cardNumberElement &&\n                this.verificationCodeElement &&\n                this.expiryDateElement\n            ) {\n                this.cardHolderElement.unmount();\n                this.cardHolderElement = undefined;\n\n                this.cardNumberElement.unmount();\n                this.cardNumberElement = undefined;\n\n                this.verificationCodeElement.unmount();\n                this.verificationCodeElement = undefined;\n\n                this.expiryDateElement.unmount();\n                this.expiryDateElement = undefined;\n            }\n        }\n\n        this.mollieClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { token, error } = await this.getMollieClient().createToken();\n\n        /* eslint-disable */\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        const formattedPayload = {\n            credit_card_token: {\n                token,\n            },\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            browser_info: getBrowserInfo(),\n            shopper_locale: this.getShopperLocale(),\n        };\n        /* eslint-enable */\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload,\n            },\n        });\n    }\n\n    protected async executeWithVaulted(payment: OrderPaymentRequestBody): Promise<void> {\n        if (this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId)) {\n            const form = this.hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            await this.paymentIntegrationService.loadCurrentOrder();\n        } else {\n            await this.paymentIntegrationService.submitPayment(payment);\n        }\n    }\n\n    protected async executeWithAPM(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n        const issuer = paymentData && 'issuer' in paymentData ? paymentData.issuer : '';\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                ...paymentData,\n                formattedPayload: {\n                    issuer,\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    shopper_locale: this.getShopperLocale(),\n                },\n            },\n        });\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === MolliePaymentMethodType.CREDIT_CARD;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedPaymentFormEnabled(methodId, gatewayId) && this.isHostedFieldAvailable()\n        );\n    }\n\n    private mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        /* eslint-disable */\n        return new Promise(async (resolve, reject) => {\n            try {\n                const config = this.paymentIntegrationService.getState().getStoreConfig();\n                const bigpayBaseUrl = config?.paymentSettings.bigpayBaseUrl;\n\n                if (!bigpayBaseUrl) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const form = this.paymentIntegrationService.createHostedForm(\n                    bigpayBaseUrl,\n                    formOptions\n                );\n\n                await form.attach();\n\n                resolve(form);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n\n        return !!options.form?.fields;\n    }\n\n    private processAdditionalAction(error: any): Promise<unknown> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        if (some(error.body.errors, {code: 'additional_action_required'})) {\n            const { additional_action_required: { data : { redirect_url } } } = error.body;\n\n            return new Promise(() => window.location.replace(redirect_url));\n        }\n\n        return Promise.reject(error);\n    }\n\n    private getInitializeOptions(): MolliePaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private loadMollieJs(merchantId: string, locale: string, testmode = false): Promise<MollieClient> {\n        if (this.mollieClient) {\n            return Promise.resolve(this.mollieClient);\n        }\n\n        return this.mollieScriptLoader\n            .load(merchantId, locale, testmode);\n    }\n\n    private getMollieClient(): MollieClient {\n        if (!this.mollieClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.mollieClient;\n    }\n\n    private getShopperLocale(): string {\n        if (!this.locale) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.locale;\n    }\n\n    /**\n     * ContainerId is use in Mollie for determined either its showing or not the\n     * container, because when Mollie has Vaulted Instruments it gets hide,\n     * and shows an error because can't mount Provider Components\n     *\n     * We had to add a settimeout because Mollie sets de tab index after mounting\n     * each component, but without a setTimeOut Mollie is not able to find the\n     * components as they are hidden so we need to wait until they are shown\n     */\n    private mountElements() {\n        const { containerId, cardNumberId, cardCvcId, cardExpiryId, cardHolderId, styles } = this.getInitializeOptions();\n        let container: HTMLElement | null;\n\n        if (containerId) {\n            container = document.getElementById(containerId);\n        }\n\n        setTimeout(() => {\n            if (!containerId || container?.style.display !== 'none') {\n                const mollieClient = this.getMollieClient();\n\n                this.cardHolderElement = mollieClient.createComponent('cardHolder', { styles });\n                this.cardHolderElement.mount(`#${cardHolderId}`);\n\n                this.cardNumberElement = mollieClient.createComponent('cardNumber', { styles });\n                this.cardNumberElement.mount(`#${cardNumberId}`);\n\n                this.verificationCodeElement = mollieClient.createComponent('verificationCode', { styles });\n                this.verificationCodeElement.mount(`#${cardCvcId}`);\n\n                this.expiryDateElement = mollieClient.createComponent('expiryDate', { styles });\n                this.expiryDateElement.mount(`#${cardExpiryId}`);\n            }\n        }, 0);\n    }\n\n    private loadPaymentMethodsAllowed(mollie: MolliePaymentInitializeOptions, methodId: string, gatewayId: string){\n        if (methodsNotAllowedWhenDigitalOrder.includes(methodId)) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const cartDigitalItems = cart.lineItems?.digitalItems;\n\n            if (cartDigitalItems && cartDigitalItems.length > 0) {\n                const { containerId } = this.getInitializeOptions();\n\n                if (containerId) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        const paragraph = document.createElement('p') ;\n                        paragraph.setAttribute(\"id\",`${gatewayId}-${methodId}-paragraph`)\n\n                        if (mollie.unsupportedMethodMessage) {\n                            paragraph.innerText = mollie.unsupportedMethodMessage;\n                            container.appendChild(paragraph);\n                            mollie.disableButton(true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport GooglePayPaypalCommercePaymentStrategy from './google-pay-paypal-commerce-payment-strategy';\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\n\nconst createGooglePayPayPalCommercePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const scriptLoader = new PayPalCommerceScriptLoader(getScriptLoader());\n\n    return new GooglePayPaypalCommercePaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(paymentIntegrationService, scriptLoader),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        scriptLoader,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommercePaymentStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { HummInitializationData, OffsiteRedirectResponse } from './humm';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(payment.methodId, options);\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<HummInitializationData>(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n            });\n        } catch (error) {\n            if (this.isOffsiteRedirectResponse(error)) {\n                return this.handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<void> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.formPoster.postForm(url, JSON.parse(data), resolve);\n        });\n    }\n\n    private isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HummPaymentStrategy from './humm-payment-strategy';\n\nconst createHummPaymentStrategy: PaymentStrategyFactory<HummPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new HummPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createHummPaymentStrategy, [{ id: 'humm' }]);\n","export const supportedCountries = [\n    'AT',\n    'BE',\n    'CA',\n    'CH',\n    'CZ',\n    'DE',\n    'DK',\n    'ES',\n    'FI',\n    'FR',\n    'GB',\n    'GR',\n    'IE',\n    'IT',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'SE',\n];\nexport const supportedCountriesRequiringStates = ['AU'];\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from '../klarnav2/klarna-supported-countries';\n\nimport KlarnaCredit, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-credit';\nimport { WithKlarnaPaymentInitializeOptions } from './klarna-payment-initialize-options';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy {\n    private klarnaCredit?: KlarnaCredit;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnaScriptLoader: KlarnaScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaCredit = await this.klarnaScriptLoader.load();\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { paymentData, ...paymentPayload },\n        } = payload;\n\n        const { authorization_token: authorizationToken } = await this.authorize();\n\n        await this.paymentIntegrationService.initializePayment(paymentPayload.methodId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadWidget(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarna\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            klarna: { container, onLoad },\n        } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethod(methodId);\n\n            if (!paymentMethod) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (!this.klarnaCredit || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n            this.klarnaCredit.load({ container }, (response) => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n\n                resolve(response);\n            });\n        });\n    }\n\n    private getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private authorize(): Promise<KlarnaAuthorizationResponse> {\n        return new Promise((resolve, reject) => {\n            const state = this.paymentIntegrationService.getState();\n            const billingAddress = state.getBillingAddress();\n            const shippingAddress = state.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this.klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this.getUpdateSessionData(billingAddress, shippingAddress);\n\n            this.klarnaCredit.authorize(updateSessionData, (res) => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private klarnaWindow: KlarnaWindow = window) {}\n\n    async load(): Promise<KlarnaCredit> {\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Credit;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPaymentStrategy from './klarna-payment-strategy';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nconst createKlarnaPaymentStrategy: PaymentStrategyFactory<KlarnaPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new KlarnaPaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createKlarnaPaymentStrategy, [{ id: 'klarna' }]);\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPayments, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-payments';\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from './klarna-supported-countries';\nimport { WithKlarnaV2PaymentInitializeOptions } from './klarnav2-payment-initialize-options';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nexport default class KlarnaV2PaymentStrategy {\n    private klarnaPayments?: KlarnaPayments;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnav2ScriptLoader: KlarnaV2ScriptLoader,\n        private klarnav2TokenUpdater: KlarnaV2TokenUpdater,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaPayments = await this.klarnav2ScriptLoader.load();\n\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadPaymentsWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadPaymentsWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { ...paymentPayload },\n        } = payload;\n        const { gatewayId, methodId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { id: cartId } = state.getCartOrThrow();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        await this.klarnav2TokenUpdater.klarnaOrderInitialization(cartId, clientToken);\n\n        const { authorization_token: authorizationToken } = await this.authorizeOrThrow(methodId);\n\n        await this.paymentIntegrationService.initializePayment(gatewayId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadPaymentsWidget(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarnav2\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            gatewayId,\n            klarnav2: { container, onLoad },\n        } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const params = { params: cartId };\n\n        await this.klarnav2TokenUpdater.updateClientToken(gatewayId, { params }).catch(() => {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        });\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!this.klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this.klarnaPayments.load(\n                { container, payment_method_category: paymentMethod.id },\n                (response) => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    resolve(response);\n                },\n            );\n        });\n    }\n\n    private getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async authorizeOrThrow(methodId: string): Promise<KlarnaAuthorizationResponse> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n\n        const updateSessionData = this.getUpdateSessionData(billingAddress, shippingAddress);\n\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            if (!this.klarnaPayments) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this.klarnaPayments.authorize(\n                { payment_method_category: methodId },\n                updateSessionData,\n                (res) => {\n                    if (res.approved) {\n                        return resolve(res);\n                    }\n\n                    if (res.show_form) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n            );\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private klarnaWindow: KlarnaV2Window = window,\n    ) {}\n\n    async load(): Promise<KlarnaPayments> {\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Payments;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    PaymentMethod,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class KlarnaV2TokenUpdater {\n    constructor(private requestSender: RequestSender) {}\n\n    updateClientToken(\n        gatewayId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${gatewayId}`;\n\n        return this.requestSender.get(url, {\n            timeout,\n            headers: {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    async klarnaOrderInitialization(\n        cartId: string,\n        clientToken: string | undefined,\n    ): Promise<void> {\n        const url = `/api/storefront/initialization/klarna`;\n        const options = {\n            headers: {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                cartId,\n                clientToken,\n            },\n        };\n\n        await this.requestSender.put(url, options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaV2PaymentStrategy from './klarnav2-payment-strategy';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nconst createKlarnaV2PaymentStrategy: PaymentStrategyFactory<KlarnaV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n\n    return new KlarnaV2PaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaV2ScriptLoader(getScriptLoader()),\n        new KlarnaV2TokenUpdater(requestSender),\n    );\n};\n\nexport default toResolvableModule(createKlarnaV2PaymentStrategy, [{ gateway: 'klarna' }]);\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(payload, options);\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport LegacyPaymentStrategy from './legacy-payment-strategy';\n\nconst createLegacyPaymentStrategy: PaymentStrategyFactory<LegacyPaymentStrategy> = (\n    paymentIntegrationService,\n) => new LegacyPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createLegacyPaymentStrategy, [{ id: 'testgateway' }]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isMollieWindow from './is-mollie-window';\nimport { MollieClient } from './mollie';\n\nexport default class MollieScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private mollieHostWindow: Window = window) {}\n\n    async load(merchantId: string, locale: string, testmode: boolean): Promise<MollieClient> {\n        await this.scriptLoader.loadScript('https://js.mollie.com/v1/mollie.js');\n\n        if (!isMollieWindow(this.mollieHostWindow)) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.mollieHostWindow.Mollie(merchantId, {\n            locale,\n            testmode,\n        });\n    }\n}\n","import { MollieHostWindow } from './mollie';\n\nexport default function isMollieWindow(window: Window): window is MollieHostWindow {\n    return 'Mollie' in window;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MolliePaymentStrategy from './mollie-payment-strategy';\nimport MollieScriptLoader from './mollie-script-loader';\n\nconst createMolliePaymentStrategy: PaymentStrategyFactory<MolliePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MolliePaymentStrategy(\n        new MollieScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createMolliePaymentStrategy, [\n    { gateway: 'mollie' },\n    { gateway: 'mollie', id: 'applepay' },\n]);\n","import { omit } from 'lodash';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(omit(payload, 'payment'), options);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport NoPaymentDataRequiredPaymentStrategy from './no-payment-data-required-strategy';\n\nconst createNoPaymentStrategy: PaymentStrategyFactory<NoPaymentDataRequiredPaymentStrategy> = (\n    paymentIntegrationService,\n) => new NoPaymentDataRequiredPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createNoPaymentStrategy, [{ id: 'nopaymentdatarequired' }]);\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n            },\n            options,\n        );\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OfflinePaymentStrategy from './offline-payment-strategy';\n\nconst createOfflinePaymentStrategy: PaymentStrategyFactory<OfflinePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OfflinePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOfflinePaymentStrategy, [{ type: 'PAYMENT_TYPE_OFFLINE' }]);\n","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId =\n            (paymentData && isVaultedInstrument(paymentData) && paymentData.instrumentId) ||\n            undefined;\n        const shouldSaveInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSaveInstrument) ||\n            undefined;\n        const shouldSetAsDefaultInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSetAsDefaultInstrument) ||\n            undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        await this._paymentIntegrationService.submitOrder(orderPayload, options);\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId,\n            gatewayId,\n            instrumentId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return (\n            payment.gatewayId === 'adyen' ||\n            payment.gatewayId === 'barclaycard' ||\n            payment.methodId === 'ccavenuemars'\n        );\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OffsitePaymentStrategy from './offsite-payment-strategy';\n\nconst createOffsitePaymentStrategy: PaymentStrategyFactory<OffsitePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OffsitePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOffsitePaymentStrategy, [{ type: 'PAYMENT_TYPE_HOSTED' }]);\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isPaypalCommerceProviderError } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommercePaymentInitializeOptions, {\n    WithPayPalCommercePaymentInitializeOptions,\n} from './paypal-commerce-payment-initialize-options';\n\nexport default class PayPalCommercePaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalcommerce?: PayPalCommercePaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommercePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce } = options || {};\n\n        this.paypalcommerce = paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.loadingIndicatorContainer = paypalcommerce.container.split('#')[1];\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (paypalcommerce.onInit && typeof paypalcommerce.onInit === 'function') {\n            paypalcommerce.onInit(() => this.renderButton(methodId, paypalcommerce));\n        }\n\n        if (\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization === undefined ||\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, paypalcommerce);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.paypalcommerce || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3438.handling_instrument_declined_error_ppc'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.paypalCommerceIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.paypalcommerce) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.paypalcommerce);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommercePaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommerce;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommercePaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommercePaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: PayPalCommercePaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.paypalCommerceIntegrationService.createOrder('paypalcommercecheckout', {\n            shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n        });\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.paypalcommerce || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n\n            const { trustedShippingAddress } =\n                instruments?.find(({ bigpayToken }) => bigpayToken === paymentData.instrumentId) ||\n                {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isPaypalCommerceProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e: any) => e.provider_error) || [];\n\n            return paypalProviderError[0].provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isPaypalCommerceProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommercePaymentStrategy from './paypal-commerce-payment-strategy';\n\nconst createPayPalCommercePaymentStrategy: PaymentStrategyFactory<PayPalCommercePaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PayPalCommercePaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommercePaymentStrategy, [{ id: 'paypalcommerce' }]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    MessagingOptions,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditPaymentInitializeOptions, {\n    WithPayPalCommerceCreditPaymentInitializeOptions,\n} from './paypal-commerce-credit-payment-initialize-options';\n\nexport default class PayPalCommerceCreditPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceCreditPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercecredit } = options || {};\n\n        const paypalOptions = paypalcommercecredit || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { bannerContainerId = '' } = paypalOptions;\n\n        if (document.getElementById(bannerContainerId)) {\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = paypalOptions?.container?.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalOptions: PayPalCommerceCreditPaymentInitializeOptions,\n    ): void {\n        if (!paypalOptions?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalOptions;\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: PayPalCommerceButtonsOptions = {\n                fundingSource,\n                style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.paypalCommerceIntegrationService.createOrder(\n                        'paypalcommercecreditcheckout',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.PAYLATER) {\n                return;\n            }\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.CREDIT) {\n                throw new NotImplementedError(\n                    `PayPal ${fundingSource} is not available for your region. Please use PayPal Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.paypalButton.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceCreditPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            await onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceCreditPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceCreditPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(paypalMessages: PayPalMessagesSdk, bannerContainerId: string): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const grandTotal = checkout.outstandingBalance;\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: grandTotal,\n            placement: 'payment',\n            style: {\n                layout: 'text',\n                logo: {\n                    type: 'inline',\n                },\n            },\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceCreditPaymentStrategy from './paypal-commerce-credit-payment-strategy';\n\nconst createPayPalCommerceCreditPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditPaymentStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoPaymentInitializeOptions, {\n    WithPayPalCommerceVenmoPaymentInitializeOptions,\n} from './paypal-commerce-venmo-payment-initialize-options';\n\nexport default class PayPalCommerceVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercevenmo } = options || {};\n\n        const paypalOptions = paypalcommercevenmo || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommercevenmo;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmocheckout'),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `PayPal Venmo is not available for your region. Please use PayPal Checkout instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoPaymentStrategy from './paypal-commerce-venmo-payment-strategy';\n\nconst createPayPalCommerceVenmoPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoPaymentStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    NonInstantAlternativePaymentMethods,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsPaymentOptions, {\n    WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n} from './paypal-commerce-alternative-methods-payment-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const {\n            gatewayId,\n            methodId,\n            paypalcommerce, // FIXME: this option is deprecated\n            paypalcommercealternativemethods,\n        } = options;\n        const paypalOptions = paypalcommercealternativemethods || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, paypalOptions);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, paypalOptions);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.paypalCommerceIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = paypalOptions;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: methodId,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => paypalOptions.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, paypalOptions),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleFailure(error, onError),\n            onClick: async (_, actions) =>\n                paypalOptions.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): Promise<string> {\n        const { onValidate } = paypalOptions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.paypalCommerceIntegrationService.createOrder(\n            'paypalcommercealternativemethodscheckout',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, orderId, gatewayId);\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceAlternativeMethodsPaymentOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: PayPalCommerceAlternativeMethodsPaymentOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = paypalOptions;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceAlternativeMethodsPaymentStrategy from './paypal-commerce-alternative-methods-payment-strategy';\n\nconst createPayPalCommerceAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods' },\n]);\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumber in fields &&\n        HostedFieldType.CardName in fields &&\n        HostedFieldType.CardExpiry in fields\n    );\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardVaultedFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumberVerification in fields &&\n        HostedFieldType.CardCodeVerification in fields &&\n        HostedFieldType.CardExpiryVerification in fields\n    );\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isPayPalCommerceAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isPayPalCommerceAcceleratedCheckoutCustomer,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    PayPalCommerceCardFields,\n    PayPalCommerceCardFieldsConfig,\n    PayPalCommerceCardFieldsOnApproveData,\n    PayPalCommerceCardFieldsState,\n    PayPalCommerceFields,\n    PayPalCommerceHostedFieldsRenderOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCardsPaymentInitializeOptions, {\n    WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n} from './paypal-commerce-credit-cards-payment-initialize-options';\n\nexport default class PayPalCommerceCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: PayPalCommerceCardFields;\n    private cvvField?: PayPalCommerceFields;\n    private expiryField?: PayPalCommerceFields;\n    private numberField?: PayPalCommerceFields;\n    private nameField?: PayPalCommerceFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercecreditcards, paypalcommerce } = options;\n        const paypalCommerceInitializationOptions = paypalcommercecreditcards || paypalcommerce;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            paypalCommerceInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.paypalcommercecreditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, undefined, true, true);\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // This condition is triggered when we pay with vaulted instrument and shipping address is truste\n            const { orderId } = await this.paypalCommerceIntegrationService.createOrderCardFields(\n                'paypalcommercecreditcardscheckout',\n                this.getInstrumentParams(),\n            );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: PayPalCommerceCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n\n        const cardFieldsConfig: PayPalCommerceCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({ orderID, vaultSetupToken }: PayPalCommerceCardFieldsOnApproveData) =>\n                this.handleApprove({ orderID, vaultSetupToken }),\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({ orderID, vaultSetupToken }: PayPalCommerceCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: PayPalCommerceCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: PayPalCommerceCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof PayPalCommerceCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): PayPalCommerceCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): PayPalCommerceHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * PayPal Commerce Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalCommercePaymentProviderCustomer = isPayPalCommerceAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isPayPalCommerceAnalyticsV2Enabled &&\n            !paypalCommercePaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","export enum SquareIntent {\n    CHARGE = 'CHARGE',\n    STORE = 'STORE',\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCardsPaymentStrategy from './paypal-commerce-credit-cards-payment-strategy';\n\nconst createPaypalCommerceCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPaypalCommerceCreditCardsPaymentStrategy, [\n    { id: 'paypalcommercecreditcards' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    BirthDate,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport {\n    PaypalCommerceRatePay,\n    WithPayPalCommerceRatePayPaymentInitializeOptions,\n} from './paypal-commerce-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PaypalCommerceRatepayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private paypalcommerceratepay?: PaypalCommerceRatePay;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, paypalcommerceratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = paypalcommerceratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.paypalcommerceratepay = paypalcommerceratepay;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.paypalcommerceratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.paypalCommerceIntegrationService.createOrder(\n                'paypalcommercealternativemethodscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.paypalcommerceratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = paypalSdk.Legal({\n            fundingSource: paypalSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.paypalcommerceratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, POLLING_INTERVAL);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += POLLING_INTERVAL;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                'paypalcommercealternativemethods',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < MAX_POLLING_TIME) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommerceratepay: this.paypalcommerceratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PaypalCommerceRatepayPaymentStrategy from './paypal-commerce-ratepay-payment-strategy';\n\nconst createPaypalCommerceRatepayPaymentStrategy: PaymentStrategyFactory<\n    PaypalCommerceRatepayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PaypalCommerceRatepayPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createPaypalCommerceRatepayPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods', id: 'ratepay' },\n]);\n","import {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isPayPalFastlaneCustomer,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\n\nimport { WithPayPalCommerceFastlanePaymentInitializeOptions } from './paypal-commerce-fastlane-payment-initialize-options';\n\nexport default class PaypalCommerceFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        // TODO: remove paypalcommerceacceleratedcheckout if it was removed on checkout js side\n        const { methodId, paypalcommercefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane.onInit || typeof paypalcommercefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !paypalcommercefastlane.onChange ||\n            typeof paypalcommercefastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isDeveloperModeApplicable } = paymentMethod.initializationData || {};\n\n        const paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n            paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            paypalcommercefastlane.styles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        paypalcommercefastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        paypalcommercefastlane.onChange(() => this.handlePayPalStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(methodId, {\n            cartId,\n        });\n\n        const paymentPayload =\n            paymentData && isVaultedInstrument(paymentData)\n                ? this.prepareVaultedInstrumentPaymentPayload(methodId, orderId, paymentData)\n                : await this.preparePaymentPayload(methodId, orderId, paymentData);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n            paymentPayload,\n        );\n\n        // TODO: we should probably update this method with removeStorageSessionId for better reading experience\n        this.paypalCommerceFastlaneUtils.updateStorageSessionId(true);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.paypalCommerceFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            this.paypalCommerceFastlaneUtils.updateStorageSessionId(\n                isAuthenticationFlowCanceled,\n                cart.id,\n            );\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * PayPal Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument,\n    ): Payment<PayPalFastlanePaymentFormattedPayload> {\n        const { instrumentId } = paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: paypalOrderId,\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.paypalCommerceFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: paypalOrderId,\n                        token: id,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * PayPal Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument = this.paypalCommerceFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                selectedCard,\n            )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\n\nimport PayPalCommerceFastlanePaymentStrategy from './paypal-commerce-fastlane-payment-strategy';\n\nconst createPayPalCommerceFastlanePaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceFastlanePaymentStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // PayPal Fastlane relates to 'paypalcommerceacceleratedcheckout' method id\n]);\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected paymentIntegrationService: PaymentIntegrationService,\n        private threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this.threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n\n        const state = this.paymentIntegrationService.getState();\n\n        if (state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE) {\n            await this.paymentIntegrationService.submitOrder(\n                {\n                    ...payload,\n                    payment: { methodId },\n                },\n                options,\n            );\n\n            return Promise.resolve();\n        }\n\n        if (state.getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this.threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalProPaymentStrategy from './paypal-pro-payment-strategy';\n\nconst createPayPalProPaymentStrategy: CheckoutButtonStrategyFactory<PaypalProPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PaypalProPaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n\nexport default toResolvableModule(createPayPalProPaymentStrategy, [{ id: 'paypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private _formPoster: FormPoster,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData } = payment;\n\n        if (!paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (this._isThreeDSTwoExperimentOn()) {\n            const newPaymentData = {\n                ...paymentData,\n                browser_info: getBrowserInfo(),\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error: Error) => {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                let payload;\n\n                if (this._isThreeDSTwoExperimentOn() && !error.body.three_ds_result.merchant_data) {\n                    payload = {\n                        creq: error.body.three_ds_result.payer_auth_request,\n                    };\n                } else {\n                    payload = {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    };\n                }\n\n                this._formPoster.postForm(\n                    error.body.three_ds_result.acs_url,\n                    payload,\n                    undefined,\n                    '_top',\n                );\n            });\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return super.finalize();\n    }\n\n    private _isThreeDSTwoExperimentOn(): boolean {\n        return (\n            this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings\n                .features['INT-4994.Opayo_3DS2'] === true\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SagePayPaymentStrategy from './sage-pay-payment-strategy';\n\nconst createSagePayPaymentStrategy: PaymentStrategyFactory<SagePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new SagePayPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createSagePayPaymentStrategy, [{ id: 'sagepay' }]);\n","import { ExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/external-integration';\n\nexport default class SezzlePaymentStrategy extends ExternalPaymentStrategy {\n    protected redirectUrl(url: string): void {\n        window.location.replace(url);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SezzlePaymentStrategy from './sezzle-payment-strategy';\n\nconst createSezzlePaymentStrategy: PaymentStrategyFactory<SezzlePaymentStrategy> = (\n    paymentIntegrationService,\n) => new SezzlePaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createSezzlePaymentStrategy, [{ id: 'sezzle' }]);\n","import { fromEvent, merge, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport {\n    BillingAddress,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SquareIntent } from './enums';\nimport SquareV2PaymentInitializeOptions from './squarev2-payment-initialize-options';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\nimport {\n    BillingContact,\n    Card,\n    CardInputEvent,\n    CardInputEventTypes,\n    ChargeVerifyBuyerDetails,\n    Payments,\n    SqEvent,\n    StoreVerifyBuyerDetails,\n} from './types';\n\nexport interface SquareV2PaymentProcessorOptions {\n    applicationId: string;\n    locationId?: string;\n    testMode?: boolean;\n}\n\nexport default class SquareV2PaymentProcessor {\n    private _payments?: Payments;\n    private _card?: Card;\n    private _formValidationSubscription?: Subscription;\n\n    constructor(\n        private _scriptLoader: SquareV2ScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize({\n        testMode,\n        applicationId,\n        locationId,\n    }: SquareV2PaymentProcessorOptions): Promise<void> {\n        const square = await this._scriptLoader.load(testMode);\n\n        this._payments = square.payments(applicationId, locationId);\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this._formValidationSubscription) {\n            this._formValidationSubscription.unsubscribe();\n        }\n\n        if (this._card) {\n            await this._card.destroy();\n        }\n\n        this._formValidationSubscription = undefined;\n        this._card = undefined;\n        this._payments = undefined;\n    }\n\n    async initializeCard({\n        containerId,\n        style,\n        onValidationChange,\n    }: SquareV2PaymentInitializeOptions): Promise<void> {\n        const { postalCode } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        this._card = await this._getPayments().card();\n        await this._card.attach(`#${containerId}`);\n\n        try {\n            await this._card.configure({ postalCode, style });\n        } catch (_error) {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        if (onValidationChange) {\n            this._formValidationSubscription = this._subscribeToFormValidation(\n                this._card,\n                onValidationChange,\n            );\n        }\n    }\n\n    async tokenize(): Promise<string> {\n        const result = await this._getCard().tokenize();\n\n        if (result.status !== 'OK' || !result.token) {\n            let errorMessage = `Tokenization failed with status: ${result.status}`;\n\n            if (result.errors) {\n                errorMessage += ` and errors: ${JSON.stringify(result.errors)}`;\n            }\n\n            throw new PaymentExecuteError(\n                'payment.errors.card_error',\n                'SquareV2TokenizationError',\n                errorMessage,\n            );\n        }\n\n        return result.token;\n    }\n\n    async verifyBuyer(token: string, intent: SquareIntent): Promise<string> {\n        return intent === SquareIntent.CHARGE\n            ? this._chargeVerifyBuyer(token)\n            : this._storeVerifyBuyer(token);\n    }\n\n    private _getPayments(): Payments {\n        return guard(\n            this._payments,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _subscribeToFormValidation(\n        card: Card,\n        observer: Required<SquareV2PaymentInitializeOptions>['onValidationChange'],\n    ): Subscription {\n        const blacklist = ['cardNumber', 'cvv'];\n        const invalidFields = new Set<string>(blacklist);\n        const eventObservables = [\n            'focusClassAdded',\n            'focusClassRemoved',\n            'errorClassAdded',\n            'errorClassRemoved',\n            'cardBrandChanged',\n            'postalCodeChanged',\n        ].map((eventType) => fromEvent(card, eventType as CardInputEventTypes));\n\n        return merge(...eventObservables)\n            .pipe(\n                map((event: SqEvent<CardInputEvent>): boolean => {\n                    const {\n                        detail: {\n                            field,\n                            currentState: { isCompletelyValid },\n                        },\n                    } = event;\n\n                    if (blacklist.includes(field)) {\n                        invalidFields[isCompletelyValid ? 'delete' : 'add'](field);\n                    }\n\n                    return invalidFields.size === 0;\n                }),\n                distinctUntilChanged(),\n            )\n            .subscribe(observer);\n    }\n\n    private _getCard(): Card {\n        return guard(\n            this._card,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _mapToSquareBillingContact({\n        firstName: givenName,\n        lastName: familyName,\n        address1,\n        address2,\n        city,\n        stateOrProvinceCode: state,\n        postalCode,\n        countryCode,\n        email,\n        phone,\n    }: BillingAddress): BillingContact {\n        return {\n            givenName,\n            familyName,\n            addressLines: [address1, address2],\n            city,\n            state,\n            postalCode,\n            countryCode,\n            email,\n            phone,\n        };\n    }\n\n    private async _chargeVerifyBuyer(token: string): Promise<string> {\n        const { getCheckoutOrThrow, getBillingAddressOrThrow } =\n            this._paymentIntegrationService.getState();\n        const { outstandingBalance, cart } = getCheckoutOrThrow();\n\n        const details: ChargeVerifyBuyerDetails = {\n            amount: outstandingBalance.toString(),\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            currencyCode: cart.currency.code,\n            intent: SquareIntent.CHARGE,\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n\n    private async _storeVerifyBuyer(token: string): Promise<string> {\n        const { getBillingAddressOrThrow } = this._paymentIntegrationService.getState();\n\n        const details: StoreVerifyBuyerDetails = {\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            intent: SquareIntent.STORE,\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport assertSquareV2Window from './is-squarev2-window';\nimport { Square } from './types';\n\nexport enum SquareV2WebPaymentsSdkEnv {\n    LIVE = 'https://web.squarecdn.com/v1/square.js',\n    SANDBOX = 'https://sandbox.web.squarecdn.com/v1/square.js',\n}\n\nexport default class SquareV2ScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async load(testMode = false): Promise<Square> {\n        await this._scriptLoader.loadScript(\n            testMode ? SquareV2WebPaymentsSdkEnv.SANDBOX : SquareV2WebPaymentsSdkEnv.LIVE,\n        );\n\n        assertSquareV2Window(window);\n\n        return window.Square;\n    }\n}\n","import {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SquareIntent } from './enums';\nimport { WithSquareV2PaymentInitializeOptions } from './squarev2-payment-initialize-options';\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport {\n    SquareCreditCardTokens,\n    SquareFormattedVaultedInstrument,\n    SquareInitializationData,\n    SquarePaymentMethodInitializationData,\n} from './types';\n\nexport default class SquareV2PaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _squareV2PaymentProcessor: SquareV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithSquareV2PaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.squarev2?.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { methodId, squarev2 } = options;\n        const {\n            config: { testMode },\n            initializationData,\n        } = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<SquarePaymentMethodInitializationData>(methodId);\n        const { applicationId, locationId } = initializationData || {};\n\n        if (!applicationId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this._squareV2PaymentProcessor.initialize({\n            applicationId,\n            locationId,\n            testMode,\n        });\n        await this._squareV2PaymentProcessor.initializeCard(squarev2);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const submitPaymentPayload =\n            paymentData && isVaultedInstrument(paymentData)\n                ? await this._getVaultedInstrumentPayload(methodId, paymentData)\n                : await this._getCardPayload(shouldSaveInstrument);\n\n        await this._paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload: {\n                    ...submitPaymentPayload,\n                    vault_payment_instrument: shouldSaveInstrument || false,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument || false,\n                },\n            },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return this._squareV2PaymentProcessor.deinitialize();\n    }\n\n    private _shouldVerify(): boolean {\n        const { features } = this._paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PROJECT-3828.add_3ds_support_on_squarev2'];\n    }\n\n    private async _getCardPayload(shouldSaveInstrument?: boolean) {\n        const cardTokenizationResult = await this._squareV2PaymentProcessor.tokenize();\n\n        if (!this._shouldVerify()) {\n            return {\n                credit_card_token: {\n                    token: cardTokenizationResult,\n                },\n            };\n        }\n\n        let tokenData: SquareCreditCardTokens = {\n            nonce: cardTokenizationResult,\n            token: await this._squareV2PaymentProcessor.verifyBuyer(\n                cardTokenizationResult,\n                SquareIntent.CHARGE,\n            ),\n        };\n\n        if (shouldSaveInstrument) {\n            // INFO: additional 'tokenize' is required to verify and save the card\n            // for each 'verifyBuyer' we need to generate new token\n            const tokenForSavingCard = await this._squareV2PaymentProcessor.tokenize();\n\n            tokenData = {\n                ...tokenData,\n                store_card_nonce: tokenForSavingCard,\n                store_card_token: await this._squareV2PaymentProcessor.verifyBuyer(\n                    tokenForSavingCard,\n                    SquareIntent.STORE,\n                ),\n            };\n        }\n\n        return {\n            credit_card_token: {\n                token: JSON.stringify(tokenData),\n            },\n        };\n    }\n\n    private async _getVaultedInstrumentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<SquareFormattedVaultedInstrument> {\n        const { instrumentId } = paymentData;\n        const verificationToken = this._shouldVerify()\n            ? await this._squareV2PaymentProcessor.verifyBuyer(\n                  await this._getSquareCardIdOrThrow(methodId, instrumentId),\n                  SquareIntent.CHARGE,\n              )\n            : undefined;\n\n        return {\n            bigpay_token: {\n                token: instrumentId,\n                ...(verificationToken && { three_d_secure: { token: verificationToken } }),\n            },\n        };\n    }\n\n    private async _getSquareCardIdOrThrow(methodId: string, instrumentId: string): Promise<string> {\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId, {\n            params: { method: methodId, bigpayToken: instrumentId },\n        });\n\n        const { initializationData } =\n            state.getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n        const { cardId } = initializationData || {};\n\n        if (!cardId) {\n            throw new PaymentArgumentInvalidError(['cardId']);\n        }\n\n        return cardId;\n    }\n}\n","interface BaseElementOptions {\n    /**\n     * Customize the appearance of an element using CSS properties passed in a [Style](https://stripe.com/docs/js/appendix/style) object,\n     * which consists of CSS properties nested under objects for each variant.\n     */\n    style?: StripeElementStyle;\n\n    /**\n     * Set custom class names on the container DOM element when the Stripe element is in a particular state.\n     */\n    classes?: StripeElementClasses;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport interface CreatePaymentMethodCardData extends PaymentMethodCreateParams {\n    card?: StripeElement;\n}\n\nexport interface CreatePaymentMethodIdealData extends PaymentMethodCreateParams {\n    ideal?: StripeElement;\n}\n\nexport interface CreatePaymentMethodSepaData extends PaymentMethodCreateParams {\n    sepa_debit?: StripeElement;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * The PaymentMethod object\n */\nexport interface PaymentMethod {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value.\n     * It contains additional information specific to the PaymentMethod type.\n     */\n    type: string;\n}\n\nexport interface PaymentMethodCreateParams {\n    /**\n     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n     */\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n\n    /**\n     * A human-readable code for the error obtained\n     */\n    code?: string;\n}\n\n/**\n * CSS properties supported by Stripe.js.\n */\ninterface StripeElementCSSProperties {\n    /**\n     * The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n     *\n     * This property works best with the `::selection` pseudo-class.\n     * In other cases, consider setting the background color on the element's container instaed.\n     */\n    backgroundColor?: string;\n\n    /**\n     * The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n     */\n    color?: string;\n\n    /**\n     * The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n     */\n    fontFamily?: string;\n\n    /**\n     * The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n     */\n    fontSize?: string;\n\n    /**\n     * The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smoothing) CSS property.\n     */\n    fontSmoothing?: string;\n\n    /**\n     * The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n     */\n    fontStyle?: string;\n\n    /**\n     * The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n     */\n    fontVariant?: string;\n\n    /**\n     * The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n     */\n    fontWeight?: string;\n\n    /**\n     * A custom property, used to set the color of the icons that are rendered in an element.\n     */\n    iconColor?: string;\n\n    /**\n     * The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n     *\n     * To avoid cursors being rendered inconsistently across browsers, consider using a padding on the element's container instead.\n     */\n    lineHeight?: string;\n\n    /**\n     * The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n     *\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    textAlign?: string;\n\n    /**\n     * The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n     *\n     * Available for the `idealBank` element.\n     * Accepts integer `px` values.\n     */\n    padding?: string;\n\n    /**\n     * The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n     */\n    textDecoration?: string;\n\n    /**\n     * The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n     */\n    textShadow?: string;\n\n    /**\n     * The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n     */\n    textTransform?: string;\n}\n\ninterface StripeElementStyleVariant extends StripeElementCSSProperties {\n    ':hover'?: StripeElementCSSProperties;\n\n    ':focus'?: StripeElementCSSProperties;\n\n    '::placeholder'?: StripeElementCSSProperties;\n\n    '::selection'?: StripeElementCSSProperties;\n\n    ':-webkit-autofill'?: StripeElementCSSProperties;\n\n    /**\n     * Available for all elements except the `paymentRequestButton` element\n     */\n    ':disabled'?: StripeElementCSSProperties;\n\n    /**\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    '::-ms-clear'?: StripeElementCSSProperties & { display: string };\n}\n\nexport interface CardElementOptions extends BaseElementOptions {\n    /**\n     * A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}).\n     * Note that sensitive card information (card number, CVC, and expiration date)\n     * cannot be pre-filled\n     */\n    value?: string;\n\n    /**\n     * Hide the postal code field. Default is false. If you are already collecting a\n     * full billing address or postal code elsewhere, set this to true.\n     */\n    hidePostalCode?: boolean;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n\n    /*\n     * Hides the icon in the Element, Default is false\n     */\n    hideIcon?: boolean;\n}\n\ninterface BaseIndividualElementOptions extends BaseElementOptions {\n    containerId: string;\n}\n\nexport interface CardNumberElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n\n    showIcon?: boolean;\n    /**\n     * Appearance of the icon in the Element. Either `solid` or `default`\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface CardExpiryElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface CardCvcElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface IbanElementOptions extends BaseElementOptions {\n    /**\n     * Specify the list of countries or country-groups whose IBANs you want to allow.\n     * Must be ['SEPA'].\n     */\n    supportedCountries?: string[];\n\n    /**\n     * Customize the country and format of the placeholder IBAN. Default is DE.\n     */\n    placeholderCountry?: string;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IdealElementOptions extends BaseElementOptions {\n    value?: string;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n}\n\nexport interface ZipCodeElementOptions {\n    containerId: string;\n}\n\nexport enum IconStyle {\n    Solid = 'solid',\n    Default = 'default',\n}\n\nexport interface StripeElementStyle {\n    /**\n     * Base variant—all other variants inherit from these styles.\n     */\n    base?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has valid input.\n     */\n    complete?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has no customer input.\n     */\n    empty?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has invalid input.\n     */\n    invalid?: StripeElementStyleVariant;\n}\n\nexport interface StripeElementClasses {\n    /**\n     * The base class applied to the container. Defaults to StripeElement.\n     */\n    base?: string;\n\n    /**\n     * The class name to apply when the Element is complete. Defaults to StripeElement--complete.\n     */\n    complete?: string;\n\n    /**\n     * The class name to apply when the Element is empty. Defaults to StripeElement--empty.\n     */\n    empty?: string;\n\n    /**\n     * The class name to apply when the Element is focused. Defaults to StripeElement--focus.\n     */\n    focus?: string;\n\n    /**\n     * The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.\n     */\n    invalid?: string;\n\n    /**\n     * The class name to apply when the Element has its value autofilled by the browser\n     * (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.\n     */\n    webkitAutoFill?: string;\n}\n\nexport interface StripeAddress {\n    /**\n     * City, district, suburb, town, or village.\n     */\n    city?: string;\n\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     */\n    country?: string;\n\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     */\n    line1: string;\n\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     */\n    line2?: string;\n\n    /**\n     * ZIP or postal code.\n     */\n    postal_code?: string;\n\n    /**\n     * State, county, province, or region.\n     */\n    state?: string;\n}\n\nexport interface StripeBillingDetails {\n    /**\n     * Billing address.\n     */\n    address?: StripeAddress;\n\n    /**\n     * Email address.\n     */\n    email?: string;\n\n    /**\n     * Full name.\n     */\n    name?: string;\n\n    /**\n     * Billing phone number (including extension).\n     */\n    phone?: string;\n}\n\nexport interface StripeShippingAddress {\n    /**\n     * Shipping Address\n     */\n    address: StripeAddress;\n\n    /**\n     * Recipient name\n     */\n    name: string;\n\n    /**\n     * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.\n     */\n    carrier?: string;\n\n    /**\n     * Recipient phone (including extension).\n     */\n    phone?: string;\n\n    /**\n     * The tracking number for a physical product, obtained from the delivery service.\n     * If multiple tracking numbers were generated for this purchase, please separate them with commas.\n     */\n    tracking_number?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmAlipayPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmAlipayPaymentData {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmCardPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmCardPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodCardData;\n\n    /*\n     * The [shipping details](https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n     *\n     * @recommended\n     */\n    shipping?: StripeShippingAddress;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n\n    /**\n     * Indicates that you intend to make future payments with this PaymentIntent's payment method.\n     *\n     * If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n     *\n     * Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n     */\n    setup_future_usage?: 'off_session' | 'on_session' | null;\n}\n\n/**\n * Data to be sent with a `stripe.confirmIdealPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmIdealPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodIdealData;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmSEPAPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmSepaPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodSepaData;\n}\n\nexport type StripeConfirmPaymentData =\n    | StripeConfirmAlipayPaymentData\n    | StripeConfirmCardPaymentData\n    | StripeConfirmIdealPaymentData\n    | StripeConfirmSepaPaymentData\n    | undefined;\n\nexport type StripeElementOptions =\n    | CardElementOptions\n    | CardExpiryElementOptions\n    | CardNumberElementOptions\n    | CardCvcElementOptions\n    | IdealElementOptions\n    | IbanElementOptions\n    | ZipCodeElementOptions;\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates a `AlipayElement` | `CardElement` | `CardCvcElement` |`CardExpiryElement` | `CardExpiryElement` | `CardNumberElement` | `IdealBankElement` | `IbanElement`.\n     */\n    create(elementType: StripeElementType, options?: StripeElementOptions): StripeElement;\n\n    /**\n     * Looks up a previously created `Element` by its type.\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type CustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n}\n\nexport interface StripeConfirmPaymentOptions {\n    /**\n     * Set this to false if you want to [manually handle the authorization redirect](https://stripe.com/docs/payments/ideal#handle-redirect). Default is true.\n     */\n    handleActions?: boolean;\n}\n\nexport interface StripeV3Client {\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options?: StripeElementsOptions): StripeElements;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_alipay_payment\n     *\n     * Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents) with data you provide, and it will automatically\n     * redirect the customer to the authorize the transaction. Once authorization is complete, the customer will be redirected\n     * back to your specified `return_url`. When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * If you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmAlipayPayment` by default, will trigger a redirect when successful. If there is an error, or when handling\n     * `next_actions` manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmAlipayPayment` may take several seconds to complete. During that time, you should disable your\n     * form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should\n     * be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmAlipayPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmAlipayPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_card_payment\n     *\n     * Use `stripe.confirmCardPayment` when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents)\n     * with `data` you provide and carry out 3DS or other next actions if they are required.\n     *\n     * If you are using [Dynamic 3D Secure](https://stripe.com/docs/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will\n     * trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmCardPayment` will return a Promise which resolves with a result object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     *\n     * Additionally, `stripe.confirmCardPayment may trigger` a [3D Secure](https://stripe.com/docs/payments/3d-secure) authentication\n     * challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like\n     * screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out\n     * after this method completes.\n     *\n     */\n    confirmCardPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmCardPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_ideal_payment\n     *\n     * Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](https://stripe.com/docs/payments/ideal)\n     * flow when the customer submits your payment form. When called, it will confirm the `PaymentIntent` with `data` you\n     * provide, and it will automatically redirect the customer to the authorize the transaction.\n     * Once authorization is complete, the customer will be redirected back to your specified `return_url`.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * By default, `stripe.confirmIdealPayment` will trigger a redirect when successful. If there is an error, or when handling\n     * next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result`\n     * object. This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmIdealPayment` may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmIdealPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmIdealPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     *\n     * Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](https://stripe.com/docs/payments/sepa-debit)\n     * with Payment Methods flow when the customer submits your payment form. When called, it will confirm the\n     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) with `data` you provide. Note that there are some additional\n     * requirements to this flow that are not covered in this reference. Refer to our [integration guide](https://stripe.com/docs/payments/sepa-debit\n     * for more details.\n     *\n     * When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent,\n     * this method can automatically create and attach a new PaymentMethod for you. If you have already attached a\n     * [PaymentMethod](https://stripe.com/docs/api/payment_methods) you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_sepa_debit_payment\n     */\n    confirmSepaDebitPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n         */\n        data?: StripeConfirmSepaPaymentData,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * Use stripe.createPaymentMethod to convert payment information collected by elements into a PaymentMethod\n     * object that you safely pass to your server to use in an API call.\n     *\n     * @docs https://stripe.com/docs/js/payment_methods/create_payment_method\n     *\n     * @param type: String, The type of the PaymentMethod to create. Refer to the PaymentMethod API for all possible values.\n     * @param card: StripeElement, A card or cardNumber Element.\n     * @param billing_details: StripeBillingDetails, Billing information associated with the PaymentMethod that\n     * may be used or required by particular types of payment methods.\n     */\n    createPaymentMethod(\n        params: CreatePaymentMethodParams,\n    ): Promise<{ paymentMethod?: PaymentMethod; error?: StripeError }>;\n\n    /*\n     * Use stripe.handleCardAction in the Payment Intents API manual confirmation flow to handle a PaymentIntent\n     * with the requires_action status. It will throw an error if the PaymentIntent has a different status.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/handle_card_action\n     *\n     * @param paymentIntentClientSecret: String, The client secret of the PaymentIntent to handle.\n     */\n    handleCardAction(\n        paymentIntentClientSecret: string,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n}\n\nexport interface CreatePaymentMethodParams {\n    type: StripePaymentMethodType;\n    card: StripeElement;\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeHostWindow extends Window {\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeV3Client;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    CreditCard = 'card',\n    IDEAL = 'idealBank',\n    Sepa = 'iban',\n}\n\nexport enum StripePaymentMethodType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    IDEAL = 'ideal',\n    Sepa = 'sepa_debit',\n}\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\nexport interface StripeCardElements {\n    [index: number]: StripeElement;\n}\n\nexport interface IndividualCardElementOptions {\n    cardCvcElementOptions: CardCvcElementOptions;\n    cardExpiryElementOptions: CardExpiryElementOptions;\n    cardNumberElementOptions: CardNumberElementOptions;\n    zipCodeElementOptions?: ZipCodeElementOptions;\n}\n\nexport interface StripeV3PaymentMethod extends PaymentMethod {\n    initializationData: StripeV3InitializationData;\n}\n\nexport interface StripeV3InitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    useIndividualCardFields: boolean;\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport enum StripeV3ErrorType {\n    AuthFailure = 'auth_failure',\n}\n\nexport default class StripeV3Error extends StandardError {\n    subtype: string;\n\n    constructor(subtype: StripeV3ErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'stripev3_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: StripeV3ErrorType) {\n    switch (type) {\n        case StripeV3ErrorType.AuthFailure:\n            return `User did not authenticate`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport type { Square } from './types';\n\ninterface SquareV2HostWindow extends Window {\n    Square: Square;\n}\n\nfunction isSquareV2Window(window: Window): window is SquareV2HostWindow {\n    return 'Square' in window;\n}\n\nexport default function assertSquareV2Window(window: Window): asserts window is SquareV2HostWindow {\n    if (!isSquareV2Window(window)) {\n        throw new PaymentMethodClientUnavailableError();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    NotImplementedError,\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport SquareV2PaymentStrategy from './squarev2-payment-strategy';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\n\nconst createSquareV2PaymentStrategy: PaymentStrategyFactory<SquareV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const useV1 = !paymentIntegrationService.getState().getStoreConfig()?.checkoutSettings.features[\n        'PROJECT-4113.squarev2_web_payments_sdk'\n    ];\n\n    if (useV1) {\n        throw new NotImplementedError();\n    }\n\n    return new SquareV2PaymentStrategy(\n        paymentIntegrationService,\n        new SquareV2PaymentProcessor(\n            new SquareV2ScriptLoader(getScriptLoader()),\n            paymentIntegrationService,\n        ),\n    );\n};\n\nexport default toResolvableModule(createSquareV2PaymentStrategy, [{ id: 'squarev2' }]);\n","import { IndividualCardElementOptions } from './stripev3';\n\nexport default function isIndividualCardElementOptions(\n    individualCardElementOptions: any,\n): individualCardElementOptions is IndividualCardElementOptions {\n    return (\n        individualCardElementOptions !== null &&\n        typeof individualCardElementOptions === 'object' &&\n        'cardNumberElementOptions' in individualCardElementOptions &&\n        'cardCvcElementOptions' in individualCardElementOptions &&\n        'cardExpiryElementOptions' in individualCardElementOptions &&\n        typeof individualCardElementOptions.cardNumberElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardCvcElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardExpiryElementOptions !== 'undefined'\n    );\n}\n","import { includes, isEmpty, omitBy, some } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    Customer,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isBillingAddressLike,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StripeV3FormattedPayload,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isIndividualCardElementOptions from './is-individual-card-element-options';\nimport {\n    PaymentIntent,\n    StripeAdditionalAction,\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElements,\n    StripeConfirmIdealPaymentData,\n    StripeConfirmPaymentData,\n    StripeConfirmSepaPaymentData,\n    StripeElement,\n    StripeElementOptions,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    PaymentMethod as StripePaymentMethod,\n    StripePaymentMethodType,\n    StripeV3Client,\n    StripeV3PaymentMethod,\n} from './stripev3';\nimport StripeV3Error, { StripeV3ErrorType } from './stripev3-error';\nimport StripeV3PaymentInitializeOptions, {\n    WithStripeV3PaymentInitializeOptions,\n} from './stripev3-initialize-options';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst APM_REDIRECT = [StripeElementType.Alipay, StripeElementType.IDEAL];\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: StripeV3PaymentInitializeOptions;\n    private stripeV3Client?: StripeV3Client;\n    private stripeElements?: StripeElements;\n    private stripeElement?: StripeElement;\n    private stripeCardElements?: StripeCardElements;\n    private useIndividualCardFields?: boolean;\n    private hostedForm?: HostedForm;\n    private isDeinitialize?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeV3ScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions & WithStripeV3PaymentInitializeOptions) {\n        const { stripev3, methodId, gatewayId } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = stripev3;\n        this.isDeinitialize = false;\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        const {\n            initializationData: {\n                stripePublishableKey,\n                stripeConnectedAccount,\n                useIndividualCardFields,\n            },\n        } = paymentMethod as StripeV3PaymentMethod;\n\n        const form = this.getInitializeOptions().form;\n\n        this.useIndividualCardFields = useIndividualCardFields;\n        this.stripeV3Client = await this.loadStripeJs(stripePublishableKey, stripeConnectedAccount);\n\n        if (\n            this.isCreditCard(methodId) &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId) &&\n            form\n        ) {\n            this.hostedForm = await this.mountCardVerificationFields(form);\n        } else {\n            this.stripeElement = await this.mountCardFields(methodId);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        let formattedPayload: StripeV3FormattedPayload;\n        let stripeError: StripeError | undefined;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, gatewayId, methodId } = payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const shouldSubmitOrderBeforeLoadingAPM = includes(APM_REDIRECT, methodId);\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        try {\n            if (shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            if (gatewayId) {\n                await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                    params: { method: methodId },\n                });\n            }\n\n            const state = this.paymentIntegrationService.getState();\n\n            if (isVaultedInstrument(paymentData)) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n\n                const { instrumentId } = paymentData;\n                const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n                const clientToken = paymentMethod.clientToken;\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return await this.executeWithVaulted(\n                    payment,\n                    instrumentId,\n                    shouldSetAsDefaultInstrument,\n                    clientToken,\n                );\n            }\n\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n            const result = await this.confirmStripePayment(paymentMethod);\n            const { clientToken, method } = paymentMethod;\n            const { id: token } = result.paymentIntent ?? result.paymentMethod ?? { id: '' };\n\n            stripeError = result.error;\n\n            formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: false,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            };\n\n            if (method === StripeElementType.CreditCard) {\n                formattedPayload.client_token = clientToken;\n            }\n\n            if (!shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this.processAdditionalAction(\n                this.handleEmptyPaymentIntentError(error, stripeError),\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        this.isDeinitialize = true;\n        this.unmountElement();\n\n        return Promise.resolve();\n    }\n\n    private buildPaymentPayload(\n        methodId: string,\n        formattedPayload: StripeV3FormattedPayload,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n    ): Payment {\n        const paymentData = shouldSetAsDefaultInstrument\n            ? {\n                  formattedPayload: {\n                      ...formattedPayload,\n                      set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                  },\n              }\n            : { formattedPayload };\n\n        return { methodId, paymentData };\n    }\n\n    private isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private isAuthError(stripeError: StripeError | undefined) {\n        return stripeError?.code === 'payment_intent_authentication_failure';\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === StripePaymentMethodType.CreditCard;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private async confirmStripePayment(paymentMethod: PaymentMethod): Promise<{\n        paymentIntent?: PaymentIntent | undefined;\n        paymentMethod?: StripePaymentMethod | undefined;\n        error?: StripeError | undefined;\n    }> {\n        const { clientToken: clientSecret, method, returnUrl } = paymentMethod;\n\n        if (!clientSecret) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        switch (method) {\n            case StripeElementType.Alipay:\n                return this.getStripeJs().confirmAlipayPayment(\n                    clientSecret,\n                    { return_url: returnUrl },\n                    { handleActions: false },\n                );\n\n            case StripeElementType.IDEAL: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.IDEAL, returnUrl);\n\n                return this.getStripeJs().confirmIdealPayment(clientSecret, data, {\n                    handleActions: false,\n                });\n            }\n\n            case StripeElementType.Sepa: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.Sepa);\n\n                return this.getStripeJs().confirmSepaDebitPayment(clientSecret, data);\n            }\n\n            default: {\n                const card = this.useIndividualCardFields\n                    ? this.getStripeCardElements()[0]\n                    : this.getStripeElement();\n                const billingDetails = this.mapStripeBillingDetails(\n                    this.paymentIntegrationService.getState().getBillingAddress(),\n                    this.paymentIntegrationService.getState().getCustomer(),\n                );\n\n                return this.getStripeJs().createPaymentMethod({\n                    type: StripePaymentMethodType.CreditCard,\n                    card,\n                    billing_details: billingDetails,\n                });\n            }\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n        clientToken: string,\n    ): Promise<any> {\n        const formattedPayload = {\n            bigpay_token: { token },\n            confirm: true,\n            client_token: clientToken,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId) &&\n            this.hostedForm\n        ) {\n            const form = this.hostedForm;\n\n            if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n                payment.paymentData = {\n                    ...payment.paymentData,\n                    instrumentId: JSON.stringify({\n                        token: payment.paymentData?.instrumentId || '',\n                        client_token: clientToken,\n                    }),\n                };\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        const paymentPayload = this.buildPaymentPayload(\n            payment.methodId,\n            formattedPayload,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private getInitializeOptions(): StripeV3PaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private getStripeCardElements(): StripeCardElements {\n        if (!this.stripeCardElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeCardElements;\n    }\n\n    private getStripeElement(): StripeElement {\n        if (!this.stripeElement) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeElement;\n    }\n\n    private getStripeJs(): StripeV3Client {\n        if (!this.stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeV3Client;\n    }\n\n    private handleEmptyPaymentIntentError(error: Error, stripeError: StripeError | undefined) {\n        if (!isRequestError(error)) {\n            return error;\n        }\n\n        return some(error.body.errors, { code: 'required_field' }) && stripeError\n            ? new Error(stripeError.message)\n            : error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeV3Client> {\n        if (this.stripeV3Client) {\n            return Promise.resolve(this.stripeV3Client);\n        }\n\n        return this.scriptLoader.load(\n            stripePublishableKey,\n            stripeConnectedAccount,\n            this.paymentIntegrationService.getState().getLocale(),\n        );\n    }\n\n    private mapStripeAddress(address?: Address): StripeAddress {\n        if (address) {\n            const {\n                city,\n                countryCode: country,\n                address1: line1,\n                address2: line2,\n                postalCode,\n                stateOrProvinceCode: state,\n            } = address;\n\n            return { city, country, line1, line2, postal_code: postalCode, state };\n        }\n\n        return { line1: '' };\n    }\n\n    private mapStripeBillingDetails(\n        billingAddress?: BillingAddress,\n        customer?: Customer,\n    ): StripeBillingDetails {\n        const { firstName, lastName } = billingAddress ||\n            customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n        const { options } = this.getInitializeOptions();\n\n        if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n            const { zipCodeElementOptions } = options;\n\n            if (zipCodeElementOptions) {\n                const postalCode = document.getElementById(zipCodeElementOptions.containerId)\n                    ? (\n                          document.getElementById(\n                              zipCodeElementOptions.containerId,\n                          ) as HTMLInputElement\n                      ).value\n                    : '';\n\n                if (postalCode && billingAddress) {\n                    billingAddress = { ...billingAddress, postalCode };\n                }\n            }\n        }\n\n        const address = {\n            address: this.mapStripeAddress(billingAddress),\n        };\n\n        if (customer && customer.addresses[0] && isBillingAddressLike(customer.addresses[0])) {\n            const customerAddress = customer.addresses[0];\n            const { email } = customer;\n            const { phone } = customerAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        if (billingAddress) {\n            const { email, phone } = billingAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        return { ...address, name };\n    }\n\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.IDEAL,\n        returnUrl?: string,\n    ): StripeConfirmIdealPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.Sepa,\n    ): StripeConfirmSepaPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType,\n        returnUrl?: string,\n    ): StripeConfirmPaymentData {\n        const customer = this.paymentIntegrationService.getState().getCustomer();\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n\n        const result: Partial<StripeConfirmPaymentData> = {\n            payment_method: {\n                [stripePaymentMethodType]: this.getStripeElement(),\n                billing_details: this.mapStripeBillingDetails(billingAddress, customer),\n            },\n        };\n\n        if (stripePaymentMethodType === StripePaymentMethodType.IDEAL) {\n            return { ...result, return_url: returnUrl };\n        }\n\n        return result;\n    }\n\n    private mountCardFields(methodId: string): Promise<StripeElement> {\n        const { options, containerId } = this.getInitializeOptions();\n\n        let stripeElement: StripeElement;\n\n        return new Promise((resolve, reject) => {\n            if (!this.stripeElements) {\n                this.stripeElements = this.getStripeJs().elements();\n            }\n\n            switch (methodId) {\n                case StripeElementType.CreditCard:\n                    if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n                        const {\n                            cardNumberElementOptions,\n                            cardExpiryElementOptions,\n                            cardCvcElementOptions,\n                        } = options;\n\n                        const cardNumberElement =\n                            this.stripeElements.getElement(StripeElementType.CardNumber) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardNumber,\n                                cardNumberElementOptions,\n                            );\n                        const cardExpiryElement =\n                            this.stripeElements.getElement(StripeElementType.CardExpiry) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardExpiry,\n                                cardExpiryElementOptions,\n                            );\n                        const cardCvcElement =\n                            this.stripeElements.getElement(StripeElementType.CardCvc) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardCvc,\n                                cardCvcElementOptions,\n                            );\n\n                        this.stripeCardElements = [\n                            cardNumberElement,\n                            cardExpiryElement,\n                            cardCvcElement,\n                        ];\n                        stripeElement = this.stripeCardElements[0];\n\n                        try {\n                            cardNumberElement.mount(`#${cardNumberElementOptions.containerId}`);\n                            cardExpiryElement.mount(`#${cardExpiryElementOptions.containerId}`);\n                            cardCvcElement.mount(`#${cardCvcElementOptions.containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    } else {\n                        stripeElement =\n                            this.stripeElements.getElement(methodId) ||\n                            this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                        try {\n                            stripeElement.mount(`#${containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.IDEAL:\n                case StripeElementType.Sepa:\n                    stripeElement =\n                        this.stripeElements.getElement(methodId) ||\n                        this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                    try {\n                        stripeElement.mount(`#${containerId}`);\n                    } catch (error) {\n                        if (!this.isDeinitialize) {\n                            reject(\n                                new InvalidArgumentError(\n                                    'Unable to mount Stripe component without valid container ID.',\n                                ),\n                            );\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.Alipay:\n                    break;\n            }\n\n            resolve(stripeElement);\n        });\n    }\n\n    private async mountCardVerificationFields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const bigpayBaseUrl = storeConfig.paymentSettings.bigpayBaseUrl;\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private async processAdditionalAction(\n        error: Error,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<any | never> {\n        if (!isRequestError(error)) {\n            throw error;\n        }\n\n        const isAdditionalActionError = some(error.body.errors, {\n            code: 'additional_action_required',\n        });\n        const isThreeDSecureRequiredError = some(error.body.errors, {\n            code: 'three_d_secure_required',\n        });\n\n        if (isAdditionalActionError) {\n            const action: StripeAdditionalAction = error.body.additional_action_required;\n\n            if (action && action.type === 'redirect_to_url') {\n                return new Promise(() => {\n                    if (action.data.redirect_url) {\n                        window.location.replace(action.data.redirect_url);\n                    }\n                });\n            }\n        }\n\n        if (isThreeDSecureRequiredError) {\n            const clientSecret = error.body.three_ds_result.token;\n            const needsConfirm = false;\n            let catchedConfirmError = false;\n            let result;\n\n            try {\n                result = await this.getStripeJs().confirmCardPayment(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n\n            if (result?.error) {\n                if (this.isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                if (this.isAuthError(result.error)) {\n                    throw new StripeV3Error(StripeV3ErrorType.AuthFailure);\n                }\n\n                throw new Error(result.error.message);\n            }\n\n            const token = this.getPaymentToken(\n                result?.paymentIntent,\n                clientSecret,\n                catchedConfirmError,\n            );\n\n            const formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: needsConfirm,\n            };\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            try {\n                return await this.paymentIntegrationService.submitPayment(paymentPayload);\n            } catch (error) {\n                throw this.handleEmptyPaymentIntentError(error, result?.error);\n            }\n        }\n\n        throw error;\n    }\n\n    private getPaymentToken(\n        paymentIntent: PaymentIntent | undefined,\n        clientSecret: string,\n        catchedConfirmError: boolean,\n    ): string {\n        if (!paymentIntent || catchedConfirmError) {\n            return clientSecret;\n        }\n\n        return paymentIntent.id;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedFieldAvailable() && this.isHostedPaymentFormEnabled(methodId, gatewayId)\n        );\n    }\n\n    private unmountElement(): void {\n        if (this.stripeElement) {\n            this.stripeElement.unmount();\n            this.stripeElement = undefined;\n        }\n    }\n}\n","import BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: any): address is BillingAddress {\n    return (\n        typeof address === 'object' &&\n        address !== null &&\n        'id' in address &&\n        typeof address.id !== 'undefined'\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    load(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeV3Client> {\n        return this.scriptLoader.loadScript('https://js.stripe.com/v3/').then(() => {\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this.stripeWindow.Stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: ['payment_intent_beta_3', 'alipay_pm_beta_1'],\n                apiVersion: '2020-03-02;alipay_beta=v1',\n            });\n        });\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeV3PaymentStrategy from './stripev3-payment-strategy';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst createStripeV3PaymentStrategy: PaymentStrategyFactory<any> = (paymentIntegrationService) => {\n    return new StripeV3PaymentStrategy(\n        paymentIntegrationService,\n        new StripeV3ScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeV3PaymentStrategy, [{ gateway: 'stripev3' }]);\n","export const supportedLocales: { [language: string]: string[] } = {\n    ar: ['ar'],\n    bg: ['bg'],\n    cs: ['cs'],\n    da: ['da'],\n    de: ['de'],\n    el: ['el'],\n    en: ['en', 'en-GB'],\n    es: ['es', 'es-419'],\n    et: ['et'],\n    fi: ['fi'],\n    fil: ['fil'],\n    fr: ['fr', 'fr-CA'],\n    he: ['he'],\n    hr: ['hr'],\n    hu: ['hu'],\n    id: ['id'],\n    it: ['it'],\n    ja: ['ja'],\n    ko: ['ko'],\n    lt: ['lt'],\n    lv: ['lv'],\n    ms: ['ms'],\n    mt: ['mt'],\n    nb: ['nb'],\n    nl: ['nl'],\n    pl: ['pl'],\n    pt: ['pt', 'pt-BR'],\n    ro: ['ro'],\n    ru: ['ru'],\n    sk: ['sk'],\n    sl: ['sl'],\n    sv: ['sv'],\n    th: ['th'],\n    tr: ['tr'],\n    vi: ['vi'],\n    zh: ['zh', 'zh-HK', 'zh-TW'],\n};\n","import { supportedLocales } from './stripe-upe-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace(/_/g, '-').toLowerCase().split('-');\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'auto';\n    }\n\n    const formattedLocale = country ? `${language}-${country.toUpperCase()}` : language;\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    Address,\n    FormattedHostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    StripeUPEIntent,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport formatLocale from './format-locale';\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { isStripeUPEPaymentMethodLike } from './is-stripe-upe-payment-method-like';\nimport {\n    AddressOptions,\n    StripeConfirmPaymentData,\n    StripeElement,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeElementUpdateOptions,\n    StripeError,\n    StripePaymentMethodType,\n    StripeStringConstants,\n    StripeUPEAppearanceOptions,\n    StripeUPEClient,\n    StripeUPEPaymentIntentStatus,\n} from './stripe-upe';\nimport StripeUPEPaymentInitializeOptions, {\n    WithStripeUPEPaymentInitializeOptions,\n} from './stripe-upe-initialize-options';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst APM_REDIRECT = [\n    StripePaymentMethodType.SOFORT,\n    StripePaymentMethodType.EPS,\n    StripePaymentMethodType.GRABPAY,\n    StripePaymentMethodType.BANCONTACT,\n    StripePaymentMethodType.IDEAL,\n    StripePaymentMethodType.GIROPAY,\n    StripePaymentMethodType.ALIPAY,\n    StripePaymentMethodType.KLARNA,\n];\n\nexport default class StripeUPEPaymentStrategy implements PaymentStrategy {\n    private _stripeUPEClient?: StripeUPEClient;\n    private _stripeElements?: StripeElements;\n    private _isMounted = false;\n    private _unsubscribe?: () => void;\n    private _isStripeElementUpdateEnabled?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeUPEPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeupe, methodId, gatewayId } = options;\n\n        if (!stripeupe?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this._loadStripeElement(stripeupe, gatewayId, methodId).catch((error) =>\n            stripeupe.onError?.(error),\n        );\n\n        this._unsubscribe = this.paymentIntegrationService.subscribe(\n            async () => {\n                const payment = this._stripeElements?.getElement(StripeElementType.PAYMENT);\n\n                if (payment) {\n                    let error;\n\n                    try {\n                        await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                            params: { method: methodId },\n                        });\n                    } catch (err) {\n                        error = err;\n                    }\n\n                    if (error) {\n                        if (this._isMounted) {\n                            payment.unmount();\n                            this._isMounted = false;\n                        }\n\n                        stripeupe.onError?.(error);\n                    } else if (!this._isMounted) {\n                        await this._stripeElements?.fetchUpdates();\n                        this._mountElement(payment, stripeupe.containerId);\n                    }\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        return Promise.resolve();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        if (!this._stripeUPEClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData, methodId, gatewayId } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied: useStoreCredit } = state.getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        if (gatewayId) {\n            await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            });\n\n            const { email } = state.getCustomerOrThrow();\n\n            const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n            const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n                paymentProviderCustomer,\n            )\n                ? paymentProviderCustomer\n                : {};\n            const stripeLinkAuthenticationState =\n                stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n            if (stripeLinkAuthenticationState !== undefined && !email) {\n                const billingAddress = state.getBillingAddressOrThrow();\n\n                await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n            }\n        }\n\n        if (isVaultedInstrument(paymentData)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            const { instrumentId } = paymentData;\n\n            await this._executeWithVaulted(\n                payment.methodId,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n            );\n\n            return;\n        }\n\n        if (includes(APM_REDIRECT, methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            await this._executeWithAPM(payment.methodId);\n\n            return;\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        await this._executeWithoutRedirect(\n            payment.methodId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        this._stripeElements?.getElement(StripeElementType.PAYMENT)?.unmount();\n        this._isMounted = false;\n\n        return Promise.resolve();\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n\n    private async _executeWithAPM(methodId: string): Promise<PaymentIntegrationSelectors> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(methodId, paymentMethod.clientToken || '');\n\n        try {\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            return this._processAdditionalAction(error, methodId);\n        }\n    }\n\n    private async _executeWithoutRedirect(\n        methodId: string,\n        shouldSaveInstrument: boolean,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<PaymentIntegrationSelectors> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentMethod.clientToken || '',\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            return this._processAdditionalAction(\n                error,\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _isPaymentCompleted(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n\n        if (\n            !paymentMethod.clientToken ||\n            !this._stripeUPEClient ||\n            !features['PI-626.Block_unnecessary_payment_confirmation_for_StripeUPE']\n        ) {\n            return false;\n        }\n\n        const retrivedPI = await this._stripeUPEClient.retrievePaymentIntent(\n            paymentMethod.clientToken,\n        );\n\n        return retrivedPI.paymentIntent?.status === StripeUPEPaymentIntentStatus.SUCCEEDED;\n    }\n\n    private async _executeWithVaulted(\n        methodId: string,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const cartId = state.getCart()?.id;\n\n        try {\n            const paymentPayload = {\n                methodId,\n                paymentData: {\n                    formattedPayload: {\n                        cart_id: cartId,\n                        bigpay_token: { token },\n                        confirm: false,\n                        client_token: paymentMethod.clientToken,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            return this._processVaultedAdditionalAction(\n                error,\n                methodId,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _loadStripeElement(\n        stripeupe: StripeUPEPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        const { containerId, style, render, initStripeElementUpdateTrigger } = stripeupe;\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n\n        if (!isStripeUPEPaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            initializationData: { stripePublishableKey, stripeConnectedAccount, shopperLanguage },\n        } = paymentMethod;\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._loadStripeJs(\n            stripePublishableKey,\n            stripeConnectedAccount,\n        );\n        this._isStripeElementUpdateEnabled =\n            !!checkoutSettings.features['PI-1679.trigger_update_stripe_payment_element'] &&\n            typeof initStripeElementUpdateTrigger === 'function';\n\n        let appearance: StripeUPEAppearanceOptions | undefined;\n\n        if (style) {\n            const styles = style;\n\n            appearance = {\n                variables: {\n                    colorPrimary: styles.fieldInnerShadow,\n                    colorBackground: styles.fieldBackground,\n                    colorText: styles.labelText,\n                    colorDanger: styles.fieldErrorText,\n                    colorTextSecondary: styles.labelText,\n                    colorTextPlaceholder: styles.fieldPlaceholderText,\n                    colorIcon: styles.fieldPlaceholderText,\n                },\n                rules: {\n                    '.Input': {\n                        borderColor: styles.fieldBorder,\n                        color: styles.fieldText,\n                        boxShadow: styles.fieldInnerShadow,\n                    },\n                },\n            };\n        }\n\n        this._stripeElements = await this.scriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: paymentMethod.clientToken,\n            locale: formatLocale(shopperLanguage),\n            appearance,\n        });\n\n        const { getBillingAddress, getShippingAddress } = state;\n        const { postalCode } = getShippingAddress() || getBillingAddress() || {};\n\n        const stripeElement: StripeElement =\n            this._stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this._stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                },\n                ...this._getStripeElementTerms(),\n            });\n\n        this._mountElement(stripeElement, containerId);\n\n        stripeElement.on('ready', () => {\n            render();\n        });\n\n        if (this._isStripeElementUpdateEnabled) {\n            initStripeElementUpdateTrigger?.(this._updateStripeElement.bind(this));\n        }\n    }\n\n    // TODO: complexity of _processAdditionalAction method\n    // eslint-disable-next-line complexity\n    private async _processAdditionalAction(\n        error: Error,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!isRequestError(error)) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (some(error.body.errors, { code: 'additional_action_required' })) {\n            const {\n                type,\n                data: { token, redirect_url },\n            } = error.body.additional_action_required;\n            const isPaymentCompleted = await this._isPaymentCompleted(methodId);\n\n            if (type === 'redirect_to_url' && redirect_url && !isPaymentCompleted) {\n                const { paymentIntent, error: stripeError } =\n                    await this._stripeUPEClient.confirmPayment(\n                        this._mapStripePaymentData(redirect_url),\n                    );\n\n                if (stripeError) {\n                    this._throwDisplayableStripeError(stripeError);\n                    throw new PaymentMethodFailedError();\n                }\n\n                if (!paymentIntent) {\n                    throw new RequestError();\n                }\n            } else if (type === 'additional_action_requires_payment_method' && token) {\n                let result;\n                let catchedConfirmError = false;\n                const stripePaymentData = this._mapStripePaymentData();\n                const isPaymentCompleted = await this._isPaymentCompleted(methodId);\n\n                try {\n                    result = !isPaymentCompleted\n                        ? await this._stripeUPEClient.confirmPayment(stripePaymentData)\n                        : await this._stripeUPEClient.retrievePaymentIntent(token);\n                } catch (error) {\n                    try {\n                        result = await this._stripeUPEClient.retrievePaymentIntent(token);\n                    } catch (error) {\n                        catchedConfirmError = true;\n                    }\n                }\n\n                if (result?.error) {\n                    this._throwDisplayableStripeError(result.error);\n\n                    if (this._isCancellationError(result.error)) {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    throw new PaymentMethodFailedError();\n                }\n\n                if (!result?.paymentIntent && !catchedConfirmError) {\n                    throw new RequestError();\n                }\n\n                const paymentPayload = this._getPaymentPayload(\n                    methodId,\n                    catchedConfirmError ? token : result?.paymentIntent?.id,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                );\n\n                try {\n                    return await this.paymentIntegrationService.submitPayment(paymentPayload);\n                } catch (error) {\n                    // INFO: for case if payment was successfully confirmed on Stripe side but on BC side something go wrong, request failed and order status hasn't changed yet\n                    // For shopper we need to show additional message that BC is waiting for stripe confirmation, to prevent additional payment creation\n                    throw new PaymentMethodFailedError(\n                        \"We've received your order and are processing your payment. Once the payment is verified, your order will be completed. We will send you an email when it's completed. Please note, this process may take a few minutes depending on the processing times of your chosen method.\",\n                    );\n                }\n            }\n        }\n\n        throw error;\n    }\n\n    private async _processVaultedAdditionalAction(\n        error: Error,\n        methodId?: string,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!isRequestError(error)) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (some(error.body.errors, { code: 'three_d_secure_required' }) && methodId) {\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this._stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (error) {\n                try {\n                    result = await this._stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (error) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            const paymentPayload = this._getPaymentPayload(\n                methodId,\n                catchedConfirmError ? clientSecret : result?.paymentIntent?.id,\n                false,\n                shouldSetAsDefaultInstrument,\n            );\n\n            return this.paymentIntegrationService.submitPayment(paymentPayload);\n        }\n\n        throw error;\n    }\n\n    private _mapStripeAddress(address?: Address): AddressOptions {\n        if (address) {\n            const { city, address1, address2, countryCode: country, postalCode } = address;\n\n            return {\n                city,\n                country,\n                postal_code: postalCode,\n                line1: address1,\n                line2: address2,\n            };\n        }\n\n        throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n    }\n\n    private _mapStripePaymentData(returnUrl?: string): StripeConfirmPaymentData {\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n        const address = this._mapStripeAddress(billingAddress);\n\n        const email = billingAddress?.email;\n\n        if (!this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!email || !address || !address.city || !address.country) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            elements: this._stripeElements,\n            redirect: StripeStringConstants.IF_REQUIRED,\n            confirmParams: {\n                payment_method_data: {\n                    billing_details: {\n                        email,\n                        address,\n                    },\n                },\n                ...(returnUrl && { return_url: returnUrl }),\n            },\n        };\n    }\n\n    private async _loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this._stripeUPEClient) {\n            return this._stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _mountElement(stripeElement: StripeElement, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        stripeElement.mount(`#${containerId}`);\n        this._isMounted = true;\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload: StripeUPEIntent & FormattedHostedInstrument = {\n            cart_id: cartId,\n            credit_card_token: { token },\n            confirm: false,\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private _updateStripeElement({ shouldShowTerms }: StripeElementUpdateOptions): void {\n        const stripeElement = this._stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.update({\n            ...this._getStripeElementTerms(shouldShowTerms),\n        });\n    }\n\n    private _getStripeElementTerms(\n        shouldShowTerms?: boolean,\n    ): Pick<StripeElementsCreateOptions, 'terms'> {\n        let card = StripeStringConstants.AUTO;\n\n        if (this._isStripeElementUpdateEnabled) {\n            card = shouldShowTerms ? StripeStringConstants.AUTO : StripeStringConstants.NEVER;\n        }\n\n        return {\n            terms: {\n                card,\n            },\n        };\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface TdOnlineMartHostWindow extends Window {\n    customcheckout?(): TDCustomCheckoutSDK;\n}\n\nexport interface TDCustomCheckoutSDK {\n    create(fieldType: FieldType, options?: FieldOptions): TdOnlineMartElement;\n    createToken(callback: (result: CreateTokenResponse) => void): void;\n}\n\nexport interface TdOnlineMartElement {\n    mount(cssSelector: string): void;\n    unmount(): void;\n}\n\nexport enum FieldType {\n    CARD_NUMBER = 'card-number',\n    CVV = 'cvv',\n    EXPIRY = 'expiry',\n}\n\nexport interface TDOnlineMartInput {\n    id: string;\n    fieldType: FieldType;\n    inputElement?: TdOnlineMartElement;\n}\n\ninterface CreateTokenResponse {\n    code: string;\n    error?: CreateTokenError;\n    token?: string;\n    last4?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nexport interface CreateTokenError {\n    field: string;\n    type: string;\n    message: string;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n\n// Note: The style property affects the remote styling of text inside the iframe input. The classes property updates the class list of the element the field is mounted to on your page.\ninterface FieldOptions {\n    placeholder?: string;\n    style?: Styles;\n    classes?: Classes;\n    brands?: string[];\n}\n\ninterface Classes {\n    base?: string;\n    complete?: string;\n    empty?: string;\n    focus?: string;\n    error?: string;\n}\n\ninterface Styles {\n    base?: CssStyles;\n    complete?: CssStyles;\n    empty?: CssStyles;\n    error?: CssStyles;\n}\n\ninterface CssStyles {\n    color?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    textDecoration?: string;\n    padding?: string;\n    paddingLeft?: string;\n    paddingTop?: string;\n    paddingRight?: string;\n    paddingBottom?: string;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeUPEPaymentStrategy from './stripe-upe-payment-strategy';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createStripeUPEPaymentStrategy: PaymentStrategyFactory<StripeUPEPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new StripeUPEPaymentStrategy(\n        paymentIntegrationService,\n        new StripeUPEScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeUPEPaymentStrategy, [{ gateway: 'stripeupe' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isCreateTokenError from './is-create-token-error';\nimport { isTdOnlineMartAdditionalAction } from './isTdOnlineMartAdditionalAction';\nimport {\n    FieldType,\n    TDCustomCheckoutSDK,\n    TDOnlineMartInput,\n    TdOnlineMartThreeDSErrorBody,\n} from './td-online-mart';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nexport default class TDOnlineMartPaymentStrategy implements PaymentStrategy {\n    private tdOnlineMartClient?: TDCustomCheckoutSDK;\n    private tdInputs: TDOnlineMartInput[] = [\n        {\n            id: 'ccNumber',\n            fieldType: FieldType.CARD_NUMBER,\n        },\n        {\n            id: 'ccCvv',\n            fieldType: FieldType.CVV,\n        },\n        {\n            id: 'ccExpiry',\n            fieldType: FieldType.EXPIRY,\n        },\n    ];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private tdOnlineMartScriptLoader: TDOnlineMartScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const { methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.tdOnlineMartClient = await this.loadTDOnlineMartJs();\n\n        this.mountHostedFields(methodId);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!payment.methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paymentPayload = await this.getPaymentPayloadOrThrow(payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            await this.processWithAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.tdOnlineMartClient = undefined;\n\n        this.tdInputs.forEach(({ inputElement }: TDOnlineMartInput) => {\n            inputElement?.unmount();\n        });\n\n        return Promise.resolve();\n    }\n\n    private async getPaymentPayloadOrThrow(payment: OrderPaymentRequestBody) {\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const commonPaymentData = {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            browser_info: getBrowserInfo(),\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            paymentData.instrumentId\n        ) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const digitalItemsInCart = !!cart.lineItems.digitalItems.length;\n\n            const shouldAddVerificationToken =\n                !this.isTrustedVaultingInstrument(paymentData.instrumentId) || digitalItemsInCart;\n\n            return {\n                methodId,\n                paymentData: {\n                    ...commonPaymentData,\n                    instrumentId: paymentData.instrumentId,\n                    ...(shouldAddVerificationToken ? { nonce: paymentData.instrumentId } : {}),\n                },\n            };\n        }\n\n        let nonce: string;\n\n        try {\n            nonce = await this.getTokenOrThrow();\n        } catch (error) {\n            this.throwTokenizationError(error);\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                ...commonPaymentData,\n                nonce,\n            },\n        };\n    }\n\n    private mountHostedFields(methodId: string): void {\n        const options = this.getHostedFieldsOptions();\n        const tdOnlineMartClient = this.getTDOnlineMartClientOrThrow();\n\n        this.tdInputs.forEach((input: TDOnlineMartInput) => {\n            const inputId = `${methodId}-${input.id}`;\n\n            if (!document.getElementById(inputId)) {\n                return;\n            }\n\n            input.inputElement = tdOnlineMartClient.create(input.fieldType, options);\n            input.inputElement.mount(`#${inputId}`);\n        });\n    }\n\n    private async loadTDOnlineMartJs(): Promise<TDCustomCheckoutSDK> {\n        if (this.tdOnlineMartClient) {\n            return this.tdOnlineMartClient;\n        }\n\n        return this.tdOnlineMartScriptLoader.load();\n    }\n\n    private getTokenOrThrow(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.getTDOnlineMartClientOrThrow().createToken((result) => {\n                const { error, token } = result;\n\n                if (error || !token) {\n                    return reject(error);\n                }\n\n                resolve(token);\n            });\n        });\n    }\n\n    private getTDOnlineMartClientOrThrow(): TDCustomCheckoutSDK {\n        if (!this.tdOnlineMartClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.tdOnlineMartClient;\n    }\n\n    private async processWithAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n\n    private throwTokenizationError(error: unknown): never {\n        if (!isCreateTokenError(error)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        throw new Error(error.message);\n    }\n\n    private getHostedFieldsOptions() {\n        const style = {\n            error: {\n                color: '#d14343',\n            },\n        };\n\n        const classes = {\n            error: 'form-input--error',\n        };\n\n        return {\n            style,\n            classes,\n        };\n    }\n\n    private isTrustedVaultingInstrument(instrumentId: string): boolean {\n        const instruments = this.paymentIntegrationService.getState().getInstruments();\n\n        const { trustedShippingAddress } =\n            instruments?.find(({ bigpayToken }) => bigpayToken === instrumentId) || {};\n\n        return !!trustedShippingAddress;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from './td-online-mart';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { CreateTokenError } from './td-online-mart';\n\nexport default function isCreateTokenError(error: unknown): error is CreateTokenError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'field' in error &&\n        'type' in error &&\n        'message' in error\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TDCustomCheckoutSDK, TdOnlineMartHostWindow } from './td-online-mart';\n\nexport default class TDOnlineMartScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private tdOnlineMartWindow: TdOnlineMartHostWindow = window,\n    ) {}\n\n    async load(): Promise<TDCustomCheckoutSDK> {\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            await this.scriptLoader.loadScript(\n                'https://libs.na.bambora.com/customcheckout/1/customcheckout.js',\n            );\n        }\n\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.tdOnlineMartWindow.customcheckout();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport TDOnlineMartPaymentStrategy from './td-online-mart-payment-strategy';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nconst createTDOnlineMartPaymentStrategy: PaymentStrategyFactory<TDOnlineMartPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new TDOnlineMartPaymentStrategy(\n        paymentIntegrationService,\n        new TDOnlineMartScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createTDOnlineMartPaymentStrategy, [{ id: 'tdonlinemart' }]);\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private requestSender: RequestSender,\n    ) {}\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const { getPaymentMethodOrThrow } = await this.paymentIntegrationService.loadPaymentMethod(\n            methodId,\n            options,\n        );\n\n        const {\n            clientToken,\n            initializationData,\n        }: { clientToken?: string; initializationData?: { redirectUrl?: string } } =\n            getPaymentMethodOrThrow(methodId);\n        const redirectUrl = initializationData?.redirectUrl;\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        await this.paymentIntegrationService.initializePayment(methodId, { useStoreCredit });\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            if (isRequestError(error) && error.body.status === 'additional_action_required') {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this.requestSender.post<void>(url, options);\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this.saveExternalId(methodId, externalId);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ZipPaymentStrategy from './zip-payment-strategy';\n\nconst createZipPaymentStrategy: PaymentStrategyFactory<ZipPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n\n    return new ZipPaymentStrategy(paymentIntegrationService, requestSender);\n};\n\nexport default toResolvableModule(createZipPaymentStrategy, [{ id: 'zip' }]);\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(private _countryRequestSender: CountryRequestSender) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender\n                .loadCountries(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(CountryActionType.LoadCountriesSucceeded, response.body.data),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(CountryActionType.LoadCountriesFailed, response),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import {\n    isResolvableModule,\n    PaymentIntegrationService,\n    PaymentStrategy,\n    PaymentStrategyFactory,\n    PaymentStrategyResolveId,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultPaymentStrategyFactories from '../generated/payment-strategies';\n\nexport interface PaymentStrategyFactories {\n    [key: string]: PaymentStrategyFactory<PaymentStrategy>;\n}\n\nexport default function createPaymentStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    paymentStrategyFactories: PaymentStrategyFactories = defaultPaymentStrategyFactories,\n    options: { useFallback: boolean } = { useFallback: false },\n): ResolveIdRegistry<PaymentStrategy, PaymentStrategyResolveId> {\n    const { useFallback } = options;\n    const registry = new ResolveIdRegistry<PaymentStrategy, PaymentStrategyResolveId>(useFallback);\n\n    for (const [, createPaymentStrategy] of Object.entries(paymentStrategyFactories)) {\n        if (\n            !isResolvableModule<PaymentStrategyFactory<PaymentStrategy>, PaymentStrategyResolveId>(\n                createPaymentStrategy,\n            )\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createPaymentStrategy.resolveIds) {\n            registry.register(resolverId, () => createPaymentStrategy(paymentIntegrationService));\n        }\n    }\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    ADYENV3 = 'adyenv3',\n    ADYENV3_GOOGLEPAY = 'googlepayadyenv3',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAY = 'amazonpay',\n    APPLEPAY = 'applepay',\n    BARCLAYS = 'barclays',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CBA_MPGS = 'cba_mpgs',\n    CHECKOUTCOM = 'checkoutcom',\n    CHECKOUTCOM_APM = 'checkoutcomapm',\n    CHECKOUTCOM_FAWRY = 'checkoutcomfawry',\n    CHECKOUTCOM_SEPA = 'checkoutcomsepa',\n    CHECKOUTCOM_IDEAL = 'checkoutcomideal',\n    CREDIT_CARD = 'creditcard',\n    CHECKOUTCOM_GOOGLE_PAY = 'googlepaycheckoutcom',\n    CLEARPAY = 'clearpay',\n    CONVERGE = 'converge',\n    CYBERSOURCE = 'cybersource',\n    CYBERSOURCEV2 = 'cybersourcev2',\n    BNZ = 'bnz',\n    BNZ_GOOGLEPAY = 'googlepaybnz',\n    DIGITALRIVER = 'digitalriver',\n    CYBERSOURCEV2_GOOGLE_PAY = 'googlepaycybersourcev2',\n    HUMM = 'humm',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LAYBUY = 'laybuy',\n    LEGACY = 'legacy',\n    MOLLIE = 'mollie',\n    MONERIS = 'moneris',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    OPY = 'opy',\n    ORBITAL_GOOGLE_PAY = 'googlepayorbital',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    PAYPAL_COMMERCE_CREDIT_CARD = 'paypalcommercecreditcards',\n    PAYPAL_COMMERCE_ALTERNATIVE_METHODS = 'paypalcommercealternativemethods',\n    PAYPAL_COMMERCE_VENMO = 'paypalcommercevenmo',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n    QUADPAY = 'quadpay',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    STRIPE_UPE = 'stripeupe',\n    STRIPE_UPE_GOOGLE_PAY = 'googlepaystripeupe',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_VENMO = 'braintreevenmo',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    WORLDPAYACCESS = 'worldpayaccess',\n    WORLDPAYACCESS_GOOGLE_PAY = 'googlepayworldpayaccess',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    SEZZLE = 'sezzle',\n    ZIP = 'zip',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { PaymentStrategy as PaymentStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    LoadOrderPaymentsAction,\n    OrderActionCreator,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n} from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyRegistryV2 from './payment-strategy-registry-v2';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _strategyRegistryV2: PaymentStrategyRegistryV2,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    execute(\n        payload: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return (store) => {\n            const { checkout } = store.getState();\n            const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n            return concat(\n                shouldExecuteSpamCheck\n                    ? this._spamProtectionActionCreator.verifyCheckoutSpamProtection()(store)\n                    : empty(),\n                of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n                defer(() => {\n                    const state = store.getState();\n\n                    let strategy: PaymentStrategy | PaymentStrategyV2;\n\n                    if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                        const method = state.paymentMethods.getPaymentMethod(\n                            payment.methodId,\n                            payment.gatewayId,\n                        );\n\n                        if (!method) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n\n                        strategy = this._getStrategy(method);\n                    } else {\n                        strategy = this._strategyRegistryV2.get({\n                            id: PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED,\n                        });\n                    }\n\n                    const promise: Promise<InternalCheckoutSelectors | void> = strategy.execute(\n                        payload,\n                        {\n                            ...options,\n                            methodId: payment.methodId,\n                            gatewayId: payment.gatewayId,\n                        },\n                    );\n\n                    return promise.then(() =>\n                        createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta),\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    finalize(\n        options?: RequestOptions,\n    ): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n                this._loadOrderPaymentsIfNeeded(store, options),\n                defer(async () => {\n                    const state = store.getState();\n                    const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                    const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                    if (!method) {\n                        throw new OrderFinalizationNotRequiredError();\n                    }\n\n                    const strategy = this._getStrategy(method);\n\n                    await strategy.finalize({\n                        ...options,\n                        methodId: method.id,\n                        gatewayId: method.gateway,\n                    });\n\n                    return createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, {\n                        methodId: method.id,\n                    });\n                }),\n            ).pipe(\n                catchError((error) => {\n                    const state = store.getState();\n                    const payment = state.payment.getPaymentId();\n\n                    return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, {\n                        methodId: payment && payment.providerId,\n                    });\n                }),\n            );\n    }\n\n    initialize(\n        options: PaymentInitializeOptions,\n    ): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (methodId && state.paymentStrategies.isInitialized({ methodId, gatewayId })) {\n                    return empty();\n                }\n\n                const strategy = this._getStrategy(method);\n\n                const promise: Promise<InternalCheckoutSelectors | void> = strategy.initialize({\n                    ...options,\n                    methodId,\n                    gatewayId,\n                });\n\n                return concat(\n                    of(\n                        createAction(PaymentStrategyActionType.InitializeRequested, undefined, {\n                            methodId,\n                            gatewayId,\n                        }),\n                    ),\n                    promise.then(() =>\n                        createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, {\n                            methodId,\n                            gatewayId,\n                        }),\n                    ),\n                );\n            }).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, {\n                        methodId,\n                        gatewayId,\n                    }),\n                ),\n            );\n    }\n\n    deinitialize(\n        options: PaymentRequestOptions,\n    ): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (methodId && !state.paymentStrategies.isInitialized({ methodId, gatewayId })) {\n                    return empty();\n                }\n\n                const strategy = this._getStrategy(method);\n\n                const promise: Promise<InternalCheckoutSelectors | void> = strategy.deinitialize({\n                    ...options,\n                    methodId,\n                    gatewayId,\n                });\n\n                return concat(\n                    of(\n                        createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, {\n                            methodId,\n                            gatewayId,\n                        }),\n                    ),\n                    promise.then(() =>\n                        createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, {\n                            methodId,\n                            gatewayId,\n                        }),\n                    ),\n                );\n            }).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, {\n                        methodId,\n                        gatewayId,\n                    }),\n                ),\n            );\n    }\n\n    widgetInteraction(\n        method: () => Promise<any>,\n        options?: PaymentRequestOptions,\n    ): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() =>\n                    createAction(\n                        PaymentStrategyActionType.WidgetInteractionFinished,\n                        undefined,\n                        meta,\n                    ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta),\n            ),\n        );\n    }\n\n    private _getStrategy(method: PaymentMethod): PaymentStrategy | PaymentStrategyV2 {\n        let strategy: PaymentStrategy | PaymentStrategyV2;\n\n        try {\n            strategy = this._strategyRegistry.getByMethod(method);\n        } catch {\n            strategy = this._strategyRegistryV2.get({\n                id: method.id,\n                gateway: method.gateway,\n                type: method.type,\n            });\n        }\n\n        return strategy;\n    }\n\n    private _loadOrderPaymentsIfNeeded(\n        store: ReadableCheckoutStore,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(private _namespace: string) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import PaymentMethod from './payment-method';\nimport PaymentStrategyType from './payment-strategy-type';\n\ntype PPSDKRequiredProperties = 'initializationStrategy';\n\nexport type PPSDKPaymentMethod = PaymentMethod & {\n    type: PaymentStrategyType.PPSDK;\n} & Required<Pick<PaymentMethod, PPSDKRequiredProperties>>;\n\nexport const isPPSDKPaymentMethod = (\n    paymentMethod: PaymentMethod,\n): paymentMethod is PPSDKPaymentMethod => {\n    const { type, initializationStrategy } = paymentMethod;\n\n    return type === PaymentStrategyType.PPSDK && typeof initializationStrategy?.type === 'string';\n};\n","import { ReadableDataStore } from '@bigcommerce/data-store';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { isPPSDKPaymentMethod } from './ppsdk-payment-method';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<\n    PaymentStrategy,\n    PaymentStrategyType\n> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions,\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter((value) => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n\n        if (features) {\n            switch (true) {\n                case paymentMethod.id === 'squarev2' &&\n                    features['PROJECT-4113.squarev2_web_payments_sdk']:\n                case paymentMethod.id === 'googlepayauthorizenet' &&\n                    features['INT-7676.authorizenet_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepaybnz' &&\n                    features['INT-7676.bnz_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepaycheckoutcom' &&\n                    features['INT-7676.checkoutcom_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepaycybersourcev2' &&\n                    features['INT-7676.cybersourcev2_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepayorbital' &&\n                    features['INT-7676.orbital_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepaystripe' &&\n                    features['INT-7676.stripe_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepaystripeupe' &&\n                    features['INT-7676.stripeupe_use_new_googlepay_payment_strategy']:\n                case paymentMethod.id === 'googlepayworldpayaccess' &&\n                    features['INT-7676.worldpayaccess_use_new_googlepay_payment_strategy']:\n                    throw new Error(`${paymentMethod.id} requires using registryV2`);\n            }\n        }\n\n        if (isPPSDKPaymentMethod(paymentMethod)) {\n            return PaymentStrategyType.PPSDK;\n        }\n\n        if (paymentMethod.gateway === 'klarna') {\n            return PaymentStrategyType.KLARNAV2;\n        }\n\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        throw new InvalidArgumentError(`'${methodId}' is not registered.`);\n    }\n\n    private _hasFactoryForMethod(methodId: string): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeFormErrorsData, BraintreeVerifyPayload } from './braintree';\n\n/**\n * A set of options that are required to initialize the Braintree payment\n * method. You need to provide the options if you want to support 3D Secure\n * authentication flow.\n *\n * ```html\n * <!-- These containers are where the hosted (iframed) credit card fields will be inserted -->\n * <div id=\"card-number\"></div>\n * <div id=\"card-name\"></div>\n * <div id=\"card-expiry\"></div>\n * <div id=\"card-code\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'braintree',\n *     braintree: {\n *         form: {\n *             fields: {\n *                 cardNumber: { containerId: 'card-number' },\n *                 cardName: { containerId: 'card-name' },\n *                 cardExpiry: { containerId: 'card-expiry' },\n *                 cardCode: { containerId: 'card-code' },\n *             },\n *         },\n *     },\n * });\n * ```\n *\n * Additional options can be passed in to customize the fields and register\n * event callbacks.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'braintree',\n *     creditCard: {\n *         form: {\n *             fields: {\n *                 cardNumber: { containerId: 'card-number' },\n *                 cardName: { containerId: 'card-name' },\n *                 cardExpiry: { containerId: 'card-expiry' },\n *                 cardCode: { containerId: 'card-code' },\n *             },\n *             styles: {\n *                 default: {\n *                     color: '#000',\n *                 },\n *                 error: {\n *                     color: '#f00',\n *                 },\n *                 focus: {\n *                     color: '#0f0',\n *                 },\n *             },\n *             onBlur({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onFocus({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onEnter({ fieldType }) {\n *                 console.log(fieldType);\n *             },\n *             onCardTypeChange({ cardType }) {\n *                 console.log(cardType);\n *             },\n *             onValidate({ errors, isValid }) {\n *                 console.log(errors);\n *                 console.log(isValid);\n *             },\n *         },\n *     },\n * });\n * ```\n */\nexport interface BraintreePaymentInitializeOptions {\n    /**\n     * The CSS selector of a container where the payment widget should be inserted into.\n     */\n    containerId?: string;\n\n    threeDSecure?: BraintreeThreeDSecureOptions;\n\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    form?: BraintreeFormOptions;\n\n    /**\n     * The location to insert the Pay Later Messages.\n     */\n    bannerContainerId?: string;\n\n    /**\n     * A callback right before render Smart Payment Button that gets called when\n     * Smart Payment Button is eligible. This callback can be used to hide the standard submit button.\n     */\n    onRenderButton?(): void;\n\n    /**\n     * A callback for submitting payment form that gets called\n     * when buyer approved PayPal account.\n     */\n    submitForm?(): void;\n\n    /**\n     * A callback that gets called if unable to submit payment.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onPaymentError?(error: BraintreeError | StandardError): void;\n\n    /**\n     * A callback for displaying error popup. This callback requires error object as parameter.\n     */\n    onError?(error: unknown): void;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\nexport interface BraintreeThreeDSecureOptions {\n    /**\n     * A callback that gets called when the iframe is ready to be added to the\n     * current page. It is responsible for determining where the iframe should\n     * be inserted in the DOM.\n     *\n     * @param error - Any error raised during the verification process;\n     * undefined if there is none.\n     * @param iframe - The iframe element containing the verification web page\n     * provided by the card issuer.\n     * @param cancel - A function, when called, will cancel the verification\n     * process and remove the iframe.\n     */\n    addFrame(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n\n    /**\n     * A callback that gets called when the iframe is about to be removed from\n     * the current page.\n     */\n    removeFrame(): void;\n    challengeRequested?: boolean;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n}\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n","import { Dictionary, isEmpty, isNil, omitBy } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentInvalidFormError, PaymentInvalidFormErrorDetails } from '../../errors';\n\nimport {\n    BraintreeBillingAddressRequestData,\n    BraintreeFormErrorDataKeys,\n    BraintreeFormErrorsData,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeHostedFieldsState,\n    BraintreeHostedFormError,\n    TokenizationPayload,\n} from './braintree';\nimport {\n    BraintreeFormFieldsMap,\n    BraintreeFormFieldStyles,\n    BraintreeFormFieldStylesMap,\n    BraintreeFormFieldType,\n    BraintreeFormFieldValidateErrorData,\n    BraintreeFormFieldValidateEventData,\n    BraintreeFormOptions,\n    BraintreeStoredCardFieldsMap,\n} from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { isBraintreeFormFieldsMap } from './is-braintree-form-fields-map';\n\nenum BraintreeHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class BraintreeHostedForm {\n    private _cardFields?: BraintreeHostedFields;\n    private _formOptions?: BraintreeFormOptions;\n    private _type?: BraintreeHostedFormType;\n    private _isInitializedHostedForm = false;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    async initialize(options: BraintreeFormOptions): Promise<void> {\n        this._formOptions = options;\n\n        this._type = isBraintreeFormFieldsMap(options.fields)\n            ? BraintreeHostedFormType.CreditCard\n            : BraintreeHostedFormType.StoredCardVerification;\n\n        const fields = this._mapFieldOptions(options.fields);\n\n        if (isEmpty(fields)) {\n            this._isInitializedHostedForm = false;\n\n            return;\n        }\n\n        this._cardFields = await this._braintreeSDKCreator.createHostedFields({\n            fields,\n            styles: options.styles && this._mapStyleOptions(options.styles),\n        });\n\n        this._cardFields.on('blur', this._handleBlur);\n        this._cardFields.on('focus', this._handleFocus);\n        this._cardFields.on('cardTypeChange', this._handleCardTypeChange);\n        this._cardFields.on('validityChange', this._handleValidityChange);\n        this._cardFields.on('inputSubmitRequest', this._handleInputSubmitRequest);\n\n        this._isInitializedHostedForm = true;\n    }\n\n    isInitialized(): boolean {\n        return !!this._isInitializedHostedForm;\n    }\n\n    async deinitialize(): Promise<void> {\n        this._isInitializedHostedForm = false;\n\n        await this._cardFields?.teardown();\n    }\n\n    validate() {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const braintreeHostedFormState = this._cardFields.getState();\n\n        if (!this._isValidForm(braintreeHostedFormState)) {\n            this._handleValidityChange(braintreeHostedFormState);\n\n            const errors = this._mapValidationErrors(braintreeHostedFormState.fields);\n\n            throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n        }\n    }\n\n    async tokenize(billingAddress: Address): Promise<TokenizationPayload> {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const tokenizationPayload = await this._cardFields.tokenize(\n                omitBy(\n                    {\n                        billingAddress: billingAddress && this._mapBillingAddress(billingAddress),\n                    },\n                    isNil,\n                ),\n            );\n\n            this._formOptions?.onValidate?.({\n                isValid: true,\n                errors: {},\n            });\n\n            return {\n                nonce: tokenizationPayload.nonce,\n                bin: tokenizationPayload.details?.bin,\n            };\n        } catch (error) {\n            const errors = this._mapTokenizeError(error);\n\n            if (errors) {\n                this._formOptions?.onValidate?.({\n                    isValid: false,\n                    errors,\n                });\n\n                throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n            }\n\n            throw error;\n        }\n    }\n\n    async tokenizeForStoredCardVerification(): Promise<TokenizationPayload> {\n        if (!this._cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const tokenizationPayload = await this._cardFields.tokenize();\n\n            this._formOptions?.onValidate?.({\n                isValid: true,\n                errors: {},\n            });\n\n            return {\n                nonce: tokenizationPayload.nonce,\n                bin: tokenizationPayload.details?.bin,\n            };\n        } catch (error) {\n            const errors = this._mapTokenizeError(error, true);\n\n            if (errors) {\n                this._formOptions?.onValidate?.({\n                    isValid: false,\n                    errors,\n                });\n\n                throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n            }\n\n            throw error;\n        }\n    }\n\n    private _mapBillingAddress(billingAddress: Address): BraintreeBillingAddressRequestData {\n        return {\n            countryName: billingAddress.country,\n            postalCode: billingAddress.postalCode,\n            streetAddress: billingAddress.address2\n                ? `${billingAddress.address1} ${billingAddress.address2}`\n                : billingAddress.address1,\n        };\n    }\n\n    private _mapFieldOptions(\n        fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n    ): BraintreeHostedFieldsCreatorConfig['fields'] {\n        if (isBraintreeFormFieldsMap(fields)) {\n            return omitBy(\n                {\n                    number: {\n                        container: `#${fields.cardNumber.containerId}`,\n                        placeholder: fields.cardNumber.placeholder,\n                        internalLabel: fields.cardNumber.accessibilityLabel,\n                    },\n                    expirationDate: {\n                        container: `#${fields.cardExpiry.containerId}`,\n                        placeholder: fields.cardExpiry.placeholder,\n                        internalLabel: fields.cardExpiry.accessibilityLabel,\n                    },\n                    cvv: fields.cardCode && {\n                        container: `#${fields.cardCode.containerId}`,\n                        placeholder: fields.cardCode.placeholder,\n                        internalLabel: fields.cardCode.accessibilityLabel,\n                    },\n                    cardholderName: {\n                        container: `#${fields.cardName.containerId}`,\n                        placeholder: fields.cardName.placeholder,\n                        internalLabel: fields.cardName.accessibilityLabel,\n                    },\n                },\n                isNil,\n            );\n        }\n\n        return omitBy(\n            {\n                number: fields.cardNumberVerification && {\n                    container: `#${fields.cardNumberVerification.containerId}`,\n                    placeholder: fields.cardNumberVerification.placeholder,\n                },\n                cvv: fields.cardCodeVerification && {\n                    container: `#${fields.cardCodeVerification.containerId}`,\n                    placeholder: fields.cardCodeVerification.placeholder,\n                },\n            },\n            isNil,\n        );\n    }\n\n    private _mapStyleOptions(\n        options: BraintreeFormFieldStylesMap,\n    ): BraintreeHostedFieldsCreatorConfig['styles'] {\n        const mapStyles = (styles: BraintreeFormFieldStyles = {}) =>\n            omitBy(\n                {\n                    color: styles.color,\n                    'font-family': styles.fontFamily,\n                    'font-size': styles.fontSize,\n                    'font-weight': styles.fontWeight,\n                },\n                isNil,\n            ) as Dictionary<string>;\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private _mapFieldType(type: string): BraintreeFormFieldType {\n        switch (type) {\n            case 'number':\n                return this._type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardNumberVerification\n                    : BraintreeFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return BraintreeFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this._type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardCodeVerification\n                    : BraintreeFormFieldType.CardCode;\n\n            case 'cardholderName':\n                return BraintreeFormFieldType.CardName;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private _mapErrors(fields: BraintreeHostedFieldsState['fields']): BraintreeFormErrorsData {\n        const errors: BraintreeFormErrorsData = {};\n\n        if (fields) {\n            for (const [key, value] of Object.entries(fields)) {\n                if (value && this._isValidParam(key)) {\n                    const { isValid, isEmpty, isPotentiallyValid } = value;\n\n                    errors[key] = {\n                        isValid,\n                        isEmpty,\n                        isPotentiallyValid,\n                    };\n                }\n            }\n        }\n\n        return errors;\n    }\n\n    private _mapValidationErrors(\n        fields: BraintreeHostedFieldsState['fields'],\n    ): BraintreeFormFieldValidateEventData['errors'] {\n        return (Object.keys(fields) as Array<keyof BraintreeHostedFieldsState['fields']>).reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this._mapFieldType(fieldKey)]: fields[fieldKey]?.isValid\n                    ? undefined\n                    : [this._createInvalidError(this._mapFieldType(fieldKey))],\n            }),\n            {},\n        );\n    }\n\n    private _mapTokenizeError(\n        error: BraintreeHostedFormError,\n        isStoredCard = false,\n    ): BraintreeFormFieldValidateEventData['errors'] | undefined {\n        if (error.code === 'HOSTED_FIELDS_FIELDS_EMPTY') {\n            const cvvValidation = {\n                [this._mapFieldType('cvv')]: [this._createRequiredError(this._mapFieldType('cvv'))],\n            };\n\n            const expirationDateValidation = {\n                [this._mapFieldType('expirationDate')]: [\n                    this._createRequiredError(this._mapFieldType('expirationDate')),\n                ],\n            };\n\n            const cardNumberValidation = {\n                [this._mapFieldType('number')]: [\n                    this._createRequiredError(this._mapFieldType('number')),\n                ],\n            };\n\n            const cardNameValidation = {\n                [this._mapFieldType('cardholderName')]: [\n                    this._createRequiredError(this._mapFieldType('cardholderName')),\n                ],\n            };\n\n            return isStoredCard\n                ? cvvValidation\n                : {\n                      ...cvvValidation,\n                      ...expirationDateValidation,\n                      ...cardNumberValidation,\n                      ...cardNameValidation,\n                  };\n        }\n\n        return error.details?.invalidFieldKeys?.reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this._mapFieldType(fieldKey)]: [\n                    this._createInvalidError(this._mapFieldType(fieldKey)),\n                ],\n            }),\n            {},\n        );\n    }\n\n    private _createRequiredError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        switch (fieldType) {\n            case BraintreeFormFieldType.CardCodeVerification:\n            case BraintreeFormFieldType.CardCode:\n                return {\n                    fieldType,\n                    message: 'CVV is required',\n                    type: 'required',\n                };\n\n            case BraintreeFormFieldType.CardNumberVerification:\n            case BraintreeFormFieldType.CardNumber:\n                return {\n                    fieldType,\n                    message: 'Credit card number is required',\n                    type: 'required',\n                };\n\n            case BraintreeFormFieldType.CardExpiry:\n                return {\n                    fieldType,\n                    message: 'Expiration date is required',\n                    type: 'required',\n                };\n\n            case BraintreeFormFieldType.CardName:\n                return {\n                    fieldType,\n                    message: 'Full name is required',\n                    type: 'required',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Field is required',\n                    type: 'required',\n                };\n        }\n    }\n\n    private _createInvalidError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        switch (fieldType) {\n            case BraintreeFormFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case BraintreeFormFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case BraintreeFormFieldType.CardCode:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case BraintreeFormFieldType.CardExpiry:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            case BraintreeFormFieldType.CardNumber:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case BraintreeFormFieldType.CardName:\n                return {\n                    fieldType,\n                    message: 'Invalid card name',\n                    type: 'invalid_card_name',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private _handleBlur: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onBlur?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n            errors: this._mapErrors(event.fields),\n        });\n    };\n\n    private _handleFocus: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onFocus?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleCardTypeChange: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onCardTypeChange?.({\n            cardType:\n                event.cards.length === 1\n                    ? event.cards[0].type.replace(/^master\\-card$/, 'mastercard',) /* eslint-disable-line */\n                    : undefined,\n        });\n    };\n\n    private _handleInputSubmitRequest: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onEnter?.({\n            fieldType: this._mapFieldType(event.emittedBy),\n        });\n    };\n\n    private _handleValidityChange: (event: BraintreeHostedFieldsState) => void = (event) => {\n        this._formOptions?.onValidate?.({\n            isValid: this._isValidForm(event),\n            errors: this._mapValidationErrors(event.fields),\n        });\n    };\n\n    private _isValidForm(event: BraintreeHostedFieldsState): boolean {\n        return (\n            Object.keys(event.fields) as Array<keyof BraintreeHostedFieldsState['fields']>\n        ).every((key) => event.fields[key]?.isValid);\n    }\n\n    private _isValidParam(\n        formErrorDataKey: string,\n    ): formErrorDataKey is BraintreeFormErrorDataKeys {\n        switch (formErrorDataKey) {\n            case 'number':\n            case 'cvv':\n            case 'expirationDate':\n            case 'postalCode':\n            case 'cardholderName':\n            case 'cardType':\n                return true;\n\n            default:\n                return false;\n        }\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport { CheckoutSettings } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n    private _amazonPayButton?: HTMLDivElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const { features } = this._store.getState().config.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId);\n        const {\n            initializationData: { paymentToken, region },\n        } = paymentMethod;\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (this._isReadyToPay(paymentToken)) {\n            if (amazonpay?.editButtonId) {\n                this._bindEditButton(\n                    amazonpay.editButtonId,\n                    paymentToken,\n                    'changePayment',\n                    this._isModalFlow(region),\n                );\n            }\n        } else {\n            const { id: containerId } = this._createContainer();\n\n            this._amazonPayButton = this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: this._store.getState(),\n                containerId,\n                decoupleCheckoutInitiation: this._isOneTimeTransaction(\n                    features,\n                    region.toUpperCase(),\n                ),\n                methodId,\n                placement: AmazonPayV2Placement.Checkout,\n                isButtonMicroTextDisabled:\n                    paymentMethod.initializationData.isButtonMicroTextDisabled,\n            });\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const { features } = this._store.getState().config.getStoreConfigOrThrow().checkoutSettings;\n        const { region, paymentToken } = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(methodId).initializationData;\n\n        if (\n            this._isReadyToPay(paymentToken) ||\n            this._isOneTimeTransaction(features, region.toUpperCase())\n        ) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken || 'apb' },\n            };\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n            try {\n                return await this._store.dispatch(\n                    this._paymentActionCreator.submitPayment(paymentPayload),\n                );\n            } catch (error) {\n                if (\n                    error instanceof RequestError &&\n                    error.body.status === 'additional_action_required'\n                ) {\n                    if (paymentToken) {\n                        return new Promise(() =>\n                            window.location.assign(\n                                error.body.additional_action_required.data.redirect_url,\n                            ),\n                        );\n                    }\n\n                    this._amazonPayV2PaymentProcessor.prepareCheckout(\n                        JSON.parse(error.body.additional_action_required.data.redirect_url),\n                    );\n                } else {\n                    throw error;\n                }\n            }\n        }\n\n        this._getAmazonPayButton().click();\n\n        // Focus of parent window used to try and detect the user cancelling the Amazon log in modal\n        // Should be refactored if/when Amazon add a modal close hook to their SDK\n        if (this._isModalFlow(region)) {\n            return new Promise((_, reject) => {\n                const onFocus = () => {\n                    window.removeEventListener('focus', onFocus);\n                    reject(\n                        new PaymentMethodCancelledError(\n                            'Shopper needs to login to Amazonpay to continue',\n                        ),\n                    );\n                };\n\n                window.addEventListener('focus', onFocus);\n            });\n        }\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        this._amazonPayButton = undefined;\n\n        return this._store.getState();\n    }\n\n    private _bindEditButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        isModalFlow: boolean,\n    ): void {\n        const button = document.getElementById(buttonId);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (!isModalFlow) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => this._showLoadingSpinner());\n        }\n\n        this._amazonPayV2PaymentProcessor.bindButton(buttonId, sessionId, changeAction);\n    }\n\n    private _isModalFlow(region: string) {\n        return region === 'us';\n    }\n\n    private _showLoadingSpinner(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._paymentStrategyActionCreator.widgetInteraction(() => new Promise(noop)),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _createContainer(): HTMLDivElement {\n        let container = document.getElementById('AmazonPayButton') as HTMLDivElement;\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _getAmazonPayButton() {\n        return guard(\n            this._amazonPayButton,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _isOneTimeTransaction(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        return (\n            this._amazonPayV2PaymentProcessor.isPh4Enabled(features, storeCountryCode) &&\n            features['INT-6399.amazon_pay_apb']\n        );\n    }\n\n    private _isReadyToPay(paymentToken?: string): boolean {\n        return !!paymentToken;\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory,\n    ) {}\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve(this._store.getState());\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            config.getStoreConfig() || {};\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._hostedFormFactory.create(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return this._store.getState();\n        });\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    protected _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(\n                    this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n                ),\n            );\n    }\n\n    protected _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return form\n            .validate()\n            .then(() => this._store.dispatch(this._orderActionCreator.submitOrder(order, options)))\n            .then(() => form.submit(payment))\n            .then(() => this._store.dispatch(this._orderActionCreator.loadCurrentOrder()));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(options?: PaymentInitializeOptions): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlowV2 } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class BarclaysPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlowV2 } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class BNZPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const { methodId } = payload.payment;\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { BraintreeFormFieldsMap, BraintreeStoredCardFieldsMap } from './braintree-payment-options';\n\nexport function isBraintreeFormFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeFormFieldsMap {\n    return !!(fields as BraintreeFormFieldsMap).cardNumber;\n}\n\nexport function isBraintreeStoredCardFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeStoredCardFieldsMap {\n    return !!(\n        (fields as BraintreeStoredCardFieldsMap).cardCodeVerification ||\n        (fields as BraintreeStoredCardFieldsMap).cardNumberVerification\n    );\n}\n","import { isEmpty } from 'lodash';\n\nimport { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { StoreConfig } from '../../../config';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport {\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n} from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVerifyPayload,\n    TokenizationPayload,\n} from './braintree';\nimport BraintreeHostedForm from './braintree-hosted-form';\nimport {\n    BraintreeFormOptions,\n    BraintreePaymentInitializeOptions,\n    BraintreeThreeDSecureOptions,\n} from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport isCreditCardInstrumentLike from './is-credit-card-instrument-like';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _braintreeHostedForm: BraintreeHostedForm,\n    ) {}\n\n    initialize(\n        clientToken: string,\n        storeConfig: StoreConfig,\n        options?: BraintreePaymentInitializeOptions,\n    ): void {\n        this._braintreeSDKCreator.initialize(clientToken, storeConfig);\n        this._threeDSecureOptions = options?.threeDSecure;\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    preloadPaypalCheckout(\n        paypalCheckoutConfig: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ) {\n        return this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutConfig,\n            onSuccess,\n            onError,\n        );\n    }\n\n    async tokenizeCard(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n    ): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this._getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this._mapToCreditCard(paymentData, billingAddress);\n        const client = await this._braintreeSDKCreator.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details?.bin,\n        };\n    }\n\n    async verifyCard(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector().then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then((paymentData) =>\n                Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]),\n            )\n            .then(([paymentData, { deviceData }]) => ({\n                ...paymentData,\n                deviceSessionId: deviceData,\n            }));\n    }\n\n    async initializeHostedForm(options: BraintreeFormOptions): Promise<void> {\n        return this._braintreeHostedForm.initialize(options);\n    }\n\n    validateHostedForm() {\n        return this._braintreeHostedForm.validate();\n    }\n\n    isInitializedHostedForm(): boolean {\n        return this._braintreeHostedForm.isInitialized();\n    }\n\n    async deinitializeHostedForm(): Promise<void> {\n        await this._braintreeHostedForm.deinitialize();\n    }\n\n    tokenizeHostedForm(billingAddress: Address): Promise<NonceInstrument> {\n        return this._braintreeHostedForm.tokenize(billingAddress);\n    }\n\n    tokenizeHostedFormForStoredCardVerification(): Promise<NonceInstrument> {\n        return this._braintreeHostedForm.tokenizeForStoredCardVerification();\n    }\n\n    async verifyCardWithHostedForm(\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this._braintreeHostedForm.tokenize(billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const threeDSecure = await this._braintreeSDKCreator.get3DS();\n\n        return this._present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    async getVenmoCheckout(): Promise<BraintreeVenmoCheckout> {\n        return new Promise((resolve, reject) => {\n            this._braintreeSDKCreator.getVenmoCheckout(resolve, reject);\n        });\n    }\n\n    private _getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private _present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this._threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this._threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    addFrame(error, iframe, cancelVerifyCard);\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n\n    private _mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CreditCardInstrument } from '../../payment';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: any,\n): instrument is CreditCardInstrument {\n    return (\n        instrument &&\n        typeof instrument.ccExpiry === 'object' &&\n        typeof instrument.ccNumber === 'string' &&\n        typeof instrument.ccName === 'string'\n    );\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import { some } from 'lodash';\n\nimport {\n    BraintreeIntegrationService,\n    isBraintreeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Address } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { isHostedInstrumentLike, PaymentMethod } from '../../index';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument, PaymentInstrumentMeta } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n    private _isHostedFormInitialized?: boolean;\n    private _deviceSessionId?: string;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, gatewayId, braintree } = options;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        const { clientToken } = this._paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this._braintreePaymentProcessor.initialize(clientToken, storeConfig, braintree);\n\n            if (this._isHostedPaymentFormEnabled(methodId, gatewayId) && braintree?.form) {\n                await this._braintreePaymentProcessor.initializeHostedForm(braintree.form);\n                this._isHostedFormInitialized =\n                    this._braintreePaymentProcessor.isInitializedHostedForm();\n            }\n\n            this._is3dsEnabled = this._paymentMethod.config.is3dsEnabled;\n            this._deviceSessionId = await this._braintreePaymentProcessor.getSessionId();\n\n            // TODO: remove this part when BT AXO A/B testing will be finished\n            if (this._shouldInitializeBraintreeConnect()) {\n                await this._initializeBraintreeConnectOrThrow(methodId);\n            }\n        } catch (error) {\n            this._handleError(error);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (this._isHostedFormInitialized) {\n            this._braintreePaymentProcessor.validateHostedForm();\n        }\n\n        const {\n            billingAddress: { getBillingAddressOrThrow },\n            order: { getOrderOrThrow },\n        } = await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const billingAddress = getBillingAddressOrThrow();\n        const orderAmount = getOrderOrThrow().orderAmount;\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: this._isHostedFormInitialized\n                        ? await this._prepareHostedPaymentData(payment, billingAddress, orderAmount)\n                        : await this._preparePaymentData(payment, billingAddress, orderAmount),\n                }),\n            );\n        } catch (error) {\n            return this._processAdditionalAction(error, payment, orderAmount);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._isHostedFormInitialized = false;\n\n        await Promise.all([\n            this._braintreePaymentProcessor.deinitialize(),\n            this._braintreePaymentProcessor.deinitializeHostedForm(),\n        ]);\n\n        return this._store.getState();\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private async _preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this._deviceSessionId };\n\n        if (this._isSubmittingWithStoredCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this._shouldPerform3DSVerification(payment)\n            ? await this._braintreePaymentProcessor.verifyCard(payment, billingAddress, orderAmount)\n            : await this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return {\n            ...commonPaymentData,\n            nonce,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n    }\n\n    private async _prepareHostedPaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this._deviceSessionId };\n\n        if (this._isSubmittingWithStoredCard(payment)) {\n            const { nonce } =\n                await this._braintreePaymentProcessor.tokenizeHostedFormForStoredCardVerification();\n\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n                nonce,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this._shouldPerform3DSVerification(payment)\n            ? await this._braintreePaymentProcessor.verifyCardWithHostedForm(\n                  billingAddress,\n                  orderAmount,\n              )\n            : await this._braintreePaymentProcessor.tokenizeHostedForm(billingAddress);\n\n        return {\n            ...commonPaymentData,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n            nonce,\n        };\n    }\n\n    private async _processAdditionalAction(\n        error: Error,\n        payment: OrderPaymentRequestBody,\n        orderAmount: number,\n    ): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return this._handleError(error);\n        }\n\n        try {\n            const {\n                instruments: { getCardInstrumentOrThrow },\n            } = this._store.getState();\n            const { payer_auth_request: storedCreditCardNonce } = error.body.three_ds_result || {};\n            const { paymentData } = payment;\n\n            if (!paymentData || !isVaultedInstrument(paymentData)) {\n                throw new PaymentArgumentInvalidError(['instrumentId']);\n            }\n\n            const instrument = getCardInstrumentOrThrow(paymentData.instrumentId);\n            const { nonce } = await this._braintreePaymentProcessor.challenge3DSVerification(\n                {\n                    nonce: storedCreditCardNonce,\n                    bin: instrument.iin,\n                },\n                orderAmount,\n            );\n\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        deviceSessionId: this._deviceSessionId,\n                        nonce,\n                    },\n                }),\n            );\n        } catch (error) {\n            return this._handleError(error);\n        }\n    }\n\n    private _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isSubmittingWithStoredCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && isVaultedInstrument(payment.paymentData));\n    }\n\n    private _shouldPerform3DSVerification(payment: OrderPaymentRequestBody): boolean {\n        return !!(this._is3dsEnabled && !this._isSubmittingWithStoredCard(payment));\n    }\n\n    // TODO: remove this part when BT AXO A/B testing will be finished\n    private _shouldInitializeBraintreeConnect() {\n        const state = this._store.getState();\n        const paymentProviderCustomer = state.paymentProviderCustomer.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const isAcceleratedCheckoutEnabled =\n            this._paymentMethod?.initializationData.isAcceleratedCheckoutEnabled;\n\n        return (\n            isAcceleratedCheckoutEnabled && !braintreePaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when BT AXO A/B testing will be finished\n    private async _initializeBraintreeConnectOrThrow(methodId: string): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { clientToken, config } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeIntegrationService.initialize(clientToken, storeConfig);\n\n        await this._braintreeIntegrationService.getBraintreeConnect(cart.id, config.testMode);\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '../../payment';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError, BraintreeTokenizePayload, BraintreeVenmoCheckout } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreeVenmoPaymentStrategy implements PaymentStrategy {\n    private _braintreeVenmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        await this._initializeBraintreeVenmo(paymentMethod, storeConfig);\n\n        return this._store.getState();\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this._preparePaymentData(payment);\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentData),\n            );\n        } catch (error) {\n            this._handleError(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._braintreePaymentProcessor.deinitialize();\n\n        return this._store.getState();\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private async _initializeBraintreeVenmo(\n        paymentMethod: PaymentMethod,\n        storeConfig: StoreConfig,\n    ): Promise<void> {\n        const { clientToken } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this._braintreePaymentProcessor.initialize(clientToken, storeConfig);\n            this._braintreeVenmoCheckout = await this._braintreePaymentProcessor.getVenmoCheckout();\n        } catch (error) {\n            this._handleError(error);\n        }\n    }\n\n    private async _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { nonce } = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(payment.methodId);\n\n        if (nonce) {\n            return { ...payment, paymentData: this._formattedPayload(nonce) };\n        }\n\n        const tokenizeResult = await this._braintreeVenmoTokenize();\n        const sessionId = await this._braintreePaymentProcessor.getSessionId();\n\n        return {\n            ...payment,\n            paymentData: this._formattedPayload(\n                tokenizeResult.nonce,\n                tokenizeResult.details.email,\n                sessionId,\n            ),\n        };\n    }\n\n    private _formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private _braintreeVenmoTokenize(): Promise<BraintreeTokenizePayload> {\n        return new Promise((resolve, reject) => {\n            this._braintreeVenmoCheckout?.tokenize(\n                (error: BraintreeError | undefined, payload: BraintreeTokenizePayload) => {\n                    if (error) {\n                        return reject(error);\n                    }\n\n                    resolve(payload);\n                },\n            );\n        });\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { noop } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then((state) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { clientToken, config } = this._paymentMethod || {};\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = noop, onPaymentSelect = noop } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(config?.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(\n                        clientToken,\n                        storeConfig,\n                        initOptions,\n                    ),\n                ]).then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on(\n                        'payment.success',\n                        (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                            this._paymentInstrumentSelected(paymentSuccessPayload)\n                                .then(() => onPaymentSelect())\n                                .catch((error) => onError(error)),\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        if (\n            !this._paymentMethod ||\n            !this._paymentMethod.initializationData ||\n            !this._paymentMethod.initializationData.nonce\n        ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(\n                    this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: { nonce },\n                    }),\n                ),\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor\n            .deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._paymentStrategyActionCreator.widgetInteraction(\n                () => {\n                    return this._braintreeVisaCheckoutPaymentProcessor\n                        .handleSuccess(\n                            paymentSuccessPayload,\n                            state.shippingAddress.getShippingAddress(),\n                            state.billingAddress.getBillingAddress(),\n                        )\n                        .then(() =>\n                            Promise.all([\n                                this._store.dispatch(\n                                    this._checkoutActionCreator.loadCurrentCheckout(),\n                                ),\n                                this._store.dispatch(\n                                    this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n                                ),\n                            ]),\n                        );\n                },\n                { methodId },\n            ),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedForm } from '../../../hosted-form';\nimport { OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { InstrumentSelector } from '../../instrument';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { CardinalThreeDSecureToken } from './cardinal';\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlowV2 {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<InternalCheckoutSelectors> {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const { payment = { methodId: '' } } = payload;\n        const { paymentData = {} } = payment;\n\n        try {\n            return await execute(payload, options);\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                const token = error.body.additional_action_required?.data?.token;\n                const xid = error.body.three_ds_result?.payer_auth_request;\n\n                await this._cardinalClient.configure(token);\n\n                const bin = this._getBin(paymentData, getCardInstrument, hostedForm);\n\n                if (bin) {\n                    await this._cardinalClient.runBinProcess(bin);\n                }\n\n                try {\n                    return await this._submitPayment(payment, { xid }, hostedForm);\n                } catch (error) {\n                    if (\n                        error instanceof RequestError &&\n                        some(error.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        const threeDsResult = error.body.three_ds_result;\n                        const token = threeDsResult?.payer_auth_request;\n\n                        await this._cardinalClient.getThreeDSecureData(\n                            threeDsResult,\n                            this._getOrderData(),\n                        );\n\n                        return await this._submitPayment(payment, { token }, hostedForm);\n                    }\n\n                    throw error;\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const store = this._store.getState();\n        const billingAddress = store.billingAddress.getBillingAddressOrThrow();\n        const shippingAddress = store.shippingAddress.getShippingAddress();\n        const {\n            cart: {\n                currency: { code: currencyCode },\n                cartAmount: amount,\n            },\n        } = store.checkout.getCheckoutOrThrow();\n        const id = store.order.getOrderOrThrow().orderId.toString();\n\n        return { billingAddress, shippingAddress, currencyCode, id, amount };\n    }\n\n    private async _submitPayment(\n        payment: OrderPaymentRequestBody,\n        threeDSecure: CardinalThreeDSecureToken,\n        hostedForm?: HostedForm,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentPayload = merge({}, payment, { paymentData: { threeDSecure } });\n\n        if (!hostedForm) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        }\n\n        await hostedForm.submit(paymentPayload);\n\n        return this._store.getState();\n    }\n\n    private _getBin(\n        paymentData: NonNullable<OrderPaymentRequestBody['paymentData']>,\n        getCardInstrument: InstrumentSelector['getCardInstrument'],\n        hostedForm?: HostedForm,\n    ): string {\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const ccNumber = isCreditCardLike(paymentData) && paymentData.ccNumber;\n        const bin = instrument ? instrument.iin : hostedForm ? hostedForm.getBin() : ccNumber;\n\n        return bin || '';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(\n    instrument: PaymentInstrument,\n): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return (\n        !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string'\n    );\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp: boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(\n        eventType: ChasePayEventType,\n        callback: ChasePayEventMap[ChasePayEventType],\n    ): void;\n}\n","import { includes } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'The selected payment method was declined. Please select another payment method.',\n        );\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { noop, some } from 'lodash';\n\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodDeclinedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport {\n    RestApiResponse,\n    THREE_D_SECURE_AVAILABLE,\n    THREE_D_SECURE_BUSY,\n    THREE_D_SECURE_PROCEED,\n    ThreeDSjs,\n} from './cba-mpgs';\nimport CBAMPGSScriptLoader from './cba-mpgs-script-loader';\n\nexport default class CBAMPGSPaymentStrategy extends CreditCardPaymentStrategy {\n    private _threeDSjs?: ThreeDSjs;\n    private _sessionId = '';\n\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _CBAMGPSScriptLoader: CBAMPGSScriptLoader,\n        private _locale: string,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { methodId } = options;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const {\n            clientToken,\n            initializationData: { isTestModeFlagEnabled = false, merchantId },\n            config: { is3dsEnabled },\n        } = paymentMethod;\n\n        if (is3dsEnabled) {\n            this._threeDSjs = await this._CBAMGPSScriptLoader.load(isTestModeFlagEnabled);\n\n            if (!this._threeDSjs) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (!clientToken || !merchantId) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._sessionId = clientToken;\n\n            await this._threeDSjs.configure({\n                merchantId,\n                sessionId: this._sessionId,\n                callback: () => {\n                    if (this._threeDSjs?.isConfigured()) {\n                        return this._store.getState();\n                    }\n\n                    throw new PaymentMethodFailedError('Failed to configure 3DS API.');\n                },\n                configuration: {\n                    userLanguage: this._locale,\n                    wsVersion: 62,\n                },\n            });\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(payment.methodId);\n\n        const { is3dsEnabled } = paymentMethod.config;\n\n        if (is3dsEnabled) {\n            const newPaymentData = {\n                ...paymentData,\n                threeDSecure: { token: this._sessionId },\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error) => {\n            if (\n                !is3dsEnabled ||\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            const state = this._store.getState();\n            const order = state.order.getOrder();\n            const {\n                storeProfile: { storeId },\n            } = state.config.getStoreConfigOrThrow();\n\n            if (!order || !this._sessionId) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const orderId = `${storeId}_${order.orderId}`;\n\n            const {\n                three_ds_result: { token: transactionId },\n            } = error.body;\n\n            if (!transactionId) {\n                return Promise.reject(error);\n            }\n\n            return this._initiateAuthentication(orderId, transactionId);\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._threeDSjs = undefined;\n        this._sessionId = '';\n\n        return super.deinitialize();\n    }\n\n    private async _initiateAuthentication(\n        orderId: string,\n        transactionId: string,\n    ): Promise<InternalCheckoutSelectors> {\n        const response: RestApiResponse = await new Promise((resolve, reject) => {\n            if (!this._threeDSjs) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._threeDSjs.initiateAuthentication(orderId, transactionId, (data) => {\n                const error = data.error;\n\n                if (error) {\n                    return reject(new PaymentMethodDeclinedError(error.msg));\n                }\n\n                if (this._threeDSjs && data.gatewayRecommendation === THREE_D_SECURE_PROCEED) {\n                    return resolve(data.restApiResponse);\n                }\n\n                return reject(new PaymentMethodDeclinedError());\n            });\n        });\n\n        if (\n            response.transaction &&\n            response.transaction.authenticationStatus === THREE_D_SECURE_AVAILABLE\n        ) {\n            return this._authenticatePayer(orderId, transactionId);\n        }\n\n        throw new PaymentMethodDeclinedError();\n    }\n\n    private async _authenticatePayer(\n        orderId: string,\n        transactionId: string,\n        attempt = 1,\n    ): Promise<InternalCheckoutSelectors | never> {\n        return new Promise((_resolve, reject) => {\n            if (!this._threeDSjs) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this._threeDSjs.authenticatePayer(\n                orderId,\n                transactionId,\n                async (data) => {\n                    const error = data.error;\n\n                    if (error) {\n                        if (error.cause && error.cause === THREE_D_SECURE_BUSY && attempt < 5) {\n                            // Wait 3 seconds for MPGS server to process the `initiateAuthentication` call\n                            // See: Step 1: Initiate Authentication ->  Initiate Authentication Request:\n                            // https://ap-gateway.mastercard.com/api/documentation/integrationGuidelines/supportedFeatures/pickAdditionalFunctionality/authentication/3DS/integrationModelAPI.html?locale=en_US#x_3DSTest\n                            await new Promise((resolve) => setTimeout(resolve, 3000));\n\n                            return this._authenticatePayer(orderId, transactionId, ++attempt);\n                        }\n\n                        return reject(new PaymentMethodDeclinedError());\n                    }\n\n                    // ThreeDSjs will handle the redirect so return a promise that doesn't really resolve\n                    return new Promise<never>(noop);\n                },\n                { fullScreenRedirect: true },\n            );\n        });\n    }\n}\n","export const THREE_D_SECURE_PROCEED = 'PROCEED';\nexport const THREE_D_SECURE_BUSY = 'SERVER_BUSY';\nexport const THREE_D_SECURE_AVAILABLE = 'AUTHENTICATION_AVAILABLE';\n\nexport interface CBAMPGSHostWindow extends Window {\n    ThreeDS?: ThreeDSjs;\n}\n\nexport interface ThreeDSjs {\n    // Configuration method for initializing the API.\n    configure(config: ThreeDSConfiguration): Promise<void>;\n    // Convenience method to check if the API has been configured successfully.\n    isConfigured(): boolean;\n    // Authentication for the arguments passed.\n    initiateAuthentication(\n        orderId: string,\n        transactionId: string,\n        callback: (data: ThreeDSAuthenticationResponse) => void,\n    ): void;\n    authenticatePayer(\n        orderId: string,\n        transactionId: string,\n        callback: (data: ThreeDSAuthenticationResponse) => void,\n        optionalParams?: AuthenticatePayerOptionalParams,\n    ): void;\n}\n\nexport interface RestApiResponse {\n    transaction: {\n        authenticationStatus: string;\n    };\n}\n\n// Configuration required to configure ThreeDS\nexport interface ThreeDSConfiguration {\n    merchantId: string;\n    sessionId: string;\n    configuration: ThreeDSAPIConfiguration;\n    callback(): void;\n}\n\nexport interface ThreeDSAuthenticationResponse {\n    error?: ThreeDSAuthenticationError;\n    restApiResponse: RestApiResponse;\n    gatewayRecommendation: string;\n}\n\nexport interface AuthenticatePayerOptionalParams {\n    fullScreenRedirect: boolean;\n}\n\nexport interface ThreeDSAuthenticationError {\n    code: string;\n    msg: string;\n    cause?: string;\n}\n\n// JSON value supporting data elements like userLanguage, REST API version (wsVersion)\nexport interface ThreeDSAPIConfiguration {\n    // A language identifier or IETF language tag to control the language of the payment page displayed to the payer.\n    //  For example, \"en_US\", es, \"fr-CA\". By default, the language is \"en_US\".\n    userLanguage: string;\n    // The Web Services API version that you submitted the request in. IE: 62\n    wsVersion: number;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CBAMPGSHostWindow, ThreeDSjs } from './cba-mpgs';\n\nexport default class CBAMPGSScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CBAMPGSHostWindow = window) {}\n\n    async load(testMode?: boolean): Promise<ThreeDSjs> {\n        await this._scriptLoader.loadScript(\n            `//${\n                testMode ? 'test' : 'ap'\n            }-gateway.mastercard.com/static/threeDS/1.3.0/three-ds.min.js`,\n        );\n\n        if (!this._window.ThreeDS) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.ThreeDS;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient,\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.chasepay\" argument is not provided.',\n            );\n        }\n\n        const walletButton =\n            options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay).then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch((error) => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet().then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then((payment) => this._createOrder(payment, payload.useStoreCredit, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader\n            .load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(\n                    ChasePayEventType.CompleteCheckout,\n                    (payload: ChasePaySuccessPayload) => {\n                        this._setSessionToken(payload.sessionToken).then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                    },\n                );\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._paymentStrategyActionCreator.widgetInteraction(\n                () => {\n                    this._store\n                        .dispatch(\n                            this._paymentMethodActionCreator.loadPaymentMethod(this._methodId),\n                        )\n                        .then((state) => {\n                            const paymentMethod = state.paymentMethods.getPaymentMethod(\n                                this._methodId,\n                            );\n\n                            if (!this._chasePayClient) {\n                                throw new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                );\n                            }\n\n                            if (!paymentMethod) {\n                                throw new MissingDataError(\n                                    MissingDataErrorType.MissingPaymentMethod,\n                                );\n                            }\n\n                            this._chasePayClient.showLoadingAnimation();\n                            this._chasePayClient.startCheckout(\n                                paymentMethod.initializationData.digitalSessionId,\n                            );\n                        });\n\n                    // Wait for payment selection\n                    return new Promise<void>((resolve, reject) => {\n                        this._walletEvent$\n                            .pipe(take(1))\n                            .subscribe((event: { type: ChasePayEventType }) => {\n                                if (event.type === ChasePayEventType.CancelCheckout) {\n                                    reject(new PaymentMethodCancelledError());\n                                } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                                    resolve();\n                                }\n                            });\n                    });\n                },\n                { methodId: this._methodId },\n            ),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId =\n            paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return (\n            this._requestSender\n                .post('checkout.php', {\n                    headers: {\n                        Accept: 'text/html',\n                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    body: {\n                        action: 'set_external_checkout',\n                        provider: this._methodId,\n                        sessionToken,\n                        merchantRequestId,\n                    },\n                })\n                // Re-hydrate checkout data\n                .then(() =>\n                    Promise.all([\n                        this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                        this._store.dispatch(\n                            this._paymentMethodActionCreator.loadPaymentMethod(this._methodId),\n                        ),\n                    ]),\n                )\n                .then(() => this._store.getState())\n        );\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient\n                        .initialize()\n                        .then((client) => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then((riskToken) => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(\n        payment: Payment,\n        useStoreCredit?: boolean,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export interface DigitalRiverWindow extends Window {\n    /**\n     * Object to create an instance of the DigitalRiver object. This is called a Digital River publishable API key\n     * This function accepts an optional options object using the following format DigitalRiver(publishableApiKey{, options})\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/digitalriver.js/reference/digital-river-publishable-api-key\n     */\n    DigitalRiver?: DigitalRiverClass;\n}\n\nexport type DigitalRiverClass = new (\n    apiKey: string,\n    options?: DigitalRiverJSOptions,\n) => DigitalRiverJS;\n\nexport default interface DigitalRiverJS {\n    createDropin(configuration: DigitalRiverDropInConfiguration): DigitalRiverDropIn;\n    authenticateSource(\n        data: DigitalRiverAuthenticateSourceRequest,\n    ): Promise<DigitalRiverAuthenticateSourceResponse>;\n    createElement(type: string, options: DigitalRiverElementOptions): DigitalRiverElement;\n}\n\nexport interface DigitalRiverElementOptions {\n    classes: {\n        base: string;\n    };\n    compliance: {\n        entity: string;\n    };\n}\n\ninterface DigitalRiverAuthenticateSourceRequest {\n    sessionId: string;\n    sourceId: string;\n    sourceClientSecret: string;\n}\n\nexport interface DigitalRiverAdditionalProviderData {\n    source_id: string;\n    source_client_secret: string;\n}\n\nexport interface DigitalRiverAuthenticateSourceResponse {\n    status: AuthenticationSourceStatus;\n}\n\nexport enum AuthenticationSourceStatus {\n    complete = 'complete',\n    authentication_not_required = 'authentication_not_required',\n    failed = 'failed',\n}\n\nexport interface DigitalRiverJSOptions {\n    /**\n     * The locale used to localize the various display and error strings within DigitalRiver.js\n     * Currently supported locales:\n     * ar-EG, cs-CZ, da-DK, de-AT, de-CH, de-DE, el-GR, en-AU, en-BE, en-CA, en-CH, en-DK, en-FI, en-GB, en-IE, en-IN,\n     * en-MY, en-NL, en-NO, en-NZ, en-PR, en-SE, en-SG, en-US, en-ZA, es-AR, es-CL, es-CO, es-EC, es-ES, es-MX, es-PE,\n     * es-VE, et-EE, fi-FI, fr-BE, fr-CA, fr-CH, fr-FR, hu-HU, it-CH, it-IT, iw-IL, ja-JP, ko-KR, lt-LT, lv-LV, nl-BE,\n     * nl-NL, no-NO, pl-PL, pt-BR, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sr-YU, sv-SE, th-TH, tr-TR, zh-CN, zh-HK, zh-TW\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/digitalriver.js/reference/digital-river-publishable-api-key\n     */\n    locale?: string;\n}\n\n/**\n * Create a Configuration object for Drop-in\n * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#step-5-configure-hydrate\n */\nexport interface DigitalRiverDropInConfiguration {\n    /**\n     * The  payment session identifier returned by Digital River.\n     */\n    sessionId: string;\n\n    /**\n     * you can specify options to trigger different features or functionality\n     */\n    options?: OptionsResponse;\n    billingAddress: {\n        firstName: string;\n        lastName: string;\n        email: string;\n        phoneNumber: string;\n        address: {\n            line1: string;\n            line2?: string;\n            city?: string;\n            state?: string;\n            postalCode: string;\n            country: string;\n        };\n    };\n\n    /**\n     * Additional configuration details for configuration structure (classes, styles etc..)\n     */\n    paymentMethodConfiguration?: BaseElementOptions;\n\n    /**\n     * The function called when the shopper has authorized payment and a payment source has been successfully created.\n     */\n    onSuccess?(data: OnSuccessResponse): void;\n\n    /**\n     * The function called when the shopper cancels the payment process before authorizing payment.\n     */\n    onCancel?(error: OnCancelOrErrorResponse): void;\n\n    /**\n     * The function called when an error has occurred.\n     */\n    onError?(error: OnCancelOrErrorResponse): void;\n\n    /**\n     * The function called when Drop-in is ready for user interaction.\n     */\n    onReady?(data: OnReadyResponse): void;\n}\n\nexport interface OnCancelOrErrorResponse {\n    /**\n     * If an error occurs, Drop-in emits an event that identifies the payment method associated with the error.\n     * Instruct your customer to provide a new method of payment.\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#onerror\n     * Or When your customer chooses to pay with a specific payment method and decides to cancel during the redirect phase,\n     * Drop-in emits an event that identifies the cancelled payment method.\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#oncancel\n     */\n    errors: ErrorData[];\n}\n\nexport interface ErrorData {\n    code: string;\n    message: string;\n}\n\nexport interface OnReadyResponse {\n    /**\n     * When ready, Drop-in will emit an event that contains a \"paymentMethodTypes\" array of the available payment methods.\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#onready\n     */\n    paymentMethodTypes: string[];\n}\n\n/**\n * When creating your Drop-in instance, you can specify options to trigger different features or functionality.\n * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#drop-in-options\n */\nexport interface OptionsResponse {\n    /**\n     * Use this option if you are using Drop-in within a standard checkout flow. Example Value: \"checkout\"\n     */\n    flow?: string;\n\n    /**\n     * When enabled, presents the customer with an option to save their payment details for future use within Drop-in.\n     * Enabling this feature will show the appropriate check boxes and localized disclosure statements and facilitate\n     * any necessary Strong Customer Authentication.\n     * If disabled, Drop-in will not present the customer with an option to save their payment details.\n     */\n    showSavePaymentAgreement?: boolean;\n\n    /**\n     * Will show a localized compliance link section as part of Drop-in. This is an important piece for accessing the Digital River business model.\n     */\n    showComplianceSection?: boolean;\n\n    /**\n     * Use this option to customize the text of the Drop-in button.\n     */\n    button?: ButtonResponse;\n\n    /**\n     * Use this option to specify the future use of a source.\n     */\n    usage?: string;\n\n    /**\n     * Use this option to show the required terms of sale disclosure. These localized terms automatically update if recurring products are purchased.\n     */\n    showTermsOfSaleDisclosure?: boolean;\n\n    /**\n     * Additional configuration details for drop-in.\n     */\n    paymentMethodConfiguration?: BaseElementOptions;\n}\n\nexport interface ButtonResponse {\n    /**\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#customizing-the-text-of-the-drop-in-button\n     * The text of the Drop-in button is customizable. You can either display pre-configured text or you can specify a unique text\n     * Examples type: \"payNow\" || type: \"buyNow\" || type: \"completeOrder\" || type: \"submitOrder\"\n     */\n    type: string;\n}\n\nexport interface OnSuccessResponse {\n    /**\n     * Event that gets triggered after the customer's payment has provided with the necessary details for payment\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#onsuccess\n     */\n    source: {\n        id: string;\n        reusable: boolean;\n        browserInfo?: {\n            browserIp?: string;\n        };\n        owner?: {\n            email: string;\n            firstName: string;\n            lastName: string;\n            phoneNumber: string;\n            address: {\n                city: string;\n                country: string;\n                line1: string;\n                postalCode: string;\n                state: string;\n            };\n        };\n    };\n\n    /**\n     * Indicates whether the source has been enabled for future use.\n     * Important: If this value is true, it does not mean the customer can use this source multiple times.\n     * This flag identifies whether the necessary downstream actions have been triggered to prepare the source for storage.\n     * You must attach the source to your customer for it to be truly reusable.\n     */\n    readyForStorage: boolean;\n}\n\nexport interface DigitalRiverDropIn {\n    /**\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#step-7-place-drop-in-on-your-checkout-or-customer-page\n     * example \"drop-in\"\n     */\n    mount(dropInId: string): void;\n}\n\ninterface DigitalRiverElement {\n    /**\n     * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/drop-in/drop-in-integration-guide#step-7-place-drop-in-on-your-checkout-or-customer-page\n     * example \"drop-in\"\n     */\n    mount(dropInId: string): void;\n}\n\ninterface BaseElementOptions {\n    /**\n     * Set custom class names on the container DOM element when the Digital River element is in a particular state.\n     */\n    classes?: DigitalRiverElementClasses;\n    /**\n     * Use disabledPaymentMethods to disable specific payment methods.\n     */\n    disabledPaymentMethods?: string[];\n}\n\n/**\n * Custom classes\n * You can specify custom classes as part of a Class object included within the Options object when you create or\n * update an element. If you do not provide custom classes, the system uses the default options.\n * https://docs.digitalriver.com/digital-river-api/payment-integrations-1/digitalriver.js/reference/elements#custom-classes\n */\nexport interface DigitalRiverElementClasses {\n    /**\n     * The Element is in its base state. The user either has not entered anything into the input field or is currently typing.\n     */\n    base?: string;\n\n    /**\n     * The Element is in its complete state. The user has input value, and it meets the basic validation requirements of that field.\n     */\n    complete?: string;\n\n    /**\n     * The Element is empty. The Element once had value but is now empty.\n     */\n    empty?: string;\n\n    /**\n     * The Element has focus.\n     */\n    focus?: string;\n\n    /**\n     * The Element has value, but it does not meet the basic validation requirements of the field.\n     */\n    invalid?: string;\n\n    /**\n     * The element has a value that has been automatically filled by the browser.\n     */\n    webkitAutofill?: string;\n}\n\nexport interface DigitalRiverInitializeToken {\n    sessionId: string;\n    checkoutData: DigitalRiverCheckoutData;\n}\n\ninterface DigitalRiverCheckoutData {\n    checkoutId: string;\n    sellingEntity: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class ConvergePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options).catch((error) => {\n            if (\n                !(error instanceof RequestError) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                    PaReq: error.body.three_ds_result.payer_auth_request,\n                    TermUrl: error.body.three_ds_result.callback_url,\n                    MD: error.body.three_ds_result.merchant_data,\n                });\n            });\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nconst defaultMessage =\n    'There was an error while processing your payment. Please try again or contact us.';\n\nexport default class DigitalRiverError extends StandardError {\n    constructor(type: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.type = type;\n        this.name = name;\n    }\n}\n","import { some } from 'lodash';\n\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, isVaultedInstrument } from '../../index';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport DigitalRiverJS, {\n    AuthenticationSourceStatus,\n    DigitalRiverAdditionalProviderData,\n    DigitalRiverAuthenticateSourceResponse,\n    DigitalRiverDropIn,\n    DigitalRiverElementOptions,\n    DigitalRiverInitializeToken,\n    OnCancelOrErrorResponse,\n    OnReadyResponse,\n    OnSuccessResponse,\n} from './digitalriver';\nimport DigitalRiverError from './digitalriver-error';\nimport DigitalRiverPaymentInitializeOptions from './digitalriver-payment-initialize-options';\nimport DigitalRiverScriptLoader from './digitalriver-script-loader';\n\nexport default class DigitalRiverPaymentStrategy implements PaymentStrategy {\n    private _digitalRiverJS?: DigitalRiverJS;\n    private _digitalRiverDropComponent?: DigitalRiverDropIn;\n    private _submitFormEvent?: () => void;\n    private _loadSuccessResponse?: OnSuccessResponse;\n    private _digitalRiverCheckoutData?: DigitalRiverInitializeToken;\n    private _unsubscribe?: () => void;\n    private _digitalRiverInitializeOptions?: DigitalRiverPaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _digitalRiverScriptLoader: DigitalRiverScriptLoader,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._digitalRiverInitializeOptions = options.digitalriver;\n\n        const paymentMethod = this._store\n            .getState()\n            .paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        const { publicKey, paymentLanguage: locale } = paymentMethod.initializationData;\n        const { containerId } = this._getDigitalRiverInitializeOptions();\n\n        this._digitalRiverJS = await this._digitalRiverScriptLoader.load(publicKey, locale);\n\n        this._unsubscribe = await this._store.subscribe(\n            async (state) => {\n                if (\n                    state.paymentStrategies.isInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        container.innerHTML = '';\n\n                        this._digitalRiverJS = await this._digitalRiverScriptLoader.load(\n                            publicKey,\n                            locale,\n                        );\n                    }\n\n                    await this._loadWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.checkout.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        return this._loadWidget(options);\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        const { containerId } = this._getDigitalRiverInitializeOptions();\n        const container = document.getElementById(containerId);\n\n        if (container) {\n            container.innerHTML = '';\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, methodId } = payment;\n        const { shouldSetAsDefaultInstrument = false } = paymentData as HostedInstrument;\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        if (!this._digitalRiverCheckoutData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (isVaultedInstrument(paymentData)) {\n            try {\n                return await this._submitVaultedInstrument(\n                    methodId,\n                    paymentData.instrumentId,\n                    this._digitalRiverCheckoutData.checkoutData.checkoutId,\n                    shouldSetAsDefaultInstrument,\n                    false,\n                );\n            } catch (error) {\n                if (!this._isAuthenticateSourceAction(error)) {\n                    throw error;\n                }\n\n                const confirm = await this._authenticateSource(error.body.provider_data);\n\n                return await this._submitVaultedInstrument(\n                    methodId,\n                    paymentData.instrumentId,\n                    this._digitalRiverCheckoutData.checkoutData.checkoutId,\n                    shouldSetAsDefaultInstrument,\n                    confirm,\n                );\n            }\n        } else {\n            if (!this._loadSuccessResponse) {\n                throw new PaymentArgumentInvalidError(['this._loadSuccessResponse']);\n            }\n\n            const paymentPayload = {\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                checkoutId: this._digitalRiverCheckoutData.checkoutData.checkoutId,\n                                source: this._loadSuccessResponse,\n                                sessionId: this._digitalRiverCheckoutData.sessionId,\n                            }),\n                        },\n                        vault_payment_instrument: this._loadSuccessResponse.readyForStorage,\n                        set_as_default_stored_instrument: false,\n                    },\n                },\n            };\n\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getDigitalRiverJs(): DigitalRiverJS {\n        if (!this._digitalRiverJS) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._digitalRiverJS;\n    }\n\n    private _getErrorMessage(error: OnCancelOrErrorResponse): string {\n        const { errors } = error;\n\n        return errors.map((e) => `code: ${e.code} message: ${e.message}`).join('\\n');\n    }\n\n    private async _onSuccessResponse(data?: OnSuccessResponse): Promise<void> {\n        const error = new InvalidArgumentError(\n            'Unable to initialize payment because success argument is not provided.',\n        );\n\n        if (data && this._submitFormEvent) {\n            const { browserInfo, owner } = data.source;\n\n            this._loadSuccessResponse = browserInfo\n                ? {\n                      source: {\n                          id: data.source.id,\n                          reusable: data.source.reusable,\n                          ...browserInfo,\n                      },\n                      readyForStorage: data.readyForStorage,\n                  }\n                : {\n                      source: {\n                          id: data.source.id,\n                          reusable: data.source.reusable,\n                      },\n                      readyForStorage: data.readyForStorage,\n                  };\n\n            if (owner) {\n                const billingAddressPayPal = {\n                    firstName: owner.firstName,\n                    lastName: owner.lastName,\n                    city: owner.address.city,\n                    company: '',\n                    address1: owner.address.line1,\n                    address2: '',\n                    postalCode: owner.address.postalCode,\n                    countryCode: owner.address.country,\n                    phone: owner.phoneNumber,\n                    stateOrProvince: owner.address.state,\n                    stateOrProvinceCode: owner.address.country,\n                    customFields: [],\n                    email: owner.email || owner.email,\n                };\n\n                this._loadSuccessResponse.source.owner = data.source.owner;\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(billingAddressPayPal),\n                );\n            }\n\n            return this._submitFormEvent();\n        }\n\n        return this._getDigitalRiverInitializeOptions().onError?.(error);\n    }\n\n    private _onReadyResponse(data?: OnReadyResponse): void {\n        if (data) {\n            this._getDigitalRiverInitializeOptions().onRenderButton?.();\n        }\n    }\n\n    private _getDigitalRiverInitializeOptions(): DigitalRiverPaymentInitializeOptions {\n        if (!this._digitalRiverInitializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._digitalRiverInitializeOptions;\n    }\n\n    private async _loadWidget(\n        options: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        try {\n            const state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId),\n            );\n            const billing = state.billingAddress.getBillingAddressOrThrow();\n            const customer = state.customer.getCustomerOrThrow();\n            const { features } = state.config.getStoreConfigOrThrow().checkoutSettings;\n            const { paymentMethodConfiguration } =\n                this._getDigitalRiverInitializeOptions().configuration;\n            const { containerId, configuration } = this._getDigitalRiverInitializeOptions();\n            const { clientToken } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n            if (!clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._digitalRiverCheckoutData = JSON.parse(clientToken);\n\n            if (!this._digitalRiverCheckoutData) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._mountComplianceSection(this._digitalRiverCheckoutData.checkoutData.sellingEntity);\n\n            this._submitFormEvent = this._getDigitalRiverInitializeOptions().onSubmitForm;\n\n            const disabledPaymentMethods = features['PROJECT-4802.digital_river_paypal_support']\n                ? []\n                : ['payPal'];\n\n            const digitalRiverConfiguration = {\n                sessionId: this._digitalRiverCheckoutData.sessionId,\n                options: {\n                    ...configuration,\n                    showSavePaymentAgreement:\n                        Boolean(customer.email) && configuration.showSavePaymentAgreement,\n                },\n                billingAddress: {\n                    firstName: billing.firstName,\n                    lastName: billing.lastName,\n                    email: billing.email || customer.email,\n                    phoneNumber: billing.phone,\n                    address: {\n                        line1: billing.address1,\n                        line2: billing.address2,\n                        city: billing.city,\n                        state: billing.stateOrProvinceCode,\n                        postalCode: billing.postalCode,\n                        country: billing.countryCode,\n                    },\n                },\n                paymentMethodConfiguration: {\n                    ...paymentMethodConfiguration,\n                    disabledPaymentMethods,\n                },\n                onSuccess: (data?: OnSuccessResponse) => {\n                    this._onSuccessResponse(data);\n                },\n                onReady: (data?: OnReadyResponse) => {\n                    this._onReadyResponse(data);\n                },\n                onError: (error: OnCancelOrErrorResponse) => {\n                    const descriptiveError = new Error(this._getErrorMessage(error));\n\n                    this._getDigitalRiverInitializeOptions().onError?.(descriptiveError);\n                },\n            };\n\n            this._digitalRiverDropComponent = await this._getDigitalRiverJs().createDropin(\n                digitalRiverConfiguration,\n            );\n            this._digitalRiverDropComponent.mount(containerId);\n\n            return state;\n        } catch {\n            throw new DigitalRiverError(\n                'payment.digitalriver_checkout_error',\n                'digitalRiverCheckoutError',\n            );\n        }\n    }\n\n    private _isAuthenticateSourceAction(error: unknown): boolean {\n        return !(\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        );\n    }\n\n    private async _authenticateSource(\n        additionalAction: DigitalRiverAdditionalProviderData,\n    ): Promise<boolean> {\n        if (!this._digitalRiverCheckoutData) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because payload payment argument is not provided.',\n            );\n        }\n\n        const authenticateSourceResponse: DigitalRiverAuthenticateSourceResponse =\n            await this._getDigitalRiverJs().authenticateSource({\n                sessionId: this._digitalRiverCheckoutData.sessionId,\n                sourceId: additionalAction.source_id,\n                sourceClientSecret: additionalAction.source_client_secret,\n            });\n\n        if (authenticateSourceResponse.status === AuthenticationSourceStatus.failed) {\n            throw new Error('Source authentication failed, please try again');\n        }\n\n        return (\n            authenticateSourceResponse.status === AuthenticationSourceStatus.complete ||\n            authenticateSourceResponse.status ===\n                AuthenticationSourceStatus.authentication_not_required\n        );\n    }\n\n    private async _submitVaultedInstrument(\n        methodId: string,\n        instrumentId: string,\n        checkoutId: string,\n        shouldSetAsDefaultInstrument: boolean,\n        confirm: boolean,\n    ): Promise<InternalCheckoutSelectors> {\n        const paymentPayload = {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                    credit_card_token: {\n                        token: JSON.stringify({\n                            checkoutId,\n                        }),\n                    },\n                    confirm,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                },\n            },\n        };\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _mountComplianceSection(sellingEntity: string) {\n        const complianceDiv = document.getElementById('compliance');\n\n        const complianceOptions: DigitalRiverElementOptions = {\n            classes: {\n                base: 'DRElement',\n            },\n            compliance: {\n                entity: sellingEntity,\n            },\n        };\n\n        if (complianceDiv) {\n            complianceDiv.innerHTML = '';\n\n            const complianceElement = this._getDigitalRiverJs().createElement(\n                'compliance',\n                complianceOptions,\n            );\n\n            complianceElement.mount('compliance');\n        } else {\n            const drfooter = document.createElement('div');\n\n            drfooter.setAttribute('id', 'compliance');\n            drfooter.style.cssText = 'min-height: 45px;';\n            drfooter.classList.add('layout');\n            document.body.appendChild(drfooter);\n\n            const complianceElement = this._getDigitalRiverJs().createElement(\n                'compliance',\n                complianceOptions,\n            );\n\n            complianceElement.mount('compliance');\n        }\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport DigitalRiverJS, { DigitalRiverWindow } from './digitalriver';\n\nexport default class DigitalRiverScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: DigitalRiverWindow = window,\n    ) {}\n\n    async load(publicKey: string, locale: string): Promise<DigitalRiverJS> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://js.digitalriverws.com/v1/css/DigitalRiver.css`,\n            ),\n            this._scriptLoader.loadScript(`https://js.digitalriverws.com/v1/DigitalRiver.js`),\n        ]);\n\n        if (!this._window.DigitalRiver) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(new this._window.DigitalRiver(publicKey, { locale }));\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    return {\n        color_depth: screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language: navigator.language || (navigator as any).userLanguage,\n        screen_height: screen.height,\n        screen_width: screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { noop } from 'lodash';\n\nimport { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { PaymentStrategyType } from '../../index';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport {\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSDKCreator,\n    BraintreeVerifyPayload,\n} from '../braintree';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    GooglePaymentData,\n    GooglePayProviderProcessor,\n    GooglePayVerifyPayload,\n    PaymentMethodData,\n} from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _walletButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n    private _is3dsEnabled?: boolean;\n    private _buttonClickEventHandler?: (event: Event) => Promise<InternalCheckoutSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _googlePayProviderProcessor?: GooglePayProviderProcessor,\n        private _braintreeSDKCreator?: BraintreeSDKCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        this._is3dsEnabled =\n            state.paymentMethods.getPaymentMethodOrThrow(\n                methodId,\n            ).initializationData.isThreeDSecureEnabled;\n\n        this._googlePayOptions = this._getGooglePayOptions(options);\n\n        this._buttonClickEventHandler = this._handleButtonClickedEvent(methodId);\n\n        if (\n            this._braintreeSDKCreator &&\n            this._paymentMethod.clientToken &&\n            this._paymentMethod.initializationData\n        ) {\n            this._braintreeSDKCreator.initialize(this._paymentMethod.clientToken, storeConfig);\n        }\n\n        await this._googlePayPaymentProcessor.initialize(methodId);\n\n        if (!this._googlePayOptions.walletButton) {\n            throw new InvalidArgumentError('walletButton argument is missing');\n        }\n\n        const walletButton = document.getElementById(this._googlePayOptions.walletButton);\n\n        if (!walletButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet, walletButton ID could not be found',\n            );\n        }\n\n        this._walletButton = walletButton;\n        this._walletButton.addEventListener('click', this._buttonClickEventHandler);\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._buttonClickEventHandler) {\n            this._walletButton.removeEventListener('click', this._buttonClickEventHandler);\n        }\n\n        this._buttonClickEventHandler = undefined;\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize().then(() => this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.googlepay\" argument is not provided.',\n            );\n        }\n\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payload.payment;\n\n        if (this._paymentMethod?.initializationData.nonce !== '') {\n            const state = this._store.getState();\n\n            this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        }\n\n        let payment = await this._getPayment(methodId);\n\n        if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n            const { onError, onPaymentSelect } = this._googlePayOptions;\n\n            await this._displayWallet(methodId, onPaymentSelect, onError);\n            payment = await this._getPayment(methodId, true);\n        }\n\n        if (!payment.paymentData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        try {\n            const state = await this._store.dispatch(\n                this._orderActionCreator.submitOrder(\n                    { useStoreCredit: payload.useStoreCredit },\n                    options,\n                ),\n            );\n            let verification;\n\n            if (this._is3dsEnabled) {\n                const {\n                    order: { getOrderOrThrow },\n                } = state;\n\n                verification = await this._verifyCard(\n                    methodId,\n                    getOrderOrThrow().orderAmount,\n                    payment,\n                );\n            }\n\n            const newPayment = {\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    nonce: verification?.nonce || payment.paymentData.nonce,\n                },\n            };\n\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment(newPayment));\n        } catch (error) {\n            return this._processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayProviderProcessor) {\n            return Promise.reject(error);\n        }\n\n        return this._googlePayProviderProcessor.processAdditionalAction(error);\n    }\n\n    private async _verifyCard(\n        methodId: string,\n        amount: number,\n        payment: PaymentMethodData,\n    ): Promise<GooglePayVerifyPayload> {\n        if (methodId === PaymentStrategyType.BRAINTREE_GOOGLE_PAY) {\n            const { nonce, cardInformation } = payment.paymentData;\n            const threeDSecure = await this._braintreeSDKCreator?.get3DS();\n\n            if (!nonce || !threeDSecure) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            return this._braintreePresent3DSChallenge(\n                threeDSecure,\n                amount,\n                nonce,\n                cardInformation?.bin,\n            );\n        }\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ): Promise<BraintreeVerifyPayload> {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                nonce,\n                bin,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n\n    /* tslint:disable:cyclomatic-complexity */\n    private _getGooglePayOptions(\n        options: PaymentInitializeOptions,\n    ): GooglePayPaymentInitializeOptions {\n        if (\n            options.methodId === PaymentStrategyType.ADYENV2_GOOGLEPAY &&\n            options.googlepayadyenv2\n        ) {\n            if (!this._googlePayProviderProcessor) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._googlePayProviderProcessor.initialize(options);\n\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.ADYENV3_GOOGLEPAY &&\n            options.googlepayadyenv3\n        ) {\n            if (!this._googlePayProviderProcessor) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._googlePayProviderProcessor.initialize(options);\n\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === PaymentStrategyType.BNZ_GOOGLEPAY && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.CHECKOUTCOM_GOOGLE_PAY &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.CYBERSOURCEV2_GOOGLE_PAY &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.ORBITAL_GOOGLE_PAY &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.BRAINTREE_GOOGLE_PAY &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === PaymentStrategyType.STRIPE_GOOGLE_PAY && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.STRIPE_UPE_GOOGLE_PAY &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        if (\n            options.methodId === PaymentStrategyType.WORLDPAYACCESS_GOOGLE_PAY &&\n            options.googlepayworldpayaccess\n        ) {\n            return options.googlepayworldpayaccess;\n        }\n\n        throw new InvalidArgumentError(\n            'Unable to initialize payment because \"options.googlepay\" argument is not provided.',\n        );\n    }\n    /* tslint:enable:cyclomatic-complexity */\n\n    private async _getPayment(\n        methodId: string,\n        requireRenewNonce = false,\n    ): Promise<PaymentMethodData> {\n        if (!methodId || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const card_information = this._paymentMethod.initializationData.card_information;\n        let nonce = this._paymentMethod.initializationData.nonce;\n\n        if (nonce) {\n            this._paymentMethod = { ...this._paymentMethod, initializationData: { nonce: '' } };\n        }\n\n        if (requireRenewNonce) {\n            const state = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n            );\n\n            this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            nonce = this._paymentMethod.initializationData.nonce;\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                method: methodId,\n                cardInformation: card_information,\n                nonce: await this._encodeNonce(methodId, nonce),\n            },\n        };\n    }\n\n    private async _encodeNonce(methodId: string, nonce: string) {\n        if (methodId === PaymentStrategyType.ADYENV2_GOOGLEPAY) {\n            return JSON.stringify({\n                type: this._paymentMethod?.method,\n                googlePayToken: nonce,\n                browser_info: getBrowserInfo(),\n            });\n        }\n\n        if (methodId === PaymentStrategyType.ADYENV3_GOOGLEPAY) {\n            return JSON.stringify({\n                type: this._paymentMethod?.method,\n                googlePayToken: nonce,\n                browser_info: getBrowserInfo(),\n            });\n        }\n\n        return nonce;\n    }\n\n    private async _paymentInstrumentSelected(paymentData: GooglePaymentData, methodId: string) {\n        if (!methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        return Promise.all([\n            this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n        ]);\n    }\n\n    private _handleButtonClickedEvent(\n        methodId: string,\n    ): (event?: Event) => Promise<InternalCheckoutSelectors> {\n        return (event?: Event) => {\n            event?.preventDefault();\n\n            const cart = this._store.getState().cart.getCartOrThrow();\n\n            const payloadToUpdate = {\n                transactionInfo: {\n                    currencyCode: cart.currency.code,\n                    totalPrice: String(cart.cartAmount),\n                },\n            };\n\n            this._googlePayPaymentProcessor.updatePaymentDataRequest(payloadToUpdate);\n\n            if (!methodId || !this._googlePayOptions) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onError, onPaymentSelect } = this._googlePayOptions;\n\n            return this._store.dispatch(\n                this._paymentStrategyActionCreator.widgetInteraction(\n                    async () => this._displayWallet(methodId, onPaymentSelect, onError),\n                    { methodId },\n                ),\n                { queueId: 'widgetInteraction' },\n            );\n        };\n    }\n\n    private async _displayWallet(\n        methodId: string,\n        onPaymentSelect = noop,\n        onError = noop,\n    ): Promise<void> {\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._paymentInstrumentSelected(paymentData, methodId);\n\n            return onPaymentSelect();\n        } catch (error) {\n            if (error.statusCode === 'CANCELED') {\n                throw new Error('CANCELED');\n            }\n\n            onError(error);\n        }\n    }\n}\n","import PaymentMethod from '../../payment-method';\n\nimport { OpyWidgetConfig } from './opy-library';\n\nexport enum ActionTypes {\n    FORM_POST = 'FormPost',\n    WAIT_FOR_CUSTOMER = 'WaitForCustomer',\n}\n\ninterface FormPost {\n    type: ActionTypes.FORM_POST;\n    formPost: {\n        formPostUrl: string;\n        formFields: [\n            {\n                fieldName: string;\n                fieldValue: string;\n            },\n        ];\n    };\n}\n\ninterface WaitForCustomer {\n    type: ActionTypes.WAIT_FOR_CUSTOMER;\n}\n\nexport interface OpyPaymentMethod extends PaymentMethod {\n    initializationData: {\n        nextAction?: FormPost | WaitForCustomer;\n        widgetConfig: OpyWidgetConfig;\n    };\n}\n\nexport function isOpyPaymentMethod(\n    paymentMethod: PaymentMethod,\n): paymentMethod is OpyPaymentMethod {\n    return !!paymentMethod.initializationData?.widgetConfig;\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport enum OpyErrorType {\n    InvalidCart = 'invalid_cart',\n}\nexport default class OpyError extends StandardError {\n    subtype: string;\n\n    constructor(subtype: OpyErrorType, displayName: string) {\n        super(getErrorMessage(subtype, displayName));\n\n        this.name = 'OpyError';\n        this.type = 'opy_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: OpyErrorType, displayName: string): string {\n    switch (type) {\n        case OpyErrorType.InvalidCart:\n            return `Cart price is different to ${displayName} plan amount.`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { PaymentInitializeOptions } from '../../payment-request-options';\n\nimport { GooglePayProviderProcessor } from './googlepay';\n\nexport default class GooglePayCheckoutcomPaymentProcessor implements GooglePayProviderProcessor {\n    initialize(_options: PaymentInitializeOptions): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        const redirectUrl = error.body.three_ds_result.acs_url;\n\n        return this._performRedirect(redirectUrl);\n    }\n\n    private _performRedirect(redirectUrl: string): Promise<InternalCheckoutSelectors> {\n        return new Promise(() => {\n            window.location.assign(redirectUrl);\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport formatLocale from './format-locale';\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const masterpassScriptLoaderParams = {\n            useMasterpassSrc: this._paymentMethod.initializationData.isMasterpassSrcEnabled,\n            language: formatLocale(this._locale),\n            testMode: this._paymentMethod.config.testMode,\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n        };\n\n        return this._masterpassScriptLoader\n            .load(masterpassScriptLoaderParams)\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError(\n                        'Unable to initialize payment because \"options.masterpass\" argument is not provided.',\n                    );\n                }\n\n                const walletButton =\n                    options.masterpass.walletButton &&\n                    document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        if (\n            !this._paymentMethod ||\n            !this._paymentMethod.initializationData ||\n            !this._paymentMethod.initializationData.gateway\n        ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.',\n            );\n        }\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(\n                    this._paymentActionCreator.submitPayment({ ...payment, paymentData }),\n                ),\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { isEmpty, map, omitBy } from 'lodash';\n\nimport { isHostedInstrumentLike } from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory, HostedFormOptions } from '../../../hosted-form';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport MonerisStylingProps, {\n    MoneriesHostedFieldsQueryParams,\n    MonerisInitializationData,\n    MonerisResponseData,\n} from './moneris';\nimport MonerisPaymentInitializeOptions from './moneris-payment-initialize-options';\n\nconst IFRAME_NAME = 'moneris-payment-iframe';\nconst RESPONSE_SUCCESS_CODE = '001';\n\nexport default class MonerisPaymentStrategy implements PaymentStrategy {\n    private _iframe?: HTMLIFrameElement;\n    private _initializeOptions?: MonerisPaymentInitializeOptions;\n    private _windowEventListener?: (response: MessageEvent) => void;\n\n    private _hostedForm?: HostedForm;\n\n    constructor(\n        private _hostedFormFactory: HostedFormFactory,\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        const { moneris: monerisOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!monerisOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.moneris\" argument is not provided.',\n            );\n        }\n\n        this._initializeOptions = monerisOptions;\n\n        const { config, initializationData } =\n            state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!initializationData?.profileId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (monerisOptions.form && this._shouldShowTSVHostedForm(methodId)) {\n            this._hostedForm = await this._mountCardVerificationfields(monerisOptions.form);\n        }\n\n        if (!this._iframe) {\n            this._iframe = this._createIframe(\n                monerisOptions.containerId,\n                initializationData,\n                !!config.testMode,\n            );\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit),\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n            return this._executeWithVaulted(payment);\n        }\n\n        return this._executeWithCC(payment);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        if (this._windowEventListener) {\n            window.removeEventListener('message', this._windowEventListener);\n            this._windowEventListener = undefined;\n        }\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _executeWithCC(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(payment.methodId);\n\n        const testMode = paymentMethod.config.testMode;\n        const paymentData = payment.paymentData || {};\n        const instrumentSettings = isHostedInstrumentLike(paymentData)\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = instrumentSettings;\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            if (!this._iframe) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const frameref = this._iframe.contentWindow;\n\n            frameref?.postMessage('tokenize', this._monerisURL(!!testMode));\n\n            this._windowEventListener = (response: MessageEvent) => {\n                if (typeof response.data !== 'string') {\n                    return;\n                }\n\n                try {\n                    resolve(this._handleMonerisResponse(response));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            window.addEventListener('message', this._windowEventListener);\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(\n                this._paymentActionCreator.submitPayment({\n                    methodId: payment.methodId,\n                    paymentData: { nonce, shouldSaveInstrument, shouldSetAsDefaultInstrument },\n                }),\n            );\n        }\n\n        return this._store.getState();\n    }\n\n    private async _executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            const form = this._hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n        }\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n    }\n\n    private _shouldShowTSVHostedForm(methodId: string): boolean {\n        return this._isHostedPaymentFormEnabled(methodId) && this._isHostedFieldAvailable();\n    }\n\n    private _isHostedPaymentFormEnabled(methodId: string): boolean {\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private _isHostedFieldAvailable(): boolean {\n        const options = this._getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private _getInitializeOptions(): MonerisPaymentInitializeOptions {\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._initializeOptions;\n    }\n\n    private async _mountCardVerificationfields(\n        formOptions: HostedFormOptions,\n    ): Promise<HostedForm> {\n        const { config } = this._store.getState();\n        const bigpayBaseUrl = config.getStoreConfig()?.paymentSettings.bigpayBaseUrl;\n\n        if (!bigpayBaseUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const form = this._hostedFormFactory.create(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private _createIframe(\n        containerId: string,\n        initializationData: MonerisInitializationData,\n        testMode: boolean,\n        style?: MonerisStylingProps,\n    ): HTMLIFrameElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create iframe without valid container ID.');\n        }\n\n        const iframe = document.createElement('iframe');\n        const monerisQueryParams: MoneriesHostedFieldsQueryParams = {\n            id: initializationData.profileId,\n            pmmsg: true,\n            display_labels: 1,\n            enable_exp: 1,\n            enable_cvd: 1,\n            css_body:\n                style?.cssBody ||\n                'font-family: Arial, Helvetica,sans-serif;background: transparent;',\n            css_textbox:\n                style?.cssTextbox ||\n                'border-radius:4px;border: 2px solid rgb(00,00,00);width: 100%;font-weight: 600;padding: 8px 8px;outline: 0;',\n            css_textbox_pan: style?.cssTextboxCardNumber || 'width: 240px;',\n            css_textbox_exp:\n                style?.cssTextboxExpiryDate || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_textbox_cvd: style?.cssTextboxCVV || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_input_label:\n                style?.cssInputLabel ||\n                'font-size: 10px;position: relative;top: 8px;left: 6px;background: rgb(255,255,255);padding: 3px 2px;color: rgb(66,66,66);font-weight: 600;z-index: 2;',\n            pan_label: initializationData.creditCardLabel || 'Credit Card Number',\n            exp_label: initializationData.expiryDateLabel || 'Expiration',\n            cvd_label: initializationData.cvdLabel || 'CVD',\n        };\n\n        const queryString = map(monerisQueryParams, (value, key) => `${key}=${value}`).join('&');\n\n        iframe.width = '100%';\n        iframe.height = '100%';\n        iframe.name = IFRAME_NAME;\n        iframe.id = IFRAME_NAME;\n        iframe.style.border = 'none';\n        iframe.src = `${this._monerisURL(testMode)}?${queryString}`;\n\n        container.appendChild(iframe);\n\n        return iframe;\n    }\n\n    private _handleMonerisResponse(response: MessageEvent): string {\n        const monerisResponse: MonerisResponseData = JSON.parse(response.data);\n\n        if (monerisResponse.responseCode[0] !== RESPONSE_SUCCESS_CODE) {\n            throw new Error(monerisResponse.errorMessage);\n        }\n\n        return monerisResponse.dataKey;\n    }\n\n    private _monerisURL(testMode: boolean): string {\n        return `https://${testMode ? 'esqa' : 'www3'}.moneris.com/HPPtoken/index.php`;\n    }\n}\n","export enum OpyRegion {\n    AU = 'AU',\n    UK = 'UK',\n    US = 'US',\n}\n\n/**\n * https://widgets.openpay.com.au/config\n */\nexport interface OpyWidgetConfig {\n    /**\n     * The region your store is located in.\n     */\n    region: OpyRegion;\n    /**\n     * The currency symbol used in the widgets.\n     */\n    currency: '$' | '£';\n    /**\n     * An array of available plan tiers you have available in months.\n     */\n    planTiers: number[];\n    /**\n     * The minimum eligible amount required before Opy is eligible.\n     */\n    minEligibleAmount: number;\n    /**\n     * The maximum eligible amount required before Opy is eligible.\n     */\n    maxEligibleAmount: number;\n    /**\n     * Type of your store.\n     */\n    type: 'Online';\n}\n\nexport interface OpyWidget {\n    /**\n     * Initialize the library.\n     *\n     * @param config Properties with the correct purchase limits, plan tiers, etc.\n     */\n    Config(config: OpyWidgetConfig): void;\n}\n\nexport interface OpyHostWindow extends Window {\n    /**\n     * The Opy widgets library.\n     */\n    OpenpayWidgets?: OpyWidget;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport StorefrontPaymentRequestSender from '../../storefront-payment-request-sender';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { ActionTypes, isOpyPaymentMethod } from './opy';\nimport { OpyWidgetConfig } from './opy-library';\nimport OpyError, { OpyErrorType } from './opy-payment-error';\nimport OpyScriptLoader from './opy-script-loader';\n\nexport default class OpyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _scriptLoader: OpyScriptLoader,\n    ) {}\n\n    async initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (options?.opy?.containerId) {\n            const {\n                methodId,\n                opy: { containerId },\n            } = options;\n\n            const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n            if (paymentMethod && isOpyPaymentMethod(paymentMethod)) {\n                const {\n                    initializationData: { widgetConfig },\n                } = paymentMethod;\n\n                await this._installWidget(containerId, widgetConfig);\n            }\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (!isOpyPaymentMethod(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            clientToken: nonce,\n            initializationData: { nextAction },\n        } = paymentMethod;\n\n        if (!nextAction) {\n            const { displayName = 'Openpay' } = paymentMethod.config;\n\n            throw new OpyError(OpyErrorType.InvalidCart, displayName);\n        }\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        await this._storefrontPaymentRequestSender.saveExternalId(methodId, nonce);\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment({ methodId, paymentData: { nonce } }),\n            );\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                if (nextAction.type === ActionTypes.FORM_POST) {\n                    const { formPostUrl, formFields } = nextAction.formPost;\n\n                    const url = new URL(formPostUrl.replace(/\\/$/, ''));\n\n                    formFields.forEach(({ fieldName, fieldValue }) => {\n                        url.searchParams.append(fieldName, fieldValue);\n                    });\n\n                    return new Promise(() => window.location.assign(decodeURI(url.href)));\n                }\n\n                throw new NotImplementedError(`Unsupported action type: ${nextAction.type}`);\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _installWidget(containerId: string, config: OpyWidgetConfig): Promise<void> {\n        const widgetContainer = document.getElementById(containerId);\n\n        if (widgetContainer) {\n            try {\n                const widget = await this._scriptLoader.loadOpyWidget(config.region);\n\n                widget.Config(config);\n            } catch (error) {\n                return;\n            }\n\n            widgetContainer.appendChild(document.createElement('opy-learn-more-button'));\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { OpyHostWindow, OpyRegion, OpyWidget } from './opy-library';\n\nconst AU_REGION_URL = 'https://widgets.openpay.com.au/lib/openpay-widgets.min.js';\n\nconst SOURCES = {\n    AU: AU_REGION_URL,\n    UK: AU_REGION_URL,\n    US: 'https://widgets.opy.com/lib/openpay-widgets.min.js',\n};\n\nexport default class OpyScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: OpyHostWindow = window) {}\n\n    async loadOpyWidget(region = OpyRegion.AU): Promise<OpyWidget> {\n        await this._scriptLoader.loadScript(SOURCES[region]);\n\n        if (!this._window.OpenpayWidgets) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.OpenpayWidgets;\n    }\n}\n","export enum SubStrategyType {\n    CARD = 'card_ui',\n    NONE = 'none',\n    UNSUPPORTED = 'unsupported',\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window,\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow =\n            (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader\n            .loadPaypal()\n            .then((paypal) => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store\n                .dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then((state) => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(noop);\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store\n            .dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then((state) => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(noop);\n            })\n            .catch((error) => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(\n                this._orderActionCreator.finalizeOrder(order.orderId, options),\n            );\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return (\n            state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE ||\n            state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE\n        );\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"query-string\");","import { exclude, ParsedUrl, parseUrl, stringifyUrl } from 'query-string';\n\nexport const PENDING_REDIRECT_PARAM = 'redirecting';\n\nexport class RedirectionState {\n    private _isRedirecting: boolean;\n\n    constructor() {\n        this._isRedirecting = this.currentUrlHasRedirectingParam();\n    }\n\n    isRedirecting() {\n        return this._isRedirecting;\n    }\n\n    setRedirecting(value: boolean) {\n        if (value) {\n            this.setRedirectingParamOnUrl();\n        } else {\n            this.removeRedirectingParamFromUrl();\n        }\n\n        this._isRedirecting = value;\n    }\n\n    private currentUrlHasRedirectingParam(): boolean {\n        return PENDING_REDIRECT_PARAM in this.getCurrentUrl().query;\n    }\n\n    private getCurrentUrl(): ParsedUrl {\n        return parseUrl(window.location.href);\n    }\n\n    private replaceCurrentUrl(url: string) {\n        window.history.replaceState(null, '', url);\n    }\n\n    private setRedirectingParamOnUrl() {\n        if (this.currentUrlHasRedirectingParam()) {\n            return;\n        }\n\n        const currentUrl = this.getCurrentUrl();\n        const updatedUrl = {\n            ...currentUrl,\n            query: {\n                ...currentUrl.query,\n                [PENDING_REDIRECT_PARAM]: 'true',\n            },\n        };\n\n        this.replaceCurrentUrl(stringifyUrl(updatedUrl));\n    }\n\n    private removeRedirectingParamFromUrl() {\n        if (!this.currentUrlHasRedirectingParam()) {\n            return;\n        }\n\n        this.replaceCurrentUrl(exclude(window.location.href, [PENDING_REDIRECT_PARAM]));\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { overSome } from 'lodash';\n\nimport { PaymentHumanVerificationHandler } from '../../../../../spam-protection';\nimport PaymentAdditionalAction from '../../../../payment-additional-action';\nimport { PaymentsAPIResponse } from '../../ppsdk-payments-api-response';\n\nimport {\n    handleHumanVerification,\n    HumanVerification,\n    isHumanVerification,\n} from './human-verification';\nimport { handleRedirect, isRedirect, Redirect } from './redirect';\n\nexport type Continue = Redirect | HumanVerification;\n\nconst isAnyContinue = overSome([isRedirect, isHumanVerification]);\n\nexport const isContinue = (body: PaymentsAPIResponse['body']): body is Continue =>\n    isAnyContinue(body);\n\nexport interface ContinueCallbacks {\n    humanVerification?(additionalAction: PaymentAdditionalAction): Promise<void>;\n}\n\nexport class ContinueHandler {\n    constructor(\n        private _formPoster: FormPoster,\n        private _humanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    handle(body: Continue, callbacks?: ContinueCallbacks): Promise<void> {\n        switch (body.code) {\n            case 'redirect':\n                return handleRedirect(body.parameters, this._formPoster);\n\n            case 'resubmit_with_human_verification':\n                return handleHumanVerification(\n                    body.parameters,\n                    this._humanVerificationHandler,\n                    callbacks?.humanVerification,\n                );\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { get, isObject, isString, isUndefined, noop } from 'lodash';\n\nimport { PaymentMethodCancelledError } from '../../../../../errors';\nimport { PaymentsAPIResponse } from '../../../ppsdk-payments-api-response';\n\nimport { RedirectionState } from './RedirectionState';\n\ninterface Parameters {\n    url: string;\n    form_fields?: Record<string, string | number | boolean>;\n}\n\nexport interface Redirect {\n    type: 'continue';\n    code: 'redirect';\n    parameters: Parameters;\n}\n\nconst isParameters = (x: unknown): x is Parameters => {\n    const formFields = get(x, 'form_fields');\n\n    return isString(get(x, 'url')) && (isUndefined(formFields) || isObject(formFields));\n};\n\nexport const isRedirect = (body: PaymentsAPIResponse['body']): body is Redirect =>\n    get(body, 'type') === 'continue' &&\n    get(body, 'code') === 'redirect' &&\n    isParameters(get(body, 'parameters'));\n\nexport const handleRedirect = (\n    { url, form_fields }: Parameters,\n    formPoster: FormPoster,\n): Promise<never> => {\n    const redirectionState = new RedirectionState();\n\n    if (redirectionState.isRedirecting()) {\n        redirectionState.setRedirecting(false);\n\n        return Promise.reject(new PaymentMethodCancelledError());\n    }\n\n    redirectionState.setRedirecting(true);\n\n    if (form_fields) {\n        formPoster.postForm(url, form_fields);\n    } else {\n        window.location.assign(url);\n    }\n\n    return new Promise(noop);\n};\n","import { get, isArray } from 'lodash';\n\nimport { PaymentHumanVerificationHandler } from '../../../../../../spam-protection';\nimport PaymentAdditionalAction from '../../../../../payment-additional-action';\nimport { PaymentsAPIResponse } from '../../../ppsdk-payments-api-response';\n\ninterface VerificationMethod {\n    id: string;\n    parameters: Record<string, string>;\n}\n\ninterface Parameters {\n    available_methods: VerificationMethod[];\n}\n\nexport interface HumanVerification {\n    type: 'continue';\n    code: 'resubmit_with_human_verification';\n    parameters: Parameters;\n}\n\nconst isParameters = (x: unknown): x is Parameters => {\n    const availableMethods = get(x, 'available_methods');\n\n    return isArray(availableMethods);\n};\n\nexport const isHumanVerification = (body: PaymentsAPIResponse['body']): body is HumanVerification =>\n    get(body, 'type') === 'continue' &&\n    get(body, 'code') === 'resubmit_with_human_verification' &&\n    isParameters(get(body, 'parameters'));\n\nexport const handleHumanVerification = async (\n    { available_methods }: Parameters,\n    humanVerificationHandler?: PaymentHumanVerificationHandler,\n    callback?: (additionalAction: PaymentAdditionalAction) => Promise<void>,\n): Promise<void> => {\n    if (!callback) {\n        throw new Error('PPSDK human verification callback function is missing.');\n    }\n\n    if (!humanVerificationHandler) {\n        throw new Error('PPSDK human verification handler is missing.');\n    }\n\n    if (available_methods.length === 0) {\n        throw Error('Human verification method is missing.');\n    }\n\n    // Only one method is expected because google recaptcha only is supported\n    const { id, parameters } = available_methods[0];\n\n    const additionalAction: PaymentAdditionalAction = await humanVerificationHandler.handle(\n        id,\n        parameters.key,\n    );\n\n    return callback(additionalAction);\n};\n","import { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nimport { ContinueCallbacks, ContinueHandler, isContinue } from './continue-handler';\nimport { handleError, isError } from './error';\nimport { handleFailure, isFailure } from './failure';\nimport { handleSuccess, isSuccess } from './success';\nimport { handleUnsupported } from './unsupported';\n\ninterface StepHandlerCallbacks {\n    continue?: ContinueCallbacks;\n}\n\nexport class StepHandler {\n    constructor(private _continueHandler: ContinueHandler) {}\n\n    handle(response: PaymentsAPIResponse, callbacks?: StepHandlerCallbacks): Promise<void> {\n        const { body } = response;\n\n        if (isSuccess(body)) {\n            return handleSuccess();\n        }\n\n        if (isContinue(body)) {\n            return this._continueHandler.handle(body, callbacks?.continue);\n        }\n\n        if (isFailure(response)) {\n            return handleFailure(response);\n        }\n\n        if (isError(response)) {\n            return handleError(response);\n        }\n\n        return handleUnsupported(response);\n    }\n}\n","import { get } from 'lodash';\n\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nexport interface Success {\n    type: 'success';\n}\n\nexport const isSuccess = (body: PaymentsAPIResponse['body']): body is Success =>\n    get(body, 'type') === 'success';\n\nexport const handleSuccess = () => Promise.resolve();\n","import { get, isString } from 'lodash';\n\nimport { RequestError } from '../../../../common/error/errors';\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nexport interface FailureResponse extends PaymentsAPIResponse {\n    body: {\n        type: 'failure';\n        code: string;\n    };\n}\n\nexport const isFailure = (response: PaymentsAPIResponse): response is FailureResponse =>\n    get(response.body, 'type') === 'failure' && isString(get(response.body, 'code'));\n\nconst toRequestErrorFormat = (failureResponse: FailureResponse) => ({\n    ...failureResponse,\n    body: {\n        errors: [{ code: failureResponse.body.code }],\n    },\n});\n\nexport const handleFailure = (response: FailureResponse): Promise<void> =>\n    Promise.reject(new RequestError(toRequestErrorFormat(response)));\n","import { get } from 'lodash';\n\nimport { RequestError } from '../../../../common/error/errors';\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\n\nexport interface ErrorResponse extends PaymentsAPIResponse {\n    body: {\n        type: 'error';\n    };\n}\n\nexport const isError = (response: PaymentsAPIResponse): response is ErrorResponse =>\n    get(response.body, 'type') === 'error';\n\nexport const handleError = (response: ErrorResponse) => Promise.reject(new RequestError(response));\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { PaymentHumanVerificationHandler } from '../../../../spam-protection';\n\nimport { ContinueHandler } from './continue-handler';\nimport { StepHandler } from './step-handler';\n\nexport const createStepHandler = (\n    formPoster: FormPoster,\n    humanVerificationHandler: PaymentHumanVerificationHandler,\n) => new StepHandler(new ContinueHandler(formPoster, humanVerificationHandler));\n","import { BrowserStorage } from '../../../common/storage';\n\ntype CompletedPayments = string[];\n\nconst COMPLETED_PAYMENTS_KEY = 'completed-payments';\n\nexport class PPSDKCompletedPayments {\n    constructor(private _browserStorage: BrowserStorage) {}\n\n    isCompleted(paymentId: string): boolean {\n        return this.getCompletedPayments().indexOf(paymentId) >= 0;\n    }\n\n    setCompleted(paymentId: string): void {\n        const completedPayments = this.getCompletedPayments();\n\n        completedPayments.push(paymentId);\n\n        this.setCompletedPayments(completedPayments);\n    }\n\n    private getCompletedPayments(): CompletedPayments {\n        return this._browserStorage.getItem<CompletedPayments>(COMPLETED_PAYMENTS_KEY) || [];\n    }\n\n    private setCompletedPayments(completedPayments: CompletedPayments): void {\n        this._browserStorage.setItem<CompletedPayments>(COMPLETED_PAYMENTS_KEY, completedPayments);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { BrowserStorage } from '../../../common/storage';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { getPPSDKMethod } from './get-ppsdk-payment-method';\nimport { PPSDKCompletedPayments } from './ppsdk-completed-payments';\nimport { PaymentResumer } from './ppsdk-payment-resumer';\nimport { SubStrategy } from './ppsdk-sub-strategy';\nimport { SubStrategyRegistry } from './ppsdk-sub-strategy-registry';\n\nexport class PPSDKStrategy implements PaymentStrategy {\n    private _subStrategy?: SubStrategy;\n    private _completedPayments: PPSDKCompletedPayments;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _subStrategyRegistry: SubStrategyRegistry,\n        private _paymentResumer: PaymentResumer,\n        browserStorage: BrowserStorage,\n    ) {\n        this._completedPayments = new PPSDKCompletedPayments(browserStorage);\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { bigpayBaseUrl } = this._store\n            .getState()\n            .config.getStoreConfigOrThrow().paymentSettings;\n\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n        const { payment, ...order } = payload;\n        const { _subStrategy: subStrategy } = this;\n\n        if (!subStrategy) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const token = this._store.getState().order.getOrderMeta()?.token;\n\n        if (!token) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        await subStrategy.execute({ methodId, payment, bigpayBaseUrl, token });\n\n        return this._store.getState();\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = this._store.getState().order.getOrderOrThrow();\n\n        if (order.isComplete) {\n            return this._store.getState();\n        }\n\n        const { bigpayBaseUrl } = this._store\n            .getState()\n            .config.getStoreConfigOrThrow().paymentSettings;\n\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentId = this._store.getState().order.getPaymentId(options.methodId);\n\n        if (!paymentId || !order || this._completedPayments.isCompleted(paymentId)) {\n            throw new OrderFinalizationNotRequiredError();\n        }\n\n        const { orderId } = order;\n\n        await this._paymentResumer.resume({ paymentId, bigpayBaseUrl, orderId }).catch((error) => {\n            this._completedPayments.setCompleted(paymentId);\n            throw error;\n        });\n\n        return this._store.getState();\n    }\n\n    async initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = getPPSDKMethod(this._store, options.methodId);\n\n        if (!paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._subStrategy = this._subStrategyRegistry.getByMethod(paymentMethod);\n\n        if (!this._subStrategy) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._subStrategy.initialize(options);\n\n        return this._store.getState();\n    }\n\n    async deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._subStrategy?.deinitialize();\n\n        return this._store.getState();\n    }\n}\n","import { CheckoutStore } from '../../../checkout';\nimport { isPPSDKPaymentMethod, PPSDKPaymentMethod } from '../../ppsdk-payment-method';\n\ntype GetPPSDKMethod = (store: CheckoutStore, methodId: string) => PPSDKPaymentMethod | undefined;\n\nexport const getPPSDKMethod: GetPPSDKMethod = (store, methodId) => {\n    const paymentMethod = store.getState().paymentMethods.getPaymentMethod(methodId);\n\n    if (!paymentMethod || !isPPSDKPaymentMethod(paymentMethod)) {\n        return;\n    }\n\n    return paymentMethod;\n};\n","import { cond, constant, stubTrue } from 'lodash';\n\nimport { Registry } from '../../../common/registry';\nimport { PPSDKPaymentMethod } from '../../ppsdk-payment-method';\n\nimport { isCard, isNone } from './initialization-strategies';\nimport { SubStrategy } from './ppsdk-sub-strategy';\nimport { SubStrategyType } from './ppsdk-sub-strategy-type';\n\nconst getToken = cond([\n    [isCard, constant(SubStrategyType.CARD)],\n    [isNone, constant(SubStrategyType.NONE)],\n    [stubTrue, constant(SubStrategyType.UNSUPPORTED)],\n]);\n\nexport class SubStrategyRegistry extends Registry<SubStrategy | undefined, SubStrategyType> {\n    getByMethod(paymentMethod: PPSDKPaymentMethod): SubStrategy | undefined {\n        const token = getToken(paymentMethod.initializationStrategy);\n\n        return this.get(token);\n    }\n}\n","import { NonceInstrument } from '../../payment';\n\nexport default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n    verifyBuyer(\n        source?: string,\n        verificationDetails?: VerificationDetails,\n        callback?: VerifyBuyerResponse,\n    ): void;\n}\n\nexport type VerifyBuyerResponse = (\n    errors: SquareVerificationError,\n    verificationResult: SquareVerificationResult,\n) => void;\n\nexport interface SquareVerificationError {\n    type: string;\n    message: string;\n}\n\nexport interface SquareVerificationResult {\n    token: string;\n    userChallenged: boolean;\n}\n\nexport enum SquareIntent {\n    CHARGE = 'CHARGE',\n    STORE = 'STORE',\n}\n\nexport interface VerificationDetails {\n    intent: string;\n    amount?: string;\n    currencyCode?: string;\n    billingContact?: Contact;\n}\n\nexport type SquarePaymentFormConstructor = new (options: SquareFormOptions) => SquarePaymentForm;\n\nexport type SquareScriptCallBack = (options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact,\n    ): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface DeferredPromise {\n    resolve(resolution?: SquareNonceInstrument): void;\n    reject(reason?: any): void;\n}\n\nexport interface SquareNonceInstrument extends NonceInstrument {\n    token?: string;\n}\n","import { InitializationStrategy } from '../../../';\n\ninterface Card {\n    type: 'card_ui';\n}\n\nexport const isCard = (strategy: Pick<InitializationStrategy, 'type'>): strategy is Card =>\n    strategy.type === 'card_ui';\n","import { InitializationStrategy } from '../../../';\n\ninterface None {\n    type: 'none';\n}\n\nexport const isNone = (strategy: Pick<InitializationStrategy, 'type'>): strategy is None =>\n    strategy.type === 'none';\n","import { CheckoutStore } from '../../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../../hosted-form';\nimport { OrderActionCreator } from '../../../../order';\nimport { PaymentArgumentInvalidError } from '../../../errors';\nimport PaymentAdditionalAction from '../../../payment-additional-action';\nimport { PaymentInitializeOptions } from '../../../payment-request-options';\nimport { SubStrategy, SubStrategySettings } from '../ppsdk-sub-strategy';\nimport { StepHandler } from '../step-handler';\n\nexport class CardSubStrategy implements SubStrategy {\n    protected _hostedForm?: HostedForm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _ppsdkStepHandler: StepHandler,\n    ) {}\n\n    async execute(settings: SubStrategySettings): Promise<void> {\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { additionalAction, payment } = settings;\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await form.validate();\n\n        const { payload } = await form.submit(payment, additionalAction);\n\n        const { response } = payload;\n\n        const humanVerificationCallback = async (\n            additionalAction: PaymentAdditionalAction,\n        ): Promise<void> => this.execute({ additionalAction, ...settings });\n\n        await this._ppsdkStepHandler.handle(response, {\n            continue: {\n                humanVerification: humanVerificationCallback,\n            },\n        });\n\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder());\n    }\n\n    async initialize(options?: PaymentInitializeOptions): Promise<void> {\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            config.getStoreConfig() || {};\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = formOptions && this._hostedFormFactory.create(host, formOptions);\n\n        await form.attach();\n\n        this._hostedForm = form;\n    }\n\n    deinitialize(): void {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { PaymentsAPIResponse } from '../ppsdk-payments-api-response';\nimport { SubStrategy, SubStrategySettings } from '../ppsdk-sub-strategy';\nimport { StepHandler } from '../step-handler';\n\nexport class NoneSubStrategy implements SubStrategy {\n    constructor(private _requestSender: RequestSender, private _stepHandler: StepHandler) {}\n\n    execute({ methodId, bigpayBaseUrl, token }: SubStrategySettings): Promise<void> {\n        const body = { payment_method_id: methodId };\n        const options = {\n            credentials: false,\n            body,\n            headers: {\n                authorization: token,\n                'X-XSRF-TOKEN': null,\n            },\n        };\n\n        return this._requestSender\n            .post<PaymentsAPIResponse['body']>(`${bigpayBaseUrl}/payments`, options)\n            .then((response) => this._stepHandler.handle(response));\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): void {}\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator } from '../../../order';\n\nimport { SubStrategyRegistry } from './ppsdk-sub-strategy-registry';\nimport { SubStrategyType } from './ppsdk-sub-strategy-type';\nimport { StepHandler } from './step-handler';\nimport { CardSubStrategy, NoneSubStrategy } from './sub-strategies';\n\nexport const createSubStrategyRegistry = (\n    store: CheckoutStore,\n    orderActionCreator: OrderActionCreator,\n    requestSender: RequestSender,\n    stepHandler: StepHandler,\n    hostedFormFactory: HostedFormFactory,\n) => {\n    const registry = new SubStrategyRegistry();\n\n    registry.register(\n        SubStrategyType.CARD,\n        () => new CardSubStrategy(store, orderActionCreator, hostedFormFactory, stepHandler),\n    );\n\n    registry.register(SubStrategyType.NONE, () => new NoneSubStrategy(requestSender, stepHandler));\n\n    registry.register(SubStrategyType.UNSUPPORTED, () => undefined);\n\n    return registry;\n};\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\n\nimport { PaymentsAPIResponse } from './ppsdk-payments-api-response';\nimport { StepHandler } from './step-handler';\n\ninterface ResumeSettings {\n    orderId: number;\n    paymentId: string;\n    bigpayBaseUrl: string;\n}\n\nexport class PaymentResumer {\n    constructor(private _requestSender: RequestSender, private _stepHandler: StepHandler) {}\n\n    async resume({ paymentId, bigpayBaseUrl, orderId }: ResumeSettings): Promise<void> {\n        const token = await this._getToken(orderId).catch(() => {\n            throw new OrderFinalizationNotRequiredError();\n        });\n\n        const options = {\n            credentials: false,\n            headers: {\n                authorization: token,\n                'X-XSRF-TOKEN': null,\n            },\n        };\n\n        return this._requestSender\n            .get<PaymentsAPIResponse['body']>(`${bigpayBaseUrl}/payments/${paymentId}`, options)\n            .then((response) => this._stepHandler.handle(response));\n    }\n\n    private async _getToken(orderId: number): Promise<string> {\n        const url = `/api/storefront/payments/auth-token`;\n        const options = {\n            params: {\n                order_id: orderId,\n            },\n        };\n\n        return this._requestSender\n            .get<{ auth_token: string }>(url, options)\n            .then(({ body }) => body.auth_token);\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport StorefrontPaymentRequestSender from '../../storefront-payment-request-sender';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class QuadpayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n        const { clientToken, initializationData: { redirectUrl } = {} } =\n            getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const paymentPayload = {\n            methodId,\n            paymentData: { nonce },\n        };\n\n        const { isStoreCreditApplied: useStoreCredit } = this._store\n            .getState()\n            .checkout.getCheckoutOrThrow();\n\n        await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, { useStoreCredit }),\n        );\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            return await this._store.dispatch(\n                this._paymentActionCreator.submitPayment(paymentPayload),\n            );\n        } catch (error) {\n            if (\n                error instanceof RequestError &&\n                error.body.status === 'additional_action_required'\n            ) {\n                window.location.replace(redirectUrl);\n\n                return new Promise(noop);\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this._storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { get, isEmpty, noop, omit } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DeferredPromise,\n    DigitalWalletType,\n    SquareFormOptions,\n    SquareIntent,\n    SquarePaymentRequest,\n    SquareVerificationError,\n    SquareVerificationResult,\n    VerificationDetails,\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, gatewayId, square: squareOptions } = options;\n\n        if (!squareOptions) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.square\" argument is not provided.',\n            );\n        }\n\n        this._squareOptions = squareOptions;\n\n        this._syncPaymentMethod(methodId);\n\n        /* eslint-disable */\n        return new Promise(async (resolve, reject) => {\n            const state = this._store.getState();\n            const { config: { testMode } } = state.paymentMethods.getPaymentMethodOrThrow(methodId, gatewayId);\n            try {\n                const createSquareForm = await this._scriptLoader.load(testMode);\n\n                this._paymentForm = createSquareForm(\n                    this._getFormOptions({ resolve, reject })\n                );\n\n                this._getPaymentForm().build();\n            } catch (e: unknown) {\n                reject(new PaymentMethodClientUnavailableError());\n            }\n        }).then(() => this._store.getState());\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        const paymentData = await this._getNonceInstrument(payment.methodId);\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options));\n        await this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData}));\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument | undefined> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument | undefined>((resolve, reject?) => {\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._getPaymentForm().requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(deferred: DeferredPromise): SquareFormOptions {\n        return {\n            ...this._getInitializeOptions(),\n            ...this._paymentMethod?.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    const deferredRequest = this._getDeferredRequestNonce();\n                    const { onError = noop } = this._getInitializeOptions();\n\n                    if (!nonce) {\n                        onError(errors);\n\n                        return deferredRequest.reject(get(errors, '0', {}));\n                    }\n\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none && nonce) {\n                        this._handleWalletNonceResponse(nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        if (this._is3DSExperimentOn()) {\n                            this._getPaymentForm().verifyBuyer(\n                                nonce,\n                                this._getVerificationDetails(),\n                                (error: SquareVerificationError, verificationResults: SquareVerificationResult) => {\n\n                                    if (!isEmpty(error)) {\n                                        onError(error);\n\n                                        return deferredRequest.reject(get(error, '0', {}));\n                                    }\n\n                                    deferredRequest.resolve({ nonce: JSON.stringify({ nonce, token: verificationResults.token }) });\n                                }\n                            );\n                        } else {\n                            deferredRequest.resolve({ nonce });\n                        }\n                    }\n                },\n                createPaymentRequest: this._paymentRequestPayload.bind(this),\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _getInitializeOptions(): SquarePaymentInitializeOptions {\n        if (!this._squareOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._squareOptions;\n    }\n\n    private _handleWalletNonceResponse(\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const { onError = noop, onPaymentSelect = noop } = this._getInitializeOptions();\n\n        if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._getPaymentForm().setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _getBillingContact(): Contact {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n\n        return {\n            givenName: billingAddress.firstName,\n            familyName: billingAddress.lastName,\n            email: billingAddress.email || '',\n            country: billingAddress.countryCode,\n            countryName: billingAddress.country,\n            region: '',\n            city: billingAddress.city,\n            postalCode: billingAddress.postalCode,\n            addressLines: [ billingAddress.address1, billingAddress.address2],\n            phone: billingAddress.phone,\n        };\n    }\n\n    private _getAmountAndCurrencyCode(): string[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        return [String(checkout.grandTotal), cart.currency.code];\n    }\n\n    private _getVerificationDetails(): VerificationDetails {\n        const billingContact = this._getBillingContact();\n        const [ amount, currencyCode ] = this._getAmountAndCurrencyCode();\n\n        return  {\n            intent: SquareIntent.CHARGE,\n            currencyCode,\n            amount,\n            billingContact,\n        };\n    }\n\n    private _getDeferredRequestNonce(): DeferredPromise {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._deferredRequestNonce;\n    }\n\n    private _getPaymentForm(): SquarePaymentForm {\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._paymentForm;\n    }\n\n    private _is3DSExperimentOn(): boolean {\n        const state = this._store.getState();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n\n        return storeConfig.checkoutSettings.features['PROJECT-3828.add_3ds_support_on_squarev2'] === true;\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { PaymentInitializeOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport {\n    WorldpayAccess3DSOptions,\n    WorldpayAccessAdditionalAction,\n    WorldpayAccessPaymentInitializeOptions,\n} from './worldpayaccess-payment-options';\n\nconst IFRAME_NAME = 'worldpay_hosted_payment_page';\nconst IFRAME_HIDDEN_NAME = 'worldpay_hosted_hidden_payment_page';\nconst PAYMENT_CANNOT_CONTINUE = 'Payment cannot continue';\n\nlet submit: (paymentPayload: OrderPaymentRequestBody) => Promise<InternalCheckoutSelectors>;\n\nexport default class WorldpayaccessPaymetStrategy extends CreditCardPaymentStrategy {\n    private _initializeOptions?: WorldpayAccessPaymentInitializeOptions;\n\n    async initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options && options.worldpay;\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return super.initialize(options);\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        submit = this._submitAdditionalAction();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            return await super.execute(orderRequest, options);\n        } catch (error) {\n            return await this._processAdditionalAction(error, payment);\n        }\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n    ): Promise<InternalCheckoutSelectors> {\n        if (\n            !(error instanceof RequestError) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        return new Promise((resolve, reject) => {\n            const messageEvent = async (event: MessageEvent) => {\n                if (typeof event.data !== 'string' || !this._isValidJsonWithSessionId(event.data)) {\n                    return reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                }\n\n                window.removeEventListener('message', messageEvent);\n                iframeHidden.remove();\n\n                const data = JSON.parse(event.data);\n                const paymentPayload = merge({}, payment, {\n                    paymentData: { threeDSecure: { token: data.SessionId } },\n                });\n\n                try {\n                    resolve(await submit(paymentPayload));\n                } catch (error) {\n                    if (\n                        !(error instanceof RequestError) ||\n                        !some(error.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        return reject(error);\n                    }\n\n                    if (!this._initializeOptions) {\n                        return reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    const { onLoad } = this._initializeOptions;\n                    const frame = this._createIframe(error.body.three_ds_result);\n\n                    try {\n                        onLoad(frame, () => reject(new Error('Payment was cancelled')));\n                    } catch (e) {\n                        reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                    }\n                }\n            };\n\n            window.addEventListener('message', messageEvent);\n\n            let iframeHidden: HTMLIFrameElement;\n\n            try {\n                iframeHidden = this._createHiddenIframe(error.body);\n            } catch (e) {\n                window.removeEventListener('message', messageEvent);\n                throw new Error(PAYMENT_CANNOT_CONTINUE);\n            }\n        });\n    }\n\n    private _createHiddenIframe(body: WorldpayAccessAdditionalAction): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        if (!iframe) {\n            throw new Error();\n        }\n\n        document.body.appendChild(iframe);\n\n        if (!iframe.contentWindow) {\n            throw new Error();\n        }\n\n        iframe.id = IFRAME_HIDDEN_NAME;\n        iframe.height = '0px';\n        iframe.width = '0px';\n\n        const form = document.createElement('form');\n        const formId = 'collectionForm';\n\n        form.id = formId;\n        form.name = 'devicedata';\n        form.method = 'post';\n\n        const url = body.additional_action_required.data.redirect_url;\n\n        form.action = url;\n\n        const inputBin = document.createElement('input');\n\n        inputBin.name = 'Bin';\n        inputBin.type = 'hidden';\n        inputBin.value = body.provider_data.source_id;\n        form.appendChild(inputBin);\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = body.provider_data.data;\n        form.appendChild(inputJWT);\n\n        const button = document.createElement('button');\n\n        button.type = 'submit';\n        button.id = 'btnsubmit';\n        form.appendChild(button);\n\n        if (navigator.userAgent.match('Firefox')) {\n            iframe.srcdoc = form.outerHTML;\n        } else {\n            iframe.contentWindow.document.body.appendChild(form);\n        }\n\n        const script = document.createElement('script');\n\n        script.innerHTML = `\n            document.getElementById('${formId}').submit();\n        `;\n        iframe.contentWindow.document.body.appendChild(script);\n\n        return iframe;\n    }\n\n    private _createIframe(data: WorldpayAccess3DSOptions): HTMLIFrameElement {\n        const form = document.createElement('form');\n\n        form.id = 'challengeForm';\n        form.method = 'POST';\n        form.action = data.acs_url;\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = data.payer_auth_request;\n        form.appendChild(inputJWT);\n\n        const merchant = document.createElement('input');\n\n        merchant.name = 'MD';\n        merchant.type = 'hidden';\n        merchant.value = `merchantSessionId=${data.merchant_data}`;\n        form.appendChild(merchant);\n\n        const script = document.createElement('script');\n\n        script.type = 'text/javascript';\n        script.innerHTML =\n            \"window.onload = function() { document.getElementById('challengeForm').submit(); }\";\n\n        const iframe = document.createElement('iframe');\n\n        iframe.name = IFRAME_NAME;\n        iframe.height = '400';\n        iframe.width = '100%';\n        iframe.srcdoc = `${form.outerHTML} ${script.outerHTML}`;\n\n        return iframe;\n    }\n\n    private _submitAdditionalAction() {\n        if (this._shouldRenderHostedForm) {\n            if (!this._hostedForm || !this._hostedForm.submit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const hostedForm = this._hostedForm;\n\n            return async (paymentPayload: OrderPaymentRequestBody) => {\n                await hostedForm.submit(paymentPayload);\n\n                return this._store.getState();\n            };\n        }\n\n        return async (paymentPayload: OrderPaymentRequestBody) => {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n        };\n    }\n\n    private _isValidJsonWithSessionId(str: string) {\n        try {\n            const data = JSON.parse(str);\n\n            if (data.SessionId) {\n                return true;\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport SquarePaymentForm, { SquareFormOptions, SquareScriptCallBack } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: Window = window) {}\n\n    _isSquareWindow(window: Window): window is SquareWindow {\n        const squareWindow: SquareWindow = window as SquareWindow;\n\n        return !!squareWindow.SqPaymentForm;\n    }\n\n    async load(testmode?: boolean): Promise<SquareScriptCallBack> {\n        await this._scriptLoader.loadScript(\n            testmode\n                ? '//js.squareupsandbox.com/v2/paymentform'\n                : '//js.squareup.com/v2/paymentform',\n        );\n\n        return (options: SquareFormOptions): SquarePaymentForm => {\n            if (!this._isSquareWindow(this._window)) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.SqPaymentForm(options);\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => (this._riskClient = (window as unknown as WepayWindow).WePay.risk))\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _wepayRiskClient: WepayRiskClient,\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        void this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport {\n    DeleteInstrumentAction,\n    InstrumentActionType,\n    LoadInstrumentsAction,\n} from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(private _instrumentRequestSender: InstrumentRequestSender) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n                observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n                const session = this._getSessionContext(store);\n                const token = this._getCurrentAccessToken(store);\n                const shippingAddress = this._getShippingAddress(store);\n\n                return this._getValidAccessToken(token)\n                    .then((currentToken) =>\n                        this._instrumentRequestSender\n                            .loadInstruments(\n                                {\n                                    ...session,\n                                    authToken: currentToken.vaultAccessToken,\n                                },\n                                shippingAddress,\n                            )\n                            .then(({ body }) => {\n                                observer.next(\n                                    createAction(\n                                        InstrumentActionType.LoadInstrumentsSucceeded,\n                                        body,\n                                        currentToken,\n                                    ),\n                                );\n                                observer.complete();\n                            }),\n                    )\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response),\n                        );\n                    });\n            });\n    }\n\n    deleteInstrument(\n        instrumentId: string,\n    ): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n                observer.next(\n                    createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, {\n                        instrumentId,\n                    }),\n                );\n\n                const session = this._getSessionContext(store);\n                const token = this._getCurrentAccessToken(store);\n\n                return this._getValidAccessToken(token)\n                    .then((currentToken) =>\n                        this._instrumentRequestSender\n                            .deleteInstrument(\n                                {\n                                    ...session,\n                                    authToken: currentToken.vaultAccessToken,\n                                },\n                                instrumentId,\n                            )\n                            .then(({ body }) => {\n                                observer.next(\n                                    createAction(\n                                        InstrumentActionType.DeleteInstrumentSucceeded,\n                                        body,\n                                        {\n                                            instrumentId,\n                                            ...currentToken,\n                                        },\n                                    ),\n                                );\n                                observer.complete();\n                            }),\n                    )\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                InstrumentActionType.DeleteInstrumentFailed,\n                                response,\n                                { instrumentId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | Address[] | undefined {\n        const state = store.getState();\n        const addresses = state.shippingAddress.getShippingAddresses();\n\n        return addresses.length > 1 ? addresses : state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional\n            ? config.shopperCurrency\n            : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport {\n    BankInternalInstrument,\n    InstrumentErrorResponseBody,\n    InstrumentsResponseBody,\n    InternalInstrument,\n    InternalInstrumentErrorResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalVaultAccessTokenResponseBody,\n    PayPalInternalInstrument,\n} from './instrument-response-body';\nimport { mapToBankInstrument } from './map-to-bank-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\nimport { mapToPayPalInstrument } from './map-to-paypal-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>,\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>,\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>,\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(\n        vaultedInstruments: InternalInstrument[] = [],\n    ): PaymentInstrument[] {\n        return vaultedInstruments.map((instrument) => {\n            if (this._isPayPalInstrument(instrument)) {\n                return mapToPayPalInstrument(instrument);\n            }\n\n            if (this._isBankInstrument(instrument)) {\n                return mapToBankInstrument(instrument);\n            }\n\n            return mapToCardInstrument(instrument);\n        });\n    }\n\n    private _isPayPalInstrument(\n        instrument: InternalInstrument,\n    ): instrument is PayPalInternalInstrument {\n        return instrument.method_type === 'paypal';\n    }\n\n    private _isBankInstrument(\n        instrument: InternalInstrument,\n    ): instrument is BankInternalInstrument {\n        return instrument.method_type === 'bank';\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { PayPalInstrument } from './instrument';\nimport { PayPalInternalInstrument } from './instrument-response-body';\n\nexport function mapToPayPalInstrument(instrument: PayPalInternalInstrument): PayPalInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: 'paypal',\n        type: 'account',\n    };\n}\n","import { BankInstrument } from './instrument';\nimport { BankInternalInstrument } from './instrument-response-body';\n\nexport function mapToBankInstrument(instrument: BankInternalInstrument): BankInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        accountNumber: instrument.account_number,\n        issuer: instrument.issuer,\n        iban: instrument.iban,\n        method: instrument.method,\n        type: 'bank',\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        untrustedShippingCardVerificationMode:\n            instrument.untrusted_shipping_address_card_verification_mode,\n        method: instrument.method,\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Address, mapToInternalAddress } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(private _client: any, private _requestSender: RequestSender) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender\n            .get<InternalVaultAccessTokenResponseBody>(url, { timeout })\n            .then((response) => ({\n                ...response,\n                body: {\n                    vaultAccessToken: response.body.data.token,\n                    vaultAccessExpiry: response.body.data.expires_at,\n                },\n            }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address | Address[],\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return shippingAddress\n            ? this._loadInstrumentsWithAddress(requestContext, shippingAddress)\n            : this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string,\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload,\n                (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>,\n                ) =>\n                    errorResponse\n                        ? reject(this._transformer.transformErrorResponse(errorResponse))\n                        : resolve(this._transformer.transformResponse(response)),\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext,\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext,\n                (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>,\n                ) =>\n                    errorResponse\n                        ? reject(this._transformer.transformErrorResponse(errorResponse))\n                        : resolve(this._transformer.transformResponse(response)),\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address | Address[],\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: Array.isArray(shippingAddress)\n                ? shippingAddress.map((address) => mapToInternalAddress(address))\n                : mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload,\n                (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>,\n                ) =>\n                    errorResponse\n                        ? reject(this._transformer.transformErrorResponse(errorResponse))\n                        : resolve(this._transformer.transformResponse(response)),\n            );\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import {\n    createAction,\n    createErrorAction,\n    ReadableDataStore,\n    ThunkAction,\n} from '@bigcommerce/data-store';\nimport { includes } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { LineItem } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { PickupOptionAPIRequestBody, PickupOptionRequestBody } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionRequestSender from './pickup-option-request-sender';\n\nexport default class PickupOptionActionCreator {\n    constructor(private _pickupOptionRequestSender: PickupOptionRequestSender) {}\n\n    loadPickupOptions(\n        query: PickupOptionRequestBody,\n    ): ThunkAction<LoadPickupOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPickupOptionsAction>) => {\n                const apiQuery = this._hydrateApiQuery(store, query);\n\n                observer.next(createAction(PickupOptionActionType.LoadPickupOptionsRequested));\n\n                this._pickupOptionRequestSender\n                    .fetchPickupOptions(apiQuery)\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PickupOptionActionType.LoadPickupOptionsSucceeded,\n                                response.body.results,\n                                query,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PickupOptionActionType.LoadPickupOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _hydrateApiQuery(\n        store: ReadableDataStore<InternalCheckoutSelectors>,\n        query: PickupOptionRequestBody,\n    ): PickupOptionAPIRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const consignment = state.consignments.getConsignmentById(query.consignmentId);\n\n        if (!consignment) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        const consignmentLineItems = consignment.lineItemIds;\n        const physicalItems = cart.lineItems.physicalItems;\n        const cartItems = physicalItems\n            .filter((item: LineItem) => includes(consignmentLineItems, item.id))\n            .map((item) => ({\n                variantId: item.variantId,\n                quantity: item.quantity,\n            }));\n\n        return {\n            searchArea: query.searchArea,\n            items: cartItems,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { PickupOptionAPIRequestBody, PickupOptionResponse } from './pickup-option';\n\nconst url = '/api/storefront/pickup-options';\n\nexport default class PickupOptionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    fetchPickupOptions(query: PickupOptionAPIRequestBody): Promise<Response<PickupOptionResponse>> {\n        return this._requestSender.post(url, {\n            headers: { Accept: ContentType.Json, ...SDK_VERSION_HEADERS },\n            body: query,\n        });\n    }\n}\n","type PaymentInstrument = CardInstrument | AccountInstrument;\n\nexport default PaymentInstrument;\n\ninterface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyAction,\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(private _strategyRegistry: Registry<ShippingStrategy>) {}\n\n    updateAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions,\n    ): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n                const payment = store.getState().payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .updateAddress(address, { ...options, methodId })\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.UpdateAddressSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                ShippingStrategyActionType.UpdateAddressFailed,\n                                error,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    selectOption(\n        shippingOptionId: string,\n        options?: ShippingRequestOptions,\n    ): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n                const payment = store.getState().payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .selectOption(shippingOptionId, { ...options, methodId })\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.SelectOptionSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                ShippingStrategyActionType.SelectOptionFailed,\n                                error,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    initialize(\n        options?: ShippingInitializeOptions,\n    ): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n                const mergedOptions = { ...options, methodId };\n\n                if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.InitializeRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .initialize(mergedOptions)\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.InitializeSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(ShippingStrategyActionType.InitializeFailed, error, {\n                                methodId,\n                            }),\n                        );\n                    });\n            });\n    }\n\n    deinitialize(\n        options?: ShippingRequestOptions,\n    ): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n                const methodId = (options && options.methodId) || (payment && payment.providerId);\n\n                if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                    return observer.complete();\n                }\n\n                observer.next(\n                    createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._strategyRegistry\n                    .get(methodId)\n                    .deinitialize({ ...options, methodId })\n                    .then(() => {\n                        observer.next(\n                            createAction(\n                                ShippingStrategyActionType.DeinitializeSucceeded,\n                                undefined,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(\n                            createErrorAction(\n                                ShippingStrategyActionType.DeinitializeFailed,\n                                error,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    widgetInteraction(\n        method: () => Promise<any>,\n        options?: ShippingRequestOptions,\n    ): Observable<ShippingStrategyAction> {\n        return Observable.create((observer: Observer<ShippingStrategyAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(\n                createAction(ShippingStrategyActionType.WidgetInteractionStarted, undefined, meta),\n            );\n\n            method()\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            ShippingStrategyActionType.WidgetInteractionFinished,\n                            undefined,\n                            meta,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingStrategyActionType.WidgetInteractionFailed,\n                            error,\n                            meta,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    StripeElements,\n    StripeElementsOptions,\n    StripeHostWindow,\n    StripeUPEClient,\n} from './stripe-upe';\n\nexport default class StripeUPEScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: StripeHostWindow = window) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this._window.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this._window, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    getElements(stripeClient: StripeUPEClient, options: StripeElementsOptions): StripeElements {\n        let stripeElements = this._window.bcStripeElements;\n\n        if (!stripeElements) {\n            stripeElements = stripeClient.elements(options);\n\n            Object.assign(this._window, { bcStripeElements: stripeElements });\n        } else {\n            stripeElements.fetchUpdates();\n            stripeElements.update(options);\n        }\n\n        return stripeElements;\n    }\n\n    private async load() {\n        await this._scriptLoader.loadScript('https://js.stripe.com/v3/');\n\n        if (!this._window.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.Stripe;\n    }\n}\n","import { noop } from 'rxjs';\n\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2PaymentProcessor,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\n\nimport { ConsignmentActionCreator, ShippingStrategyActionCreator } from '../..';\nimport { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class AmazonPayV2ShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const updateAddressRequestBody = {\n            ...shippingAddress,\n            customFields: address.customFields,\n        };\n\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(updateAddressRequestBody, options),\n        );\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazonpay, methodId } = options;\n\n        if (!amazonpay || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.amazonpay\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        const { paymentToken, region } = paymentMethod.initializationData;\n        const buttonId = amazonpay.editAddressButtonId;\n\n        if (paymentToken && buttonId) {\n            const shouldShowLoadingSpinner = this._shouldShowLoadingSpinner(region);\n\n            this._bindEditButton(buttonId, paymentToken, 'changeAddress', shouldShowLoadingSpinner);\n        }\n\n        return this._store.getState();\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _bindEditButton(\n        id: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        shouldShowLoadingSpinner: boolean,\n    ): void {\n        const button = document.getElementById(id);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (shouldShowLoadingSpinner) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => this._showLoadingSpinner());\n        }\n\n        this._amazonPayV2PaymentProcessor.bindButton(id, sessionId, changeAction);\n    }\n\n    private _showLoadingSpinner(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._shippingStrategyActionCreator.widgetInteraction(() => new Promise(noop)),\n            { queueId: 'widgetInteraction' },\n        );\n    }\n\n    private _shouldShowLoadingSpinner(region: string) {\n        return region !== 'us';\n    }\n}\n","import { BraintreeConnectProfileData, BraintreeFastlaneProfileData } from '../';\n\nexport default function isBraintreeFastlaneProfileData(\n    profileData: BraintreeFastlaneProfileData | BraintreeConnectProfileData | undefined,\n): profileData is BraintreeFastlaneProfileData {\n    if (!profileData) {\n        return false;\n    }\n\n    return (\n        profileData.hasOwnProperty('shippingAddress') &&\n        profileData.hasOwnProperty('card') &&\n        profileData.hasOwnProperty('fastlaneCustomerId') &&\n        profileData.hasOwnProperty('fastlaneCustomerAuthAssertionToken') &&\n        profileData.hasOwnProperty('name')\n    );\n}\n","import { BraintreeConnectProfileData, BraintreeFastlaneProfileData } from '../';\n\nexport default function isBraintreeConnectProfileData(\n    profileData: BraintreeFastlaneProfileData | BraintreeConnectProfileData | undefined,\n): profileData is BraintreeConnectProfileData {\n    if (!profileData) {\n        return false;\n    }\n\n    return (\n        profileData.hasOwnProperty('addresses') &&\n        profileData.hasOwnProperty('cards') &&\n        profileData.hasOwnProperty('phones') &&\n        profileData.hasOwnProperty('connectCustomerId') &&\n        profileData.hasOwnProperty('connectCustomerAuthAssertionToken') &&\n        profileData.hasOwnProperty('name')\n    );\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    BraintreeConnectAddress,\n    BraintreeConnectPhone,\n    BraintreeConnectProfileData,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneProfileData,\n    BraintreeFastlaneStylesOption,\n    BraintreeFastlaneVaultedInstrument,\n    BraintreeIntegrationService,\n    isBraintreeAcceleratedCheckoutCustomer,\n    isBraintreeConnectName,\n    isBraintreeConnectPhone,\n    isBraintreeConnectProfileData,\n    isBraintreeFastlaneProfileData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { BrowserStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { CustomerAddress } from '../../../customer';\nimport { Country } from '../../../geography';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { PaymentProviderCustomerActionCreator } from '../../../payment-provider-customer';\nimport { CardInstrument } from '../../../payment/instrument';\nimport { UntrustedShippingCardVerificationType } from '../../../payment/instrument/instrument';\nimport { BraintreeInitializationData } from '../../../payment/strategies/braintree';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class BraintreeFastlaneShippingStrategy implements ShippingStrategy {\n    private _browserStorage: BrowserStorage;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _braintreeIntegrationService: BraintreeIntegrationService,\n    ) {\n        this._browserStorage = new BrowserStorage('paypalConnect');\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._consignmentActionCreator.updateAddress(address, options));\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, braintreefastlane } = options || {};\n        const { onPayPalFastlaneAddressChange } = braintreefastlane || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this._store.getState();\n        const customer = state.customer.getCustomerOrThrow();\n\n        if (!customer.isGuest) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        try {\n            if (this._shouldRunAuthenticationFlow()) {\n                await this._store.dispatch(\n                    this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n                );\n\n                await this._runAuthenticationFlowOrThrow(methodId, braintreefastlane?.styles);\n            }\n\n            if (\n                typeof onPayPalFastlaneAddressChange === 'function' &&\n                (await this._shouldUseBraintreeFastlaneShippingComponent(methodId))\n            ) {\n                onPayPalFastlaneAddressChange(() =>\n                    this._handleBraintreeFastlaneShippingAddressChange(),\n                );\n            }\n        } catch (error) {\n            // Info: we should not throw any error here to avoid\n            // customer stuck on shipping step due to the payment provider\n            // custom flow\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldRunAuthenticationFlow(): boolean {\n        const state = this._store.getState();\n        const cartId = state.cart.getCart()?.id;\n        const paypalFastlaneSessionId = this._browserStorage.getItem('sessionId');\n        const paymentProviderCustomer = state.paymentProviderCustomer.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        if (\n            braintreePaymentProviderCustomer?.authenticationState ===\n            BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return (\n            !braintreePaymentProviderCustomer?.authenticationState &&\n            paypalFastlaneSessionId === cartId\n        );\n    }\n\n    private async _runAuthenticationFlowOrThrow(\n        methodId: string,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<void> {\n        const state = this._store.getState();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n        const cart = state.cart.getCartOrThrow();\n        const countries = state.countries.getCountries() || [];\n        const customer = state.customer.getCustomer();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { clientToken, config } = paymentMethod;\n        const { isFastlaneEnabled } = paymentMethod.initializationData;\n        let braintreeAcceleratedCheckout;\n        let shippingAddresses;\n        let billingAddresses;\n        let instruments;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeIntegrationService.initialize(clientToken, storeConfig);\n\n        if (isFastlaneEnabled) {\n            braintreeAcceleratedCheckout =\n                await this._braintreeIntegrationService.getBraintreeFastlane(\n                    cart?.id,\n                    config?.testMode,\n                    styles,\n                );\n        } else {\n            braintreeAcceleratedCheckout =\n                await this._braintreeIntegrationService.getBraintreeConnect(\n                    cart?.id,\n                    config?.testMode,\n                    styles,\n                );\n        }\n\n        const customerEmail = customer?.email || billingAddress?.email;\n\n        if (!customerEmail) {\n            return;\n        }\n\n        const { lookupCustomerByEmail, triggerAuthenticationFlow } =\n            braintreeAcceleratedCheckout.identity;\n\n        const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n        if (!customerContextId) {\n            return;\n        }\n\n        const { authenticationState, profileData } = await triggerAuthenticationFlow(\n            customerContextId,\n        );\n\n        if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n            await this._store.dispatch(\n                this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                }),\n            );\n\n            this._browserStorage.removeItem('sessionId');\n\n            return;\n        }\n\n        const paypalBillingAddresses = this._getPayPalBillingAddresses(profileData) || [];\n\n        if (isFastlaneEnabled && isBraintreeFastlaneProfileData(profileData)) {\n            shippingAddresses =\n                this._mapPayPalToBcAddress([profileData.shippingAddress], countries, []) || [];\n            billingAddresses =\n                this._mapPayPalToBcAddress(paypalBillingAddresses, countries, []) || [];\n            instruments = profileData.card\n                ? this._mapPayPalToBcInstrument(methodId, [profileData.card])\n                : [];\n        } else if (isBraintreeConnectProfileData(profileData)) {\n            shippingAddresses =\n                this._mapPayPalToBcAddress(profileData.addresses, countries, profileData.phones) ||\n                [];\n            billingAddresses =\n                this._mapPayPalToBcAddress(paypalBillingAddresses, countries, profileData.phones) ||\n                [];\n            instruments = this._mapPayPalToBcInstrument(methodId, profileData.cards) || [];\n        }\n\n        if (shippingAddresses && billingAddresses) {\n            const addresses = this._mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            await this._store.dispatch(\n                this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses,\n                    instruments,\n                }),\n            );\n\n            if (billingAddresses.length > 0) {\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress({\n                        ...billingAddresses[0],\n                        id: String(billingAddresses[0].id),\n                    }),\n                );\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(shippingAddresses[0]),\n                );\n            }\n        }\n    }\n\n    private _getPayPalBillingAddresses(\n        profileData?: BraintreeConnectProfileData | BraintreeFastlaneProfileData,\n    ): BraintreeFastlaneAddress[] | undefined {\n        let cards;\n        const { name } = profileData || {};\n\n        if (isBraintreeFastlaneProfileData(profileData)) {\n            cards = [profileData.card];\n        } else if (isBraintreeConnectProfileData(profileData)) {\n            cards = profileData.cards;\n        }\n\n        return cards?.reduce(\n            (\n                billingAddressesList: BraintreeFastlaneAddress[],\n                instrument: BraintreeFastlaneVaultedInstrument,\n            ) => {\n                const { firstName, lastName } = instrument.paymentSource.card.billingAddress;\n                let given_name;\n                let surname;\n\n                if (isBraintreeConnectName(name)) {\n                    given_name = name.given_name;\n                    surname = name.surname;\n                } else {\n                    given_name = name?.firstName;\n                    surname = name?.lastName;\n                }\n\n                const address = {\n                    ...instrument.paymentSource.card.billingAddress,\n                    firstName: firstName || given_name,\n                    lastName: lastName || surname,\n                };\n                const isAddressExist = billingAddressesList.some(\n                    (existingAddress: BraintreeConnectAddress) =>\n                        isEqual(\n                            this._normalizeAddress(address),\n                            this._normalizeAddress(existingAddress),\n                        ),\n                );\n\n                return isAddressExist ? billingAddressesList : [...billingAddressesList, address];\n            },\n            [],\n        );\n    }\n\n    private _getCountryNameByCountryCode(countryCode: string, countries: Country[]): string {\n        const matchedCountry = countries.find((country) => country.code === countryCode);\n\n        return matchedCountry?.name || '';\n    }\n\n    private _mapPayPalToBcAddress(\n        addresses: BraintreeFastlaneAddress[],\n        countries: Country[],\n        phones: BraintreeConnectPhone[] | string[],\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress[] | undefined {\n        let phoneNumber: string;\n\n        if (phones && typeof phones[0] === 'string') {\n            phoneNumber = phones[0];\n        }\n\n        if (phones && isBraintreeConnectPhone(phones[0])) {\n            phoneNumber = phones[0].country_code + phones[0].national_number;\n        }\n\n        return addresses.map((address) => ({\n            id: Number(address.id) || Date.now(),\n            type: 'paypal-address',\n            firstName: address.firstName || '',\n            lastName: address.lastName || '',\n            company: address.company || '',\n            address1: address.streetAddress,\n            address2: address.extendedAddress || '',\n            city: address.locality,\n            stateOrProvince: address.region,\n            stateOrProvinceCode: address.region,\n            country: this._getCountryNameByCountryCode(address.countryCodeAlpha2, countries),\n            countryCode: address.countryCodeAlpha2,\n            postalCode: address.postalCode,\n            phone: phoneNumber || '',\n            customFields: customFields || [],\n        }));\n    }\n\n    private _normalizeAddress(address: CustomerAddress | BraintreeFastlaneAddress) {\n        return omit(address, ['id']);\n    }\n\n    private _mergeShippingAndBillingAddresses(\n        shippingAddresses: CustomerAddress[],\n        billingAddresses: CustomerAddress[],\n    ): CustomerAddress[] {\n        const filteredBillingAddresses = billingAddresses.filter(\n            (billingAddress: CustomerAddress) =>\n                !shippingAddresses.some((shippingAddress: CustomerAddress) => {\n                    return isEqual(\n                        this._normalizeAddress(shippingAddress),\n                        this._normalizeAddress(billingAddress),\n                    );\n                }),\n        );\n\n        return [...shippingAddresses, ...filteredBillingAddresses];\n    }\n\n    private _mapPayPalToBcInstrument(\n        methodId: string,\n        instruments?: BraintreeFastlaneVaultedInstrument[],\n    ): CardInstrument[] | undefined {\n        if (!instruments) {\n            return;\n        }\n\n        return instruments.map((instrument) => {\n            const { id, paymentSource } = instrument;\n            const { brand, expiry, lastDigits } = paymentSource.card;\n\n            const [expiryYear, expiryMonth] = expiry.split('-');\n\n            return {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.CVV,\n                type: 'card',\n            };\n        });\n    }\n\n    /**\n     *\n     * Braintree Fastlane shipping address change through Fastlane external popup\n     *\n     */\n    private async _handleBraintreeFastlaneShippingAddressChange(): Promise<\n        CustomerAddress | undefined\n    > {\n        const state = this._store.getState();\n        const countries = state.countries.getCountries() || [];\n        const braintreeFastlane = await this._braintreeIntegrationService.getBraintreeFastlane();\n\n        const { selectionChanged, selectedAddress } =\n            await braintreeFastlane.profile.showShippingAddressSelector();\n\n        if (selectionChanged) {\n            const state = this._store.getState();\n            const shipping = state.shippingAddress.getShippingAddressesOrThrow();\n            const paymentProviderCustomer =\n                state.paymentProviderCustomer.getPaymentProviderCustomer();\n            const braintreeFastlaneCustomer = isBraintreeAcceleratedCheckoutCustomer(\n                paymentProviderCustomer,\n            )\n                ? paymentProviderCustomer\n                : {};\n\n            const shippingAddress = this._mapPayPalToBcAddress(\n                [selectedAddress],\n                countries,\n                [selectedAddress.phoneNumber],\n                shipping[0].customFields,\n            );\n\n            if (shippingAddress) {\n                const paymentProviderCustomerAddresses = this._filterAddresses([\n                    shippingAddress[0],\n                    ...(braintreeFastlaneCustomer.addresses || []),\n                ]);\n\n                await this._store.dispatch(\n                    this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer({\n                        ...braintreeFastlaneCustomer,\n                        addresses: paymentProviderCustomerAddresses,\n                    }),\n                );\n\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(shippingAddress[0]),\n                );\n\n                return shippingAddress[0];\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * This method is responsible for filtering BT Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from BT Fastlane in checkout flow\n     *\n     */\n    private _filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this._isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private _isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this._normalizeAddress(firstAddress), this._normalizeAddress(secondAddress));\n    }\n\n    // TODO: reimplement this method when PAYPAL-3996.paypal_fastlane_shipping_update and Fastlane features will be rolled out to 100%\n    private async _shouldUseBraintreeFastlaneShippingComponent(methodId: string): Promise<boolean> {\n        const state = this._store.getState();\n        const features = state.config.getStoreConfigOrThrow().checkoutSettings.features;\n        const paymentProviderCustomer = state.paymentProviderCustomer.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        // Info: to avoid loading payment method we should check for values\n        // that does not require api calls first\n        if (\n            features &&\n            features['PAYPAL-3996.paypal_fastlane_shipping_update'] &&\n            !!braintreePaymentProviderCustomer &&\n            braintreePaymentProviderCustomer !== BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            const paymentMethod = await this._getBraintreePaymentMethodOrThrow(methodId);\n\n            return !!paymentMethod?.initializationData?.isFastlaneEnabled;\n        }\n\n        return false;\n    }\n\n    private async _getBraintreePaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            const newState = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n            );\n\n            return newState.paymentMethods.getPaymentMethodOrThrow(methodId);\n        }\n\n        return paymentMethod;\n    }\n}\n","import { CustomFont, PaymentIntent, StripeConfigurationOptions } from '../stripev3';\n\nexport { StripeAdditionalAction } from '../stripev3';\n\nexport interface StripeError {\n    /**\n     * type of error. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user.\n     */\n    type: string;\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n}\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n\n    /**\n     * The change event is triggered when the Element's value changes. The event payload always contains certain keys,\n     * in addition to some Element-specific keys.\n     * https://stripe.com/docs/js/element/events/on_change?type=paymentElement\n     */\n    on(event: 'change' | 'ready', handler: (event: StripeEventType) => void): void;\n}\n\nexport interface StripeEvent {\n    complete: boolean;\n    elementType: string;\n    empty: boolean;\n}\n\nexport interface StripeCustomerEvent extends StripeEvent {\n    collapsed?: boolean;\n    authenticated: boolean;\n    value: {\n        email: string;\n    };\n}\n\nexport interface StripeShippingEvent extends StripeEvent {\n    mode?: string;\n    isNewAddress?: boolean;\n    phoneFieldRequired: boolean;\n    value: {\n        address: {\n            city: string;\n            country: string;\n            line1: string;\n            line2?: string;\n            postal_code: string;\n            state: string;\n        };\n        name?: string;\n        firstName?: string;\n        lastName?: string;\n        phone?: string;\n    };\n    fields?: {\n        phone: string;\n    };\n    display?: {\n        name: string;\n    };\n}\n\nexport type StripeEventType = StripeShippingEvent | StripeCustomerEvent;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping\n */\nexport interface AddressOptions {\n    city?: string;\n    country?: string;\n    state?: string;\n    postal_code?: string;\n    line1?: string;\n    line2?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface AddressProperties {\n    city?: AutoOrNever;\n    country?: AutoOrNever;\n    state?: AutoOrNever;\n    postalCode?: AutoOrNever;\n    line1?: AutoOrNever;\n    line2?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsOptions {\n    name?: string;\n    email?: string;\n    address?: AddressOptions;\n    phone?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsProperties {\n    name?: AutoOrNever;\n    email?: AutoOrNever;\n    address?: AutoOrNever | AddressProperties;\n    phone?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface PaymentMethodDataOptions {\n    billing_details: BillingDetailsOptions;\n}\n\n/**\n * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n */\nexport interface StripeUPEConfirmParams {\n    /**\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n    payment_method_data?: PaymentMethodDataOptions;\n}\n\n/**\n * Data to be sent with a `stripe.confirmPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/js/payment_intents/confirm_payment) for a full list of parameters.\n */\nexport interface StripeConfirmPaymentData {\n    /**\n     * The Elements instance that was used to create the Payment Element.\n     */\n    elements: StripeElements;\n\n    /**\n     * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n     */\n    confirmParams?: StripeUPEConfirmParams;\n\n    /**\n     * By default, confirmPayment will always redirect to your return_url after a successful confirmation.\n     * If you set redirect: \"if_required\", then confirmPayment will only redirect if your user chooses a redirect-based payment method.\n     */\n    redirect?: StripeStringConstants.ALWAYS | StripeStringConstants.IF_REQUIRED;\n}\n\nexport interface FieldsOptions {\n    billingDetails?: AutoOrNever | BillingDetailsProperties;\n    phone?: string;\n}\n\nexport interface WalletOptions {\n    applePay?: AutoOrNever;\n    googlePay?: AutoOrNever;\n}\n\n/**\n * All available options are here https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface StripeElementsCreateOptions {\n    mode?: string;\n    fields?: FieldsOptions;\n    wallets?: WalletOptions;\n    allowedCountries?: string[];\n    defaultValues?: ShippingDefaultValues | CustomerDefaultValues;\n    validation?: validationElement;\n    display?: { name: DisplayName };\n}\n\ninterface validationElement {\n    phone?: validationRequiredElement;\n}\n\ninterface validationRequiredElement {\n    required?: string;\n}\n\ninterface ShippingDefaultValues {\n    name?: string;\n    firstName?: string;\n    lastName?: string;\n    phone: string;\n    address: {\n        line1: string;\n        line2: string;\n        city: string;\n        state: string;\n        postal_code: string;\n        country: string;\n    };\n}\n\n/*\nDecide which mode you are going to use the Address Element\nShipping: is used with the Payment Element and Link Authentication Element, it will automatically pass shipping\ninformation when confirming Payment Intent or Setup Intent.\nBilling: is used with the Payment Element, it will automatically pass the billing information when confirming\nPayment Intent or Setup Intent.\n */\nexport enum StripeFormMode {\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n}\n\nexport enum DisplayName {\n    SPLIT = 'split',\n    FULL = 'full',\n    ORGANIZATION = 'organization',\n}\n\ninterface CustomerDefaultValues {\n    mode: StripeFormMode;\n    email: string;\n    allowedCountries?: string[];\n    display?: {\n        name: DisplayName;\n    };\n}\n\nexport interface StripeElements {\n    /**\n     * Creates an Elements instance, which manages a group of elements.\n     * https://stripe.com/docs/js/elements_object/create\n     */\n    create(elementType: StripeElementType, options?: StripeElementsCreateOptions): StripeElement;\n\n    /**\n     * Looks up a previously created element.\n     * https://stripe.com/docs/js/elements_object/get_payment_element or\n     * https://stripe.com/docs/js/elements_object/get_link_authentication_element\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n\n    /**\n     * Updates options on an existing instance of Elements.\n     * https://stripe.com/docs/js/elements_object/update\n     */\n    update(options?: StripeUpdateElementsOptions): StripeElement;\n\n    /**\n     * Fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements,\n     * and reflects these updates in the Payment Element.\n     * https://stripe.com/docs/js/elements_object/fetch_updates\n     */\n    fetchUpdates(): void;\n}\n\n/**\n * All available options are here https://stripe.com/docs/stripe-js/appearance-api#supported-css-properties\n */\nexport interface StripeUPEAppearanceOptions {\n    variables?: {\n        colorPrimary?: string;\n        colorBackground?: string;\n        colorText?: string;\n        colorDanger?: string;\n        colorTextSecondary?: string;\n        colorTextPlaceholder?: string;\n        colorIcon?: string;\n        colorIconCardError?: string;\n        colorIconRedirect?: string;\n        spacingUnit?: string;\n        borderRadius?: string;\n    };\n    rules?: {\n        '.Input'?: {\n            borderColor?: string;\n            color?: string;\n            boxShadow?: string;\n        };\n    };\n}\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n     * The client secret can be used to complete a payment from your frontend.\n     * It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer.\n     * Make sure that you have TLS enabled on any page that includes the client secret.\n     * Refer to our docs to accept a payment and learn about how client_secret should be handled.\n     */\n    clientSecret: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeUPEAppearanceOptions;\n}\n\nexport interface StripeUpdateElementsOptions {\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeUPEAppearanceOptions;\n}\n\nexport interface StripeUPEClient {\n    /**\n     * Use confirmPayment to confirm a PaymentIntent using data collected by the Payment Element.\n     * When called, confirmPayment will attempt to complete any required actions,\n     * such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\n     */\n    confirmPayment(options: StripeConfirmPaymentData): Promise<StripeUpeResult>;\n\n    /**\n     * When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n     */\n    confirmCardPayment(clientSecret: string): Promise<StripeUpeResult>;\n\n    /**\n     * Retrieve a PaymentIntent using its client secret.\n     */\n    retrievePaymentIntent(clientSecret: string): Promise<StripeUpeResult>;\n\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options: StripeElementsOptions): StripeElements;\n}\n\ninterface StripeUpeResult {\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n}\n\nexport interface StripeHostWindow extends Window {\n    bcStripeClient?: StripeUPEClient;\n    bcStripeElements?: StripeElements;\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeUPEClient;\n}\n\nexport enum StripePaymentMethodType {\n    CreditCard = 'card',\n    SOFORT = 'sofort',\n    EPS = 'eps',\n    GRABPAY = 'grabpay',\n    BANCONTACT = 'bancontact',\n    IDEAL = 'ideal',\n    GIROPAY = 'giropay',\n    ALIPAY = 'alipay',\n    KLARNA = 'klarna',\n}\n\ntype AutoOrNever = StripeStringConstants.AUTO | StripeStringConstants.NEVER;\n\nexport enum StripeStringConstants {\n    NEVER = 'never',\n    AUTO = 'auto',\n    ALWAYS = 'always',\n    PAYMENT = 'payment',\n    IF_REQUIRED = 'if_required',\n}\n\nexport enum StripeElementType {\n    PAYMENT = 'payment',\n    AUTHENTICATION = 'linkAuthentication',\n    SHIPPING = 'address',\n}\n\nexport enum StripeUPEPaymentIntentStatus {\n    REQUIRES_PAYMENT_METHOD = 'requires_payment_method',\n    REQUIRES_CONFIRMATION = 'requires_confirmation',\n    REQUIRES_ACTION = 'requires_action',\n    PROCESSING = 'processing',\n    SUCCEEDED = 'succeeded',\n    CANCELED = 'canceled',\n}\n","import { BraintreeConnectName, BraintreeFastlaneName } from '../braintree';\n\nexport default function isBraintreeConnectName(\n    braintreeConnectName: BraintreeConnectName | BraintreeFastlaneName | undefined,\n): braintreeConnectName is BraintreeConnectName {\n    if (!braintreeConnectName) {\n        return false;\n    }\n\n    return (\n        braintreeConnectName.hasOwnProperty('given_name') &&\n        braintreeConnectName.hasOwnProperty('surname')\n    );\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._consignmentActionCreator.updateAddress(address, options));\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isPayPalCommerceAcceleratedCheckoutCustomer,\n    isPayPalFastlaneCustomer,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { PaymentProviderCustomerActionCreator } from '../../../payment-provider-customer';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class PayPalCommerceFastlaneShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _paypalCommerceSdk: PayPalCommerceSdk,\n        private _paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._consignmentActionCreator.updateAddress(address, options));\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, paypalcommercefastlane } = options || {};\n        const { onPayPalFastlaneAddressChange, styles } = paypalcommercefastlane || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this._store.getState();\n        const customer = state.customer.getCustomerOrThrow();\n\n        if (!customer?.isGuest) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        try {\n            if (this._shouldAuthenticateUserWithFastlane()) {\n                await this._initializePayPalSdk(methodId, styles);\n                await this._authenticateUserWithFastlaneOtp(methodId);\n            }\n\n            if (\n                typeof onPayPalFastlaneAddressChange === 'function' &&\n                this._shouldUsePayPalFastlaneShippingComponent()\n            ) {\n                await this._initializePayPalSdk(methodId, styles);\n                onPayPalFastlaneAddressChange(() => this._handlePayPalShippingAddressChange());\n            }\n        } catch (error) {\n            // Info: we should not throw any error here to avoid customer stuck on\n            // shipping step due to the payment provider custom flow\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _getPayPalPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<PayPalCommerceInitializationData>> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            const newState = await this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n            );\n\n            return newState.paymentMethods.getPaymentMethodOrThrow(methodId);\n        }\n\n        return paymentMethod;\n    }\n\n    private _getPayPalCustomerAuthenticationState(): string | undefined {\n        const state = this._store.getState();\n        const paymentProviderCustomer =\n            state.paymentProviderCustomer.getPaymentProviderCustomerOrThrow();\n        const paypalCommercePaymentProviderCustomer = isPayPalCommerceAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return paypalCommercePaymentProviderCustomer.authenticationState;\n    }\n\n    private _shouldAuthenticateUserWithFastlane(): boolean {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const paypalConnectSessionId = this._paypalCommerceFastlaneUtils.getStorageSessionId();\n\n        const customerAuthenticationState = this._getPayPalCustomerAuthenticationState();\n\n        return !customerAuthenticationState && paypalConnectSessionId === cart.id;\n    }\n\n    // TODO: reimplement this method when PAYPAL-3996.paypal_fastlane_shipping_update and Fastlane features will be rolled out to 100%\n    private _shouldUsePayPalFastlaneShippingComponent(): boolean {\n        const state = this._store.getState();\n        const features = state.config.getStoreConfigOrThrow().checkoutSettings.features;\n        const customerAuthenticationState = this._getPayPalCustomerAuthenticationState();\n\n        return (\n            features &&\n            features['PAYPAL-3996.paypal_fastlane_shipping_update'] &&\n            !!customerAuthenticationState &&\n            customerAuthenticationState !== PayPalFastlaneAuthenticationState.CANCELED\n        );\n    }\n\n    private async _initializePayPalSdk(\n        methodId: string,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        const paymentMethod = await this._getPayPalPaymentMethodOrThrow(methodId);\n        const isTestModeEnabled = !!paymentMethod?.initializationData?.isDeveloperModeApplicable;\n\n        const paypalFastlaneSdk = await this._paypalCommerceSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        await this._paypalCommerceFastlaneUtils.initializePayPalFastlane(\n            paypalFastlaneSdk,\n            isTestModeEnabled,\n            styles,\n        );\n    }\n\n    private async _authenticateUserWithFastlaneOtp(methodId: string): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const customerEmail = state.customer.getCustomer()?.email;\n        const billingAddressEmail = state.billingAddress.getBillingAddress()?.email;\n        const email = customerEmail || billingAddressEmail || '';\n\n        const { customerContextId } = await this._paypalCommerceFastlaneUtils.lookupCustomerOrThrow(\n            email,\n        );\n\n        const authenticationResult =\n            await this._paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this._paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this._store.dispatch(\n            this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            }),\n        );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        this._paypalCommerceFastlaneUtils.updateStorageSessionId(\n            isAuthenticationFlowCanceled,\n            cart.id,\n        );\n\n        if (billingAddress) {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...billingAddress,\n                    id: String(billingAddress.id),\n                }),\n            );\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n        }\n    }\n\n    /**\n     *\n     * PayPal Fastlane shipping address change through Fastlane external popup\n     *\n     */\n    private async _handlePayPalShippingAddressChange(): Promise<CustomerAddress | undefined> {\n        const paypalFastlaneSdk = this._paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedAddress } =\n            await paypalFastlaneSdk.profile.showShippingAddressSelector();\n\n        if (selectionChanged) {\n            const state = this._store.getState();\n            const shipping = state.shippingAddress.getShippingAddressesOrThrow();\n            const paymentProviderCustomer =\n                state.paymentProviderCustomer.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const shippingAddress = this._paypalCommerceFastlaneUtils.mapPayPalToBcAddress(\n                selectedAddress.address,\n                selectedAddress.name,\n                selectedAddress.phoneNumber,\n                shipping[0].customFields,\n            );\n\n            const paymentProviderCustomerAddresses =\n                this._paypalCommerceFastlaneUtils.filterAddresses([\n                    shippingAddress,\n                    ...(paypalFastlaneCustomer.addresses || []),\n                ]);\n\n            await this._store.dispatch(\n                this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer({\n                    ...paypalFastlaneCustomer,\n                    addresses: paymentProviderCustomerAddresses,\n                }),\n            );\n\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n\n            return shippingAddress;\n        }\n\n        return undefined;\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    DisplayName,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeEventType,\n    StripeFormMode,\n    StripeScriptLoader,\n    StripeUPEAppearanceOptions,\n    StripeUPEClient,\n} from '../../../payment/strategies/stripe-upe';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class StripeUPEShippingStrategy implements ShippingStrategy {\n    private _stripeUPEClient?: StripeUPEClient;\n    private _stripeElements?: StripeElements;\n    private sendData?: ReturnType<typeof setTimeout>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _stripeUPEScriptLoader: StripeScriptLoader,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._consignmentActionCreator.updateAddress(address, options));\n    }\n\n    selectOption(\n        optionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options),\n        );\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const {\n            container,\n            gatewayId,\n            methodId,\n            onChangeShipping,\n            getStyles,\n            availableCountries,\n            getStripeState,\n        } = options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            }),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId, gatewayId);\n        const {\n            initializationData: { stripePublishableKey, stripeConnectedAccount },\n        } = paymentMethod;\n\n        if (\n            !paymentMethod ||\n            !paymentMethod.initializationData.stripePublishableKey ||\n            !paymentMethod.clientToken\n        ) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._stripeUPEScriptLoader.getStripeClient(\n            stripePublishableKey,\n            stripeConnectedAccount,\n        );\n\n        let appearance: StripeUPEAppearanceOptions;\n        const styles = getStyles && getStyles();\n\n        const {\n            form: { getShippingAddressFields },\n            shippingAddress: { getShippingAddress },\n        } = this._store.getState();\n\n        const shippingFields = getShippingAddressFields([], '');\n\n        if (styles) {\n            appearance = {\n                variables: {\n                    colorPrimary: styles.fieldInnerShadow,\n                    colorBackground: styles.fieldBackground,\n                    colorText: styles.labelText,\n                    colorDanger: styles.fieldErrorText,\n                    colorTextSecondary: styles.labelText,\n                    colorTextPlaceholder: styles.fieldPlaceholderText,\n                    spacingUnit: '4px',\n                    borderRadius: '4px',\n                },\n                rules: {\n                    '.Input': {\n                        borderColor: styles.fieldBorder,\n                        color: styles.fieldText,\n                        boxShadow: styles.fieldInnerShadow,\n                    },\n                },\n            };\n        } else {\n            appearance = {\n                variables: {\n                    spacingUnit: '4px',\n                    borderRadius: '4px',\n                },\n            };\n        }\n\n        this._stripeElements = this._stripeUPEScriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: paymentMethod.clientToken,\n            appearance,\n        });\n\n        const shipping = getShippingAddress();\n        const shippingPhoneField = shippingFields.find((field) => field.name === 'phone');\n        let option: StripeElementsCreateOptions = {\n            mode: StripeFormMode.SHIPPING,\n            allowedCountries: [availableCountries],\n            fields: {\n                phone: 'always',\n            },\n            validation: {\n                phone: {\n                    required:\n                        shippingPhoneField && shippingPhoneField.required ? 'always' : 'never',\n                },\n            },\n            display: {\n                name: DisplayName.SPLIT,\n            },\n        };\n\n        if (shipping) {\n            const {\n                stateOrProvinceCode,\n                countryCode,\n                lastName,\n                firstName,\n                phone,\n                address1,\n                address2,\n                city,\n                postalCode,\n            } = shipping;\n            const stripeState =\n                stateOrProvinceCode && countryCode\n                    ? getStripeState(countryCode, stateOrProvinceCode)\n                    : stateOrProvinceCode;\n\n            option = {\n                ...option,\n                defaultValues: {\n                    firstName,\n                    lastName,\n                    phone,\n                    address: {\n                        line1: address1,\n                        line2: address2,\n                        city,\n                        state: stripeState,\n                        postal_code: postalCode,\n                        country: countryCode,\n                    },\n                },\n            };\n        }\n\n        let shippingAddressElement = this._stripeElements.getElement(StripeElementType.SHIPPING);\n\n        if (shippingAddressElement) {\n            shippingAddressElement.destroy();\n        }\n\n        shippingAddressElement = this._stripeElements.create(StripeElementType.SHIPPING, option);\n\n        shippingAddressElement.on('change', (event: StripeEventType) => {\n            if (!('isNewAddress' in event)) {\n                throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n            }\n\n            if (event.complete || event.isNewAddress) {\n                if (this.sendData) {\n                    clearTimeout(this.sendData);\n                }\n\n                this.sendData = setTimeout(() => {\n                    onChangeShipping({\n                        ...event,\n                        phoneFieldRequired: shippingPhoneField\n                            ? shippingPhoneField.required\n                            : false,\n                    });\n                }, 1000);\n            }\n        });\n\n        shippingAddressElement.mount(`#${container}`);\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        /* The new shipping component by StripeLink has a small bug, when the component is unmounted,\n        Stripe does not save the shipping, to solve this, we will leave it mounted,\n        and once it is fixed will be unmounted again */\n\n        // this._stripeElements?.getElement(StripeElementType.SHIPPING)?.unmount();\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { SignInEmailRequestBody } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailRequestSender from './signin-email-request-sender';\n\nexport default class SignInEmailActionCreator {\n    constructor(private _requestSender: SignInEmailRequestSender) {}\n\n    sendSignInEmail(\n        emailRequest: SignInEmailRequestBody,\n        options?: RequestOptions,\n    ): Observable<SendSignInEmailAction> {\n        return concat(\n            of(createAction(SignInEmailActionType.SendSignInEmailRequested)),\n            defer(async () => {\n                const { body } = await this._requestSender.sendSignInEmail(emailRequest, options);\n\n                return createAction(SignInEmailActionType.SendSignInEmailSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(SignInEmailActionType.SendSignInEmailFailed, error),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { parseUrl } from '../common/url';\n\nimport { SignInEmail, SignInEmailRequestBody } from './signin-email';\n\nexport default class SignInEmailRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    sendSignInEmail(\n        { email, redirectUrl }: SignInEmailRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<SignInEmail>> {\n        const url = '/login.php?action=passwordless_login';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: {\n                email,\n                redirect_url: redirectUrl || parseUrl(window.top.location.href).pathname,\n            },\n            headers,\n            timeout,\n        });\n    }\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(private _messageCustomizer: (type: TError) => string) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input\n        .split(/(?:\\r\\n|\\n|\\r)/)\n        .map((line) => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport {\n    CustomerAccountRequestBody,\n    CustomerActionCreator,\n    CustomerAddressRequestBody,\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    CustomerStrategyActionCreator,\n    ExecutePaymentMethodCheckoutOptions,\n    GuestCredentials,\n} from '../customer';\nimport {\n    ExtensionActionCreator,\n    ExtensionCommandMap,\n    ExtensionEventBroadcaster,\n    ExtensionMessenger,\n    ExtensionRegion,\n} from '../extension';\nimport { FormFieldsActionCreator } from '../form';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport {\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n    PickupOptionActionCreator,\n    PickupOptionRequestBody,\n    ShippingCountryActionCreator,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    ShippingStrategyActionCreator,\n} from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestBody } from '../signin-email';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\nimport { Subscriptions, SubscriptionsActionCreator } from '../subscription';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjection: DataStoreProjection<CheckoutSelectors>,\n        private _extensionMessenger: ExtensionMessenger,\n        private _extensionEventBroadcaster: ExtensionEventBroadcaster,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _customerActionCreator: CustomerActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _pickupOptionActionCreator: PickupOptionActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _signInEmailActionCreator: SignInEmailActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _subscriptionsActionCreator: SubscriptionsActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n        private _extensionActionCreator: ExtensionActionCreator,\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(\n        id?: string,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors> {\n        return this._dispatch(\n            id\n                ? this._checkoutActionCreator.loadCheckout(id, options)\n                : this._checkoutActionCreator.loadDefaultCheckout(options),\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(\n        payload: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const formFieldsAction = this._formFieldsActionCreator.loadFormFields(options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n            this._dispatch(formFieldsAction, { queueId: 'formFields' }),\n        ]).then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a list of payment methods for given ids.\n     *\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethodsById(['applepay']);\n     *\n     * console.log(state.data.getPaymentMethodOrThrow('applepay'));\n     * ```\n     *\n     * @param methodIds - The identifier for the payment methods to load.\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethodByIds(\n        methodIds: string[],\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethodsById(methodIds, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, you can provide an element ID for\n     * Amazon Pay if you want users to be able to select a different payment\n     * method by clicking on the element.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazonpay',\n     *     amazonpay: {\n     *         editButtonId: 'edit-button',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazonpay',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a list of pickup options for a given criteria.\n     *\n     * ```js\n     * const consignmentId = '1';\n     * const searchArea = {\n     *     radius: {\n     *         value: 1.4,\n     *         unit: 'KM'\n     *     },\n     *     coordinates: {\n     *         latitude: 1.4,\n     *         longitude: 0\n     *     },\n     * };\n     * const state = await service.loadPickupOptions({ consignmentId, searchArea });\n     *\n     * console.log(state.data.getPickupOptions(consignmentId, searchArea));\n     * ```\n     *\n     * @alpha\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPickupOptions(query: PickupOptionRequestBody): Promise<CheckoutSelectors> {\n        const action = this._pickupOptionActionCreator.loadPickupOptions(query);\n\n        return this._dispatch(action, { queueId: 'pickupOptions' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon Pay, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazonpay',\n     *     amazonpay: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazonpay',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Sends a email that contains a single-use sign-in link. When a valid links is clicked,\n     * signs in the customer without requiring any password, redirecting them to the account page if no redirectUrl is provided.\n     *\n     *\n     * ```js\n     * checkoutService.sendSignInEmail({ email: 'foo@bar.com', redirectUrl: 'checkout' });\n     * ```\n     *\n     * @param signInEmailRequest - The sign-in email request values.\n     * @param options - Options for the send email request.\n     * @returns A promise that resolves to the current state.\n     */\n    sendSignInEmail(\n        signInEmailRequest: SignInEmailRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._signInEmailActionCreator.sendSignInEmail(signInEmailRequest, options);\n\n        return this._dispatch(action, { queueId: 'signInEmail' });\n    }\n\n    /**\n     * Creates a customer account.\n     *\n     * @remarks\n     * ```js\n     * checkoutService.createCustomerAccount({\n     *   email: 'foo@bar.com',\n     *   firstName: 'Foo',\n     *   lastName: 'Bar',\n     *   password: 'password',\n     *   acceptsMarketingEmails: true,\n     *   customFields: [],\n     * });\n     * ```\n     * Please note that `createCustomerAccount` is currently in an early stage\n     * of development. Therefore the API is unstable and not ready for public\n     * consumption.\n     *\n     * @alpha\n     * @param customerAccount - The customer account data.\n     * @param options - Options for creating customer account.\n     * @returns A promise that resolves to the current state.\n     */\n    createCustomerAccount(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerActionCreator.createCustomer(customerAccount, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Creates a customer account address.\n     *\n     * @remarks\n     * ```js\n     * checkoutService.createCustomerAddress({\n     *   firstName: 'Foo',\n     *   lastName: 'Bar',\n     *   address1: '55 Market St',\n     *   stateOrProvinceCode: 'CA',\n     *   countryCode: 'US',\n     *   postalCode: '90110',\n     *   customFields: [],\n     * });\n     * ```\n     * Please note that `createCustomerAccountAddress` is currently in an early stage\n     * of development. Therefore the API is unstable and not ready for public\n     * consumption.\n     *\n     * @alpha\n     * @param customerAddress - The customer account data.\n     * @param options - Options for creating customer account.\n     * @returns A promise that resolves to the current state.\n     */\n    createCustomerAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerActionCreator.createAddress(customerAddress, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Updates the subscriptions associated to an email.\n     *\n     * @param subscriptions - The email and associated subscriptions to update.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._subscriptionsActionCreator.updateSubscriptions(subscriptions, options);\n\n        return this._dispatch(action, { queueId: 'subscriptions' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * If your Checkout Settings allow it, your customers could continue the checkout as guests (without signing in).\n     * If you have enabled the checkout setting \"Prompt existing accounts to sign in\", this information is\n     * exposed as part of the [Customer](../interfaces/customer.md) object.\n     *\n     * Once they provide their email address, it will be stored as\n     * part of their [billing address](../interfaces/billingaddress.md).\n     *\n     * @param credentials - The guest credentials to use, with optional subscriptions.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: CustomerRequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * When a store has \"Allow customers to access their cart across multiple devices\" enabled, signing out\n     * will remove the cart/checkout data from the current session. An error with type=\"checkout_not_available\" will be thrown.\n     *\n     * ```js\n     * try {\n     *   await service.signOutCustomer();\n     * } catch (error) {\n     *   if (error.type === 'checkout_not_available') {\n     *     window.top.location.assign('/');\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Executes custom checkout of the priority payment method.\n     *\n     * Some payment methods, such as Bolt, can use their own checkout\n     * with autofilled customers data, to make checkout passing process\n     * easier and faster for customers with Bolt account.\n     *\n     * ```js\n     * await service.executePaymentMethodCheckout({\n     *     methodId: 'bolt',\n     *     fallback: () => {},\n     * });\n     * ```\n     *\n     * @param options - Options for executing payment method checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.executePaymentMethodCheckout(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon Pay, can provide shipping\n     * information to be used for checkout. In order to support them, this\n     * method must be called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazonpay',\n     *     amazonpay: {\n     *         editAddressButtonId: 'changeAddressButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazonpay',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(\n        shippingOptionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(consignmentId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption(\n            {\n                id: consignmentId,\n                shippingOptionId,\n            },\n            options,\n        );\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(\n        address: Partial<BillingAddressRequestBody>,\n        options: RequestOptions = {},\n    ): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action).then(() => this.loadInstruments());\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails. You should call this method before\n     * `submitOrder` method is called (i.e.: when the shopper\n     * first gets to the payment step).\n     *\n     * **Note**: You need to enable Google ReCAPTCHA bot protection in your Checkout Settings.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.verifyCheckoutSpamProtection();\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Loads a list of extensions available for checkout.\n     *\n     * ```js\n     * const state = await service.loadExtensions();\n     *\n     * console.log(state.data.getExtensions());\n     * ```\n     *\n     * @alpha\n     * @param options - Options for loading the extensions that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadExtensions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._extensionActionCreator.loadExtensions(options);\n\n        return this._dispatch(action, { queueId: 'extensions' });\n    }\n\n    /**\n     * Renders an extension for a checkout extension region.\n     * Currently, only one extension is allowed per region.\n     *\n     * @alpha\n     * @param container - The ID of a container which the extension should be inserted.\n     * @param region - The name of an area where the extension should be presented.\n     * @returns A promise that resolves to the current state.\n     */\n    async renderExtension(container: string, region: ExtensionRegion): Promise<CheckoutSelectors> {\n        const action = this._extensionActionCreator.renderExtension(container, region);\n        const state = await this._dispatch(action, { queueId: 'extensions' });\n\n        this._extensionEventBroadcaster.listen();\n\n        return state;\n    }\n\n    /**\n     * Manages the command handler for an extension.\n     *\n     * @alpha\n     * @param extensionId - The ID of the extension sending the command.\n     * @param command - The command to be handled.\n     * @param handler - The handler function for the extension command.\n     * @returns A function that, when called, will deregister the command handler.\n     */\n    handleExtensionCommand<T extends keyof ExtensionCommandMap>(\n        extensionId: string,\n        command: T,\n        handler: (command: ExtensionCommandMap[T]) => void,\n    ): () => void {\n        return this._extensionMessenger.listen(extensionId, command, handler);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(\n        action: Action | Observable<Action> | ThunkAction<Action>,\n        options?: { queueId?: string },\n    ): Promise<CheckoutSelectors> {\n        return this._store\n            .dispatch(action, options)\n            .then(() => this.getState())\n            .catch((error) => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<\n    CheckoutServiceErrorType | Error\n>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development',\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer((error) => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n            case MissingDataErrorType.MissingConsignments:\n                return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n            case MissingDataErrorType.MissingCart:\n            case MissingDataErrorType.MissingCheckout:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n            case MissingDataErrorType.MissingCheckoutConfig:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n            case MissingDataErrorType.MissingOrder:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n            case MissingDataErrorType.MissingOrderId:\n                return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n            case MissingDataErrorType.MissingPaymentMethod:\n                return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n            case NotInitializedErrorType.CustomerNotInitialized:\n                return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n            case NotInitializedErrorType.PaymentNotInitialized:\n                return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n            case NotInitializedErrorType.ShippingNotInitialized:\n                return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n            default:\n                return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(defaultMemoize, (a: any, b: any) =>\n    shallowEqual(a, b),\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport {\n    ErrorResponseBody,\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeErrors?: { [key: string]: Error };\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeErrors: { ...errors.initializeErrors },\n                initializeMethodId: errors.initializeMethodId\n                    ? errors.initializeMethodId\n                    : undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeErrors: {\n                    ...errors.initializeErrors,\n                    [action.meta && action.meta.methodId]: action.payload,\n                },\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Extension } from './extension';\n\nexport interface ExtensionState {\n    data?: Extension[];\n    errors: ExtensionErrorsState;\n    statuses: ExtensionStatusesState;\n}\n\nexport interface ExtensionErrorsState {\n    loadError?: Error;\n    renderError?: Error;\n}\n\nexport interface ExtensionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ExtensionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport { Extension } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport {\n    DEFAULT_STATE,\n    ExtensionErrorsState,\n    ExtensionState,\n    ExtensionStatusesState,\n} from './extension-state';\n\nexport function extensionReducer(\n    state: ExtensionState = DEFAULT_STATE,\n    action: Action,\n): ExtensionState {\n    const reducer = combineReducers<ExtensionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Extension[] | undefined,\n    action: ExtensionAction,\n): Extension[] | undefined {\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\n        return arrayReplace(data, action.payload);\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\n    action: ExtensionAction,\n): ExtensionErrorsState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n        case ExtensionActionType.LoadExtensionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ExtensionActionType.RenderExtensionRequested:\n        case ExtensionActionType.RenderExtensionSucceeded:\n            return objectSet(errors, 'renderError', undefined);\n\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ExtensionActionType.RenderExtensionFailed:\n            return objectSet(errors, 'renderError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\n    action: ExtensionAction,\n): ExtensionStatusesState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ExtensionActionType.LoadExtensionsSucceeded:\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: true,\n                    },\n                });\n            }\n\n            break;\n        }\n\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: false,\n                    },\n                });\n            }\n        }\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { PaymentProviderCustomer } from './payment-provider-customer';\n\nexport default interface PaymentProviderCustomerState {\n    data: PaymentProviderCustomer;\n}\n\nexport const DEFAULT_STATE = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerType,\n    UpdatePaymentProviderCustomerAction,\n} from './payment-provider-customer-actions';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\ntype ReducerActionType = UpdatePaymentProviderCustomerAction;\n\nexport default function paymentProviderCustomerReducer(\n    state: PaymentProviderCustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): PaymentProviderCustomerState {\n    const reducer = combineReducers<PaymentProviderCustomerState, ReducerActionType>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentProviderCustomer = DEFAULT_STATE.data,\n    action: ReducerActionType,\n): PaymentProviderCustomer {\n    switch (action.type) {\n        case PaymentProviderCustomerType.UpdatePaymentProviderCustomer:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    braintreeach: {\n        provider: 'braintree',\n        method: 'ach',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.credit_card': {\n        provider: 'bluesnapdirect',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.ecp': {\n        provider: 'bluesnapdirect',\n        method: 'ecp',\n    },\n    'bluesnapdirect.sepa_direct_debit': {\n        provider: 'bluesnapdirect',\n        method: 'sepa_direct_debit',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n    squarev2: {\n        provider: 'squarev2',\n        method: 'credit_card',\n    },\n    paypalcommercecreditcards: {\n        provider: 'paypalcommerce',\n        method: 'credit_card',\n    },\n    paypalcommerce: {\n        provider: 'paypalcommerce',\n        method: 'paypal',\n    },\n    tdonlinemart: {\n        provider: 'tdonlinemart',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createExtensionSelectorFactory } from '../extension';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createPaymentProviderCustomerSelectorFactory } from '../payment-provider-customer';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createPaymentProviderCustomerSelector = createPaymentProviderCustomerSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n    const createExtensionSelector = createExtensionSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const extensions = createExtensionSelector(state.extensions);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentProviderCustomer = createPaymentProviderCustomerSelector(\n            state.paymentProviderCustomer,\n        );\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            extensions,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentProviderCustomer,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\nexport default interface PaymentProviderCustomerSelector {\n    getPaymentProviderCustomer(): PaymentProviderCustomer | undefined;\n    getPaymentProviderCustomerOrThrow(): PaymentProviderCustomer;\n}\n\nexport type PaymentProviderCustomerSelectorFactory = (\n    state: PaymentProviderCustomerState,\n) => PaymentProviderCustomerSelector;\n\nexport function createPaymentProviderCustomerSelectorFactory(): PaymentProviderCustomerSelectorFactory {\n    const getPaymentProviderCustomer = createSelector(\n        (state: PaymentProviderCustomerState) => state.data,\n        (data) => () => data,\n    );\n\n    const getPaymentProviderCustomerOrThrow = createSelector(\n        getPaymentProviderCustomer,\n        (getPaymentProviderCustomer) => () => {\n            return guard(\n                getPaymentProviderCustomer(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentProviderCustomer),\n            );\n        },\n    );\n\n    return memoizeOne(\n        (state: PaymentProviderCustomerState = DEFAULT_STATE): PaymentProviderCustomerSelector => {\n            return {\n                getPaymentProviderCustomer: getPaymentProviderCustomer(state),\n                getPaymentProviderCustomerOrThrow: getPaymentProviderCustomerOrThrow(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\n            if (!initializeMethodId || !initializeErrors) {\n                return;\n            }\n\n            if (methodId) {\n                return initializeErrors[methodId];\n            }\n\n            return initializeErrors[initializeMethodId];\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\ninterface InitiaizedQuery {\n    methodId: string;\n    gatewayId?: string;\n}\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(query: InitiaizedQuery): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (key?: string) => {\n            if (key && initializeMethodId !== key) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (query: InitiaizedQuery) => {\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\n\n            return !!(data[key] && data[key].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { Extension, ExtensionRegion } from './extension';\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\n\nexport interface ExtensionSelector {\n    getExtensions(): Extension[] | undefined;\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\n\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\n    const getExtensions = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => () => data,\n    );\n\n    const getExtensionByRegion = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\n    );\n\n    const getLoadError = createSelector(\n        (state: ExtensionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ExtensionState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\n        return {\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { extensionReducer } from '../extension';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { paymentProviderCustomerReducer } from '../payment-provider-customer';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        extensions: extensionReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        paymentProviderCustomer: paymentProviderCustomerReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { createDataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState, ConfigWindow } from '../config';\nimport {\n    CouponActionCreator,\n    CouponRequestSender,\n    GiftCertificateActionCreator,\n    GiftCertificateRequestSender,\n} from '../coupon';\nimport {\n    createCustomerStrategyRegistry,\n    createCustomerStrategyRegistryV2,\n    CustomerActionCreator,\n    CustomerRequestSender,\n    CustomerStrategyActionCreator,\n} from '../customer';\nimport {\n    createExtensionEventBroadcaster,\n    ExtensionActionCreator,\n    ExtensionMessenger,\n    ExtensionRequestSender,\n} from '../extension';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport * as defaultPaymentStrategyFactories from '../generated/payment-strategies';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    createPaymentStrategyRegistry,\n    createPaymentStrategyRegistryV2,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentStrategyActionCreator,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    createShippingStrategyRegistry,\n    PickupOptionActionCreator,\n    PickupOptionRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n    ShippingStrategyActionCreator,\n} from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestSender } from '../signin-email';\nimport {\n    createSpamProtection,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport { createCheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn(\n            'The BigCommerce Checkout SDK should not be used on a non-HTTPS page',\n        );\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn(\n            'Note that the development build is not optimized. To create a production build, set process\\u200b.env.NODE_ENV to `production`.',\n        );\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n            host: options?.host,\n            locale: options?.locale,\n            variantIdentificationToken: (window as ConfigWindow).checkoutVariantIdentificationToken,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n    );\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(\n        new SubscriptionsRequestSender(requestSender),\n    );\n    const formFieldsActionCreator = new FormFieldsActionCreator(\n        new FormFieldsRequestSender(requestSender),\n    );\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        configActionCreator,\n        formFieldsActionCreator,\n    );\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createPaymentStrategyRegistryV2(\n        paymentIntegrationService,\n        defaultPaymentStrategyFactories,\n        { useFallback: true },\n    );\n    const customerRegistryV2 = createCustomerStrategyRegistryV2(paymentIntegrationService);\n    const extensionActionCreator = new ExtensionActionCreator(\n        new ExtensionRequestSender(requestSender),\n    );\n    const extensionMessenger = new ExtensionMessenger(store);\n    const storeProjection = createDataStoreProjection(store, createCheckoutSelectorsFactory());\n\n    return new CheckoutService(\n        store,\n        storeProjection,\n        extensionMessenger,\n        createExtensionEventBroadcaster(storeProjection, extensionMessenger),\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            subscriptionsActionCreator,\n        ),\n        checkoutActionCreator,\n        configActionCreator,\n        new CustomerActionCreator(\n            new CustomerRequestSender(requestSender),\n            checkoutActionCreator,\n            spamProtectionActionCreator,\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            checkoutRequestSender,\n        ),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(\n            createCustomerStrategyRegistry(store, requestSender, locale),\n            customerRegistryV2,\n        ),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(\n                store,\n                paymentClient,\n                requestSender,\n                spamProtection,\n                locale,\n            ),\n            registryV2,\n            orderActionCreator,\n            spamProtectionActionCreator,\n        ),\n        new PickupOptionActionCreator(new PickupOptionRequestSender(requestSender)),\n        new ShippingCountryActionCreator(\n            new ShippingCountryRequestSender(requestSender, { locale }),\n        ),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        new SignInEmailActionCreator(new SignInEmailRequestSender(requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender)),\n        subscriptionsActionCreator,\n        formFieldsActionCreator,\n        extensionActionCreator,\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { FlashMessage, FlashMessageType, StoreConfig, UserExperienceSettings } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { Extension, ExtensionRegion } from '../extension';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { PaymentProviderCustomer } from '../payment-provider-customer';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, PickupOptionResult, SearchArea, ShippingOption } from '../shipping';\nimport { SignInEmail } from '../signin-email';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the sign-in email.\n     *\n     * @returns The sign-in email object if sent, otherwise undefined\n     */\n    getSignInEmail(): SignInEmail | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the available flash messages.\n     *\n     * Flash messages contain messages set by the server,\n     * e.g: when trying to sign in using an invalid email link.\n     *\n     * @param type - The type of flash messages to be returned. Optional\n     * @returns The flash messages if available, otherwise undefined.\n     */\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented in order to create a customer.\n     *\n     * @returns The set of customer account form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getCustomerAccountFields(): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a list of pickup options for specified parameters.\n     *\n     * @param consignmentId - Id of consignment.\n     * @param searchArea - An object containing of radius and co-ordinates.\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n\n    /**\n     * Gets user experience settings.\n     *\n     * @returns The object of user experience settings if it is loaded, otherwise undefined.\n     */\n    getUserExperienceSettings(): UserExperienceSettings | undefined;\n\n    /**\n     * Gets a list of extensions available for checkout.\n     *\n     * @alpha\n     * @returns The list of extensions if it is loaded, otherwise undefined.\n     */\n    getExtensions(): Extension[] | undefined;\n\n    /**\n     * Gets payment provider customers data.\n     *\n     * @alpha\n     * @returns The object with payment provider customer data\n     */\n    getPaymentProviderCustomer(): PaymentProviderCustomer | undefined;\n\n    /**\n     * Gets the extension associated with a given region.\n     *\n     * @alpha\n     * @param region - A checkout extension region.\n     * @returns The extension corresponding to the specified region, otherwise undefined.\n     */\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n}\n\nexport type CheckoutStoreSelectorFactory = (\n    state: InternalCheckoutSelectors,\n) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        (getCheckout) => clone(getCheckout),\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        (getOrder) => clone(getOrder),\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        (getStoreConfig) => clone(getStoreConfig),\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) =>\n            clone(() => {\n                const shippingAddress = getShippingAddress();\n                const context = getContextConfig();\n\n                if (!shippingAddress) {\n                    if (!context || !context.geoCountryCode) {\n                        return;\n                    }\n\n                    return {\n                        firstName: '',\n                        lastName: '',\n                        company: '',\n                        address1: '',\n                        address2: '',\n                        city: '',\n                        stateOrProvince: '',\n                        stateOrProvinceCode: '',\n                        postalCode: '',\n                        country: '',\n                        phone: '',\n                        customFields: [],\n                        countryCode: context.geoCountryCode,\n                    };\n                }\n\n                return shippingAddress;\n            }),\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        (getConsignments) =>\n            clone(() => {\n                const consignments = getConsignments();\n\n                const shippingConsignment = consignments?.find(\n                    (consignment) => !consignment.selectedPickupOption,\n                );\n\n                return shippingConsignment?.availableShippingOptions;\n            }),\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        (getConsignments) => clone(getConsignments),\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        (getConsignments) =>\n            clone(() => {\n                const consignments = getConsignments();\n                const shippingConsignment = consignments?.find(\n                    (consignment) => !consignment.selectedPickupOption,\n                );\n\n                return shippingConsignment?.selectedShippingOption;\n            }),\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) =>\n            shippingCountries.getShippingCountries,\n        (getShippingCountries) => clone(getShippingCountries),\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) =>\n            clone(() => {\n                const billingAddress = getBillingAddress();\n                const context = getContextConfig();\n                const isEmptyBillingAddress =\n                    !billingAddress ||\n                    values(omit(billingAddress, 'shouldSaveAddress', 'email', 'id')).every(\n                        (val) => !val || !val.length,\n                    );\n\n                if (isEmptyBillingAddress) {\n                    if (!context || !context.geoCountryCode) {\n                        return billingAddress;\n                    }\n\n                    return {\n                        id: billingAddress ? billingAddress.id : '',\n                        firstName: '',\n                        lastName: '',\n                        company: '',\n                        address1: '',\n                        address2: '',\n                        city: '',\n                        email: billingAddress ? billingAddress.email : '',\n                        stateOrProvince: '',\n                        stateOrProvinceCode: '',\n                        postalCode: '',\n                        country: '',\n                        phone: '',\n                        customFields: [],\n                        countryCode: context.geoCountryCode,\n                    };\n                }\n\n                return billingAddress;\n            }),\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getCountries) => clone(getCountries),\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        (getPaymentMethods) => clone(getPaymentMethods),\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentMethod) => clone(getPaymentMethod),\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) =>\n            clone(() => {\n                const payment = getPaymentId();\n\n                return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n            }),\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        (getCart) => clone(getCart),\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        (getCoupons) => clone(getCoupons),\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        (getGiftCertificates) => clone(getGiftCertificates),\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        (getCustomer) => clone(getCustomer),\n    );\n\n    const getSignInEmail = createSelector(\n        ({ signInEmail }: InternalCheckoutSelectors) => signInEmail.getEmail,\n        (getEmail) => clone(getEmail),\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        (isPaymentDataRequired) => clone(isPaymentDataRequired),\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) =>\n            clone((methodId: string, gatewayId?: string) => {\n                return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n            }),\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(\n                paymentMethod: PaymentMethod,\n            ): PaymentInstrument[] | undefined;\n\n            function getInstrumentsSelector(\n                paymentMethod?: PaymentMethod,\n            ): PaymentInstrument[] | undefined {\n                return paymentMethod\n                    ? getInstrumentsByPaymentMethod(paymentMethod)\n                    : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getCustomerAccountFields,\n        (getCustomerAccountFields) => clone(getCustomerAccountFields),\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) =>\n            clone((countryCode: string) => {\n                return getBillingAddressFields(getCountries(), countryCode);\n            }),\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) =>\n            shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) =>\n            clone((countryCode: string) => {\n                return getShippingAddressFields(getShippingCountries(), countryCode);\n            }),\n    );\n\n    const getFlashMessages = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getFlashMessages,\n        (getFlashMessages) => clone(getFlashMessages),\n    );\n\n    const getPickupOptions = createSelector(\n        ({ pickupOptions }: InternalCheckoutSelectors) => pickupOptions.getPickupOptions,\n        (getPickupOptions) => clone(getPickupOptions),\n    );\n\n    const getUserExperienceSettings = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        (getStoreConfig) =>\n            clone(() => {\n                const config = getStoreConfig();\n\n                if (!config) {\n                    return;\n                }\n\n                return config.checkoutSettings.checkoutUserExperienceSettings;\n            }),\n    );\n\n    const getExtensions = createSelector(\n        ({ extensions }: InternalCheckoutSelectors) => extensions.getExtensions,\n        (getExtensions) => clone(getExtensions),\n    );\n\n    const getPaymentProviderCustomer = createSelector(\n        ({ paymentProviderCustomer }: InternalCheckoutSelectors) =>\n            paymentProviderCustomer.getPaymentProviderCustomer,\n        (getPaymentProviderCustomer) => clone(getPaymentProviderCustomer),\n    );\n\n    const getExtensionByRegion = createSelector(\n        ({ extensions }: InternalCheckoutSelectors) => extensions.getExtensionByRegion,\n        (getExtensionByRegion) => clone(getExtensionByRegion),\n    );\n\n    return memoizeOne((state: InternalCheckoutSelectors): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getFlashMessages: getFlashMessages(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getSignInEmail: getSignInEmail(state),\n            getInstruments: getInstruments(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n            getPickupOptions: getPickupOptions(state),\n            getUserExperienceSettings: getUserExperienceSettings(state),\n            getPaymentProviderCustomer: getPaymentProviderCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { CartChangedError, CartConsistencyError } from '../cart/errors';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | CartChangedError | CartConsistencyError | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * The call could fail in scenarios where guest checkout is not allowed, for example, when existing accounts are required to sign-in.\n     *\n     * In the background, this call tries to set the billing address email using the Storefront API. You could access the Storefront API response status code using `getContinueAsGuestError` error selector.\n     *\n     * ```js\n     * console.log(state.errors.getContinueAsGuestError());\n     * console.log(state.errors.getContinueAsGuestError().status);\n     * ```\n     *\n     * For more information about status codes, check [Checkout Storefront API - Add Checkout Billing Address](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-checkout-api/checkout-billing-address/checkoutsbillingaddressbycheckoutidpost).\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update subscriptions.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateSubscriptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to send sign-in email.\n     *\n     * @returns The error object if unable to send email, otherwise undefined.\n     */\n    getSignInEmailError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to create customer account.\n     *\n     * @returns The error object if unable to create account, otherwise undefined.\n     */\n    getCreateCustomerAccountError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to create customer address.\n     *\n     * @returns The error object if unable to create address, otherwise undefined.\n     */\n    getCreateCustomerAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to fetch pickup options.\n     *\n     * @returns The error object if unable to fetch pickup options, otherwise undefined.\n     */\n    getPickupOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to fetch extensions.\n     *\n     * @alpha\n     * @returns The error object if unable to fetch extensions, otherwise undefined.\n     */\n    getLoadExtensionsError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (\n    state: InternalCheckoutSelectors,\n) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        (selector) => () => {\n            for (const key of Object.keys(selector) as Array<\n                keyof Omit<CheckoutStoreErrorSelector, 'getError'>\n            >) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        },\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) =>\n            shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return getSelectOptionError() || getUpdateShippingOptionError(consignmentId);\n        },\n    );\n\n    return memoizeOne((state: InternalCheckoutSelectors): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateSubscriptionsError: state.subscriptions.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n            getSignInEmailError: state.signInEmail.getSendError,\n            getCreateCustomerAccountError: state.customer.getCreateAccountError,\n            getCreateCustomerAddressError: state.customer.getCreateAddressError,\n            getPickupOptionsError: state.pickupOptions.getLoadError,\n            getLoadExtensionsError: state.extensions.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether a wallet button is initialized.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the wallet button method is initialized, otherwise false.\n     */\n    isInitializedCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is executing payment method checkout.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * executing payment method checkout using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for continuing the\n     * current customer.\n     * @returns True if the customer is executing payment method checkout, otherwise false.\n     */\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether a sign-in email is being sent.\n     *\n     * @returns True if sending a sign-in email, otherwise false\n     */\n    isSendingSignInEmail(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout is in a pending state.\n     *\n     * The shipping step is considered to be pending if it is in the process of\n     * initializing, updating address, selecting a shipping option, and/or\n     * interacting with a shipping widget.\n     *\n     * @returns True if the shipping step is pending, otherwise false.\n     */\n    isShippingStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n\n    /**\n     * Checks whether the subscriptions are being updated.\n     *\n     * @returns True if updating subscriptions, otherwise false.\n     */\n    isUpdatingSubscriptions(): boolean;\n\n    /**\n     * Checks whether a customer account is being created\n     *\n     * @returns True if creating, otherwise false.\n     */\n    isCreatingCustomerAccount(): boolean;\n\n    /**\n     * Checks whether a customer address is being created\n     *\n     * @returns True if creating, otherwise false.\n     */\n    isCreatingCustomerAddress(): boolean;\n\n    /**\n     * Checks whether pickup options are loading.\n     *\n     * @returns True if pickup options are loading, otherwise false.\n     */\n    isLoadingPickupOptions(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (\n    state: InternalCheckoutSelectors,\n) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        (selector) => () => {\n            return (\n                Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>\n            ).some((key) => selector[key]());\n        },\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return isSelectingOption() || isUpdatingShippingOption(consignmentId);\n        },\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) =>\n            customerStrategies.isExecutingPaymentMethodCheckout,\n        ({ customerStrategies }: InternalCheckoutSelectors) =>\n            customerStrategies.isWidgetInteracting,\n        (\n                isInitializing,\n                isSigningIn,\n                isSigningOut,\n                isExecutingPaymentMethodCheckout,\n                isWidgetInteracting,\n            ) =>\n            (methodId?: string) => {\n                return (\n                    isInitializing(methodId) ||\n                    isSigningIn(methodId) ||\n                    isSigningOut(methodId) ||\n                    isExecutingPaymentMethodCheckout(methodId) ||\n                    isWidgetInteracting(methodId)\n                );\n            },\n    );\n\n    const isShippingStepPending = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isInitializing,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isUpdatingAddress,\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ shippingStrategies }: InternalCheckoutSelectors) =>\n            shippingStrategies.isWidgetInteracting,\n        (isInitializing, isUpdatingAddress, isSelectingOption, isWidgetInteracting) =>\n            (methodId?: string) => {\n                return (\n                    isInitializing(methodId) ||\n                    isUpdatingAddress(methodId) ||\n                    isSelectingOption(methodId) ||\n                    isWidgetInteracting(methodId)\n                );\n            },\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        },\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return isExecuting(methodId) || isExecutingSpamCheck();\n        },\n    );\n\n    return memoizeOne((state: InternalCheckoutSelectors): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isExecutingPaymentMethodCheckout:\n                state.customerStrategies.isExecutingPaymentMethodCheckout,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isInitializedCustomer: state.customerStrategies.isInitialized,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isUpdatingSubscriptions: state.subscriptions.isUpdating,\n            isCreatingCustomerAccount: state.customer.isCreatingCustomerAccount,\n            isCreatingCustomerAddress: state.customer.isCreatingCustomerAddress,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isSendingSignInEmail: state.signInEmail.isSending,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isShippingStepPending: isShippingStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n            isLoadingPickupOptions: state.pickupOptions.isLoading,\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import {\n    CheckoutSelectors,\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { CheckoutSelectors } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\n\nimport { ExtensionEventBroadcaster } from './extension-event-broadcaster';\nimport { ExtensionEventType } from './extension-events';\nimport { ExtensionMessenger } from './extension-messenger';\nimport { subscribeConsignmentsChange } from './subscribers';\n\nexport function createExtensionEventBroadcaster(\n    store: DataStoreProjection<CheckoutSelectors>,\n    messenger: ExtensionMessenger,\n): ExtensionEventBroadcaster {\n    const subscribers = {\n        [ExtensionEventType.ConsignmentsChanged]: subscribeConsignmentsChange,\n    };\n\n    return new ExtensionEventBroadcaster(store, messenger, subscribers);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    VisaCheckoutScriptLoader,\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n    GooglePayWorldpayAccessInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    createSpamProtection,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\n\nimport createCustomerStrategyRegistryV2 from './create-customer-strategy-registry-v2';\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayV2CustomerStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    locale: string,\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        createSpamProtection(scriptLoader),\n        new SpamProtectionRequestSender(requestSender),\n    );\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        spamProtectionActionCreator,\n    );\n\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const customerRegistryV2 = createCustomerStrategyRegistryV2(paymentIntegrationService);\n\n    registry.register(\n        'amazonpay',\n        () =>\n            new AmazonPayV2CustomerStrategy(\n                store,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        'braintreevisacheckout',\n        () =>\n            new BraintreeVisaCheckoutCustomerStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                new CustomerStrategyActionCreator(registry, customerRegistryV2),\n                remoteCheckoutActionCreator,\n                createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n                new VisaCheckoutScriptLoader(scriptLoader),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'chasepay',\n        () =>\n            new ChasePayCustomerStrategy(\n                store,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                new ChasePayScriptLoader(scriptLoader),\n                requestSender,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'squarev2',\n        () =>\n            new SquareCustomerStrategy(\n                store,\n                new RemoteCheckoutActionCreator(remoteCheckoutRequestSender, checkoutActionCreator),\n            ),\n    );\n\n    registry.register(\n        'masterpass',\n        () =>\n            new MasterpassCustomerStrategy(\n                store,\n                paymentMethodActionCreator,\n                remoteCheckoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        'googlepayauthorizenet',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaybnz',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaycheckoutcom',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaycybersourcev2',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepayorbital',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaystripe',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepaystripeupe',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        'googlepayworldpayaccess',\n        () =>\n            new GooglePayCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayWorldpayAccessInitializer()),\n                formPoster,\n            ),\n    );\n\n    registry.register('default', () => new DefaultCustomerStrategy(store, customerActionCreator));\n\n    return registry;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport {\n    createScriptLoader,\n    getScriptLoader,\n    getStylesheetLoader,\n} from '@bigcommerce/script-loader';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { BrowserStorage } from '../common/storage';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentIntegrationService } from '../payment-integration';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    createSpamProtection,\n    GoogleRecaptcha,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentStrategyRegistryV2 from './create-payment-strategy-registry-v2';\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport StorefrontPaymentRequestSender from './storefront-payment-request-sender';\nimport { AmazonPayV2PaymentStrategy } from './strategies/amazon-pay-v2';\nimport { BarclaysPaymentStrategy } from './strategies/barclays';\nimport { BNZPaymentStrategy } from './strategies/bnz';\nimport {\n    BraintreeCreditCardPaymentStrategy,\n    BraintreeVenmoPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    VisaCheckoutScriptLoader,\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlowV2,\n} from './strategies/cardinal';\nimport { CBAMPGSPaymentStrategy, CBAMPGSScriptLoader } from './strategies/cba-mpgs';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { DigitalRiverPaymentStrategy, DigitalRiverScriptLoader } from './strategies/digitalriver';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCheckoutcomPaymentProcessor,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n    GooglePayWorldpayAccessInitializer,\n} from './strategies/googlepay';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { MonerisPaymentStrategy } from './strategies/moneris';\nimport { OpyPaymentStrategy, OpyScriptLoader } from './strategies/opy';\nimport { PaypalExpressPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport {\n    createStepHandler,\n    createSubStrategyRegistry,\n    PaymentResumer,\n    PPSDKStrategy,\n} from './strategies/ppsdk';\nimport { QuadpayPaymentStrategy } from './strategies/quadpay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { WorldpayaccessPaymetStrategy } from './strategies/worldpayaccess';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string,\n) {\n    const registry = new PaymentStrategyRegistry(store, {\n        defaultToken: PaymentStrategyType.CREDIT_CARD,\n    });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createPaymentStrategyRegistryV2(paymentIntegrationService);\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        new SpamProtectionRequestSender(requestSender),\n    );\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator,\n    );\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator,\n        paymentRequestTransformer,\n        paymentHumanVerificationHandler,\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const formFieldsActionCreator = new FormFieldsActionCreator(\n        new FormFieldsRequestSender(requestSender),\n    );\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        configActionCreator,\n        formFieldsActionCreator,\n    );\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(\n        registry,\n        registryV2,\n        orderActionCreator,\n        spamProtectionActionCreator,\n    );\n    const formPoster = createFormPoster();\n    const stepHandler = createStepHandler(formPoster, paymentHumanVerificationHandler);\n    const hostedFormFactory = new HostedFormFactory(store);\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    registry.register(\n        PaymentStrategyType.AMAZONPAY,\n        () =>\n            new AmazonPayV2PaymentStrategy(\n                store,\n                paymentStrategyActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BARCLAYS,\n        () =>\n            new BarclaysPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlowV2(\n                    store,\n                    paymentActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE,\n        () =>\n            new BraintreeCreditCardPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                braintreePaymentProcessor,\n                new BraintreeIntegrationService(\n                    new BraintreeScriptLoader(getScriptLoader(), window),\n                    window,\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                braintreePaymentProcessor,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BRAINTREE_VISA_CHECKOUT,\n        () =>\n            new BraintreeVisaCheckoutPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n                new VisaCheckoutScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CBA_MPGS,\n        () =>\n            new CBAMPGSPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                paymentMethodActionCreator,\n                new CBAMPGSScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CONVERGE,\n        () =>\n            new ConvergePaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BNZ,\n        () =>\n            new BNZPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new CardinalThreeDSecureFlowV2(\n                    store,\n                    paymentActionCreator,\n                    new CardinalClient(new CardinalScriptLoader(scriptLoader)),\n                ),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CYBERSOURCEV2_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.BNZ_GOOGLEPAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHECKOUTCOM_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n                new GooglePayCheckoutcomPaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.CHASE_PAY,\n        () =>\n            new ChasePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                requestSender,\n                new ChasePayScriptLoader(scriptLoader),\n                new WepayRiskClient(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.DIGITALRIVER,\n        () =>\n            new DigitalRiverPaymentStrategy(\n                store,\n                paymentMethodActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                storeCreditActionCreator,\n                new DigitalRiverScriptLoader(scriptLoader, getStylesheetLoader()),\n                billingAddressActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.MASTERPASS,\n        () =>\n            new MasterpassPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.MONERIS,\n        () =>\n            new MonerisPaymentStrategy(\n                hostedFormFactory,\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                storeCreditActionCreator,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.OPY,\n        () =>\n            new OpyPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentMethodActionCreator,\n                storefrontPaymentRequestSender,\n                paymentActionCreator,\n                new OpyScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.ORBITAL_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_EXPRESS,\n        () =>\n            new PaypalExpressPaymentStrategy(\n                store,\n                orderActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PAYPAL_EXPRESS_CREDIT,\n        () =>\n            new PaypalExpressPaymentStrategy(\n                store,\n                orderActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.PPSDK,\n        () =>\n            new PPSDKStrategy(\n                store,\n                orderActionCreator,\n                createSubStrategyRegistry(\n                    store,\n                    orderActionCreator,\n                    requestSender,\n                    stepHandler,\n                    hostedFormFactory,\n                ),\n                new PaymentResumer(requestSender, stepHandler),\n                new BrowserStorage('PPSDK'),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.QUADPAY,\n        () =>\n            new QuadpayPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                storeCreditActionCreator,\n                remoteCheckoutActionCreator,\n                storefrontPaymentRequestSender,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.SQUARE,\n        () =>\n            new SquarePaymentStrategy(\n                store,\n                checkoutActionCreator,\n                orderActionCreator,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                requestSender,\n                new SquareScriptLoader(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.STRIPE_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.STRIPE_UPE_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.WE_PAY,\n        () =>\n            new WepayPaymentStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n                new WepayRiskClient(scriptLoader),\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.WORLDPAYACCESS,\n        () =>\n            new WorldpayaccessPaymetStrategy(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                hostedFormFactory,\n            ),\n    );\n\n    registry.register(\n        PaymentStrategyType.WORLDPAYACCESS_GOOGLE_PAY,\n        () =>\n            new GooglePayPaymentStrategy(\n                store,\n                checkoutActionCreator,\n                paymentMethodActionCreator,\n                paymentStrategyActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayWorldpayAccessInitializer()),\n            ),\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BraintreeScriptLoader } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport BraintreeHostedForm from './braintree-hosted-form';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader, window);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const braintreeHostedForm = new BraintreeHostedForm(braintreeSDKCreator);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, braintreeHostedForm);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { PaymentProviderCustomerActionCreator } from '../payment-provider-customer';\nimport { StripeScriptLoader } from '../payment/strategies/stripe-upe';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport ShippingStrategyActionCreator from './shipping-strategy-action-creator';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayV2ShippingStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreeFastlaneShippingStrategy } from './strategies/braintree';\nimport { DefaultShippingStrategy } from './strategies/default';\nimport { PayPalCommerceFastlaneShippingStrategy } from './strategies/paypal-commerce';\nimport { StripeUPEShippingStrategy } from './strategies/stripe-upe';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        consignmentRequestSender,\n        checkoutRequestSender,\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const scriptLoader = getScriptLoader();\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(\n        new SubscriptionsRequestSender(requestSender),\n    );\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        subscriptionsActionCreator,\n    );\n    const braintreeHostWindow: BraintreeHostWindow = window;\n\n    registry.register(\n        'amazonpay',\n        () =>\n            new AmazonPayV2ShippingStrategy(\n                store,\n                consignmentActionCreator,\n                new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n                createAmazonPayV2PaymentProcessor(),\n                new ShippingStrategyActionCreator(registry),\n            ),\n    );\n\n    registry.register(\n        'stripeupe',\n        () =>\n            new StripeUPEShippingStrategy(\n                store,\n                new StripeScriptLoader(scriptLoader),\n                consignmentActionCreator,\n                paymentMethodActionCreator,\n            ),\n    );\n\n    registry.register(\n        'braintreeacceleratedcheckout',\n        () =>\n            new BraintreeFastlaneShippingStrategy(\n                store,\n                billingAddressActionCreator,\n                consignmentActionCreator,\n                paymentMethodActionCreator,\n                new PaymentProviderCustomerActionCreator(),\n                new BraintreeIntegrationService(\n                    new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n                    braintreeHostWindow,\n                ),\n            ),\n    );\n\n    registry.register(\n        'paypalcommerceacceleratedcheckout',\n        () =>\n            new PayPalCommerceFastlaneShippingStrategy(\n                store,\n                billingAddressActionCreator,\n                consignmentActionCreator,\n                paymentMethodActionCreator,\n                new PaymentProviderCustomerActionCreator(),\n                createPayPalCommerceSdk(),\n                createPayPalCommerceFastlaneUtils(),\n            ),\n    );\n\n    registry.register(\n        'default',\n        () => new DefaultShippingStrategy(store, consignmentActionCreator),\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import {\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonParameters,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\n\nimport { BuyNowCartRequestBody } from '../../../cart';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n\nexport interface WithBuyNowFeature extends AmazonPayV2ButtonConfig {\n    /**\n     * The options that are required to initialize Buy Now functionality.\n     */\n    buyNowInitializeOptions?: {\n        getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n    };\n}\n\n/**\n * The required config to render the AmazonPayV2 button.\n */\nexport type AmazonPayV2ButtonInitializeOptions = AmazonPayV2ButtonParameters | WithBuyNowFeature;\n","import { StandardError } from '../../../../common/error/errors';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport { getShippableItemsCount } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { isWithBuyNowFeatures, WithBuyNowFeature } from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private _cartRequestSender: CartRequestSender,\n        private _amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay?.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n\n            if (this._buyNowInitializeOptions) {\n                this._amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n            }\n        }\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this._amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this._amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCart() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this._amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCart();\n\n        if (buyNowCart) {\n            const estimatedOrderAmount = {\n                amount: String(buyNowCart.baseAmount),\n                currencyCode: buyNowCart.currency.code,\n            };\n\n            const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n            return {\n                createCheckoutSessionConfig,\n                estimatedOrderAmount,\n                productType:\n                    getShippableItemsCount(buyNowCart) === 0\n                        ? AmazonPayV2PayOptions.PayOnly\n                        : AmazonPayV2PayOptions.PayAndShip,\n            };\n        }\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string | number): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        // Info: does not use getStoreConfigOrThrow, because storeConfig is not available if\n        // cart is empty, so it causes issues on Product Details Page\n        const storeConfig = state.config.getStoreConfig();\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(clientToken, storeConfig);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () =>\n                    this._setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const { checkout } = this._store.getState();\n            const grandTotal = checkout.getCheckoutOrThrow().outstandingBalance;\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: grandTotal,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onClick?(): void;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        // Info: does not use getStoreConfigOrThrow, because storeConfig is not available if\n        // cart is empty, so it causes issues on Product Details Page\n        const storeConfig = state.config.getStoreConfig();\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(clientToken, storeConfig);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeIntegrationService } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } =\n            applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeIntegrationService();\n        }\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.setAttribute('class', buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData() {\n        const data = await this._braintreeIntegrationService.getDataCollector();\n\n        return data.deviceData;\n    }\n\n    private async _initializeBraintreeIntegrationService() {\n        const state = await this._paymentIntegrationService.loadPaymentMethod(\n            ApplePayGatewayType.BRAINTREE,\n        );\n\n        const storeConfig = state.getStoreConfig();\n\n        const braintreePaymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(\n            ApplePayGatewayType.BRAINTREE,\n        );\n\n        if (!braintreePaymentMethod.clientToken || !braintreePaymentMethod.initializationData) {\n            return;\n        }\n\n        this._braintreeIntegrationService.initialize(\n            braintreePaymentMethod.clientToken,\n            storeConfig,\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { DefaultCheckoutButtonHeight } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${DefaultCheckoutButtonHeight}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        // Info: does not use getStoreConfigOrThrow, because storeConfig is not available if\n        // cart is empty, so it causes issues on Product Details Page\n        const storeConfig = state.config.getStoreConfig();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(clientToken, storeConfig);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            (braintreeVenmoCheckout) =>\n                this._handleInitializationVenmoSuccess(\n                    braintreeVenmoCheckout,\n                    containerId,\n                    braintreevenmo?.buyNowInitializeOptions,\n                    styles,\n                ),\n            (error) => this._handleInitializationVenmoError(error, containerId),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        parentContainerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonsStyles?: PaypalStyleOptions,\n    ): void {\n        return this._renderVenmoButton(\n            braintreeVenmoCheckout,\n            parentContainerId,\n            buyNowInitializeOptions,\n            buttonsStyles,\n        );\n    }\n\n    private _handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            return this._onError(error);\n                        }\n\n                        await this._handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const hostWindow = window;\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeIntegrationService(\n            new BraintreeScriptLoader(getScriptLoader(), hostWindow),\n            hostWindow,\n        ),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import { stringifyUrl } from 'query-string';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltButtonStyleOptions,\n    BoltHostWindow,\n    BoltPaymentMethod,\n    StyleButtonShape,\n    StyleButtonSize,\n} from './bolt';\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\n    ): Promise<void> {\n        const { bolt, containerId, methodId } = options;\n        const { buyNowInitializeOptions, style } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bolt) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\n            );\n        }\n\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\n\n        if (!isBuyNowFlow) {\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\n        }\n\n        if (\n            !buyNowInitializeOptions?.storefrontApiToken ||\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            config.testMode,\n            developerConfig,\n            'BigCommerce',\n            buyNowInitializeOptions.storefrontApiToken,\n        );\n\n        this.renderButton(containerId, paymentMethod, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\n            return;\n        }\n\n        this.addButtonContainer(containerId, paymentMethod, style);\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\n    }\n\n    private addButtonContainer(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            return;\n        }\n\n        const boltButtonContainer = document.createElement('div');\n        const boltButtonObject = document.createElement('object');\n\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\n        boltButtonContainer.setAttribute('style', 'display:none');\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\n\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\n\n        boltButtonContainer.append(boltButtonObject);\n        container.innerHTML = '';\n        container.append(boltButtonContainer);\n    }\n\n    private getBoltObjectData(\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): string {\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\n        const buttonHeight = this.getButtonHeight(style?.size);\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\n\n        return stringifyUrl({\n            url: `https://${domainUrl}/v1/checkout_button`,\n            query: {\n                publishable_key: publishableKey,\n                variant: 'ppc',\n                height: buttonHeight,\n                border_radius: buttonBorderRadius,\n            },\n        });\n    }\n\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\n        if (!buttonSize) {\n            return;\n        }\n\n        switch (buttonSize) {\n            case StyleButtonSize.Small:\n                return 25;\n\n            case StyleButtonSize.Large:\n                return 45;\n\n            case StyleButtonSize.Medium:\n            default:\n                return 40;\n        }\n    }\n\n    private getButtonBorderRadius(\n        buttonShape?: StyleButtonShape,\n        buttonHeight?: number,\n    ): number | undefined {\n        if (!buttonShape) {\n            return;\n        }\n\n        switch (buttonShape) {\n            case StyleButtonShape.Pill:\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\n\n            case StyleButtonShape.Rect:\n            default:\n                return 4;\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltButtonStrategy from './bolt-button-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltButtonStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        this.braintreeSdk.initialize(clientToken, storeConfig);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSdk = new BraintreeSdk(new BraintreeScriptLoader(getScriptLoader(), hostWindow));\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { round } from 'lodash';\n\nimport {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    GooglePayBuyNowInitializeOptions,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    IntermediatePaymentData,\n    NewTransactionInfo,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                }: IntermediatePaymentData): Promise<NewTransactionInfo | void> => {\n                    if (callbackTrigger !== CallbackTriggerType.INITIALIZE) {\n                        return;\n                    }\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo();\n                    }\n\n                    return this._getTransactionInfo();\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                return await this._paymentIntegrationService.createBuyNowCart(cartRequestBody);\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _getBuyNowTransactionInfo() {\n        try {\n            this._buyNowCart = await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n\n            if (this._buyNowCart) {\n                const { id, cartAmount } = this._buyNowCart;\n\n                await this._paymentIntegrationService.loadCheckout(id);\n\n                return {\n                    newTransactionInfo: {\n                        ...(this._countryCode && { countryCode: this._countryCode }),\n                        currencyCode: this._getCurrencyCodeOrThrow(),\n                        totalPrice: String(cartAmount),\n                        totalPriceStatus: TotalPriceStatusType.FINAL,\n                    },\n                };\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError(error);\n        }\n    }\n\n    private async _getTransactionInfo() {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(getScriptLoader(), braintreeHostWindow),\n        braintreeHostWindow,\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport PayPalCommerceScriptLoader from './google-pay-paypal-commerce-script-loader';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayStripeGateway from '../../gateways/google-pay-stripe-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingChange: (data: ShippingChangeCallbackPayload) => this.onShippingChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingChange(data: ShippingChangeCallbackPayload): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shipping_address.city,\n            countryCode: data.shipping_address.country_code,\n            postalCode: data.shipping_address.postal_code,\n            stateOrProvinceCode: data.shipping_address.state,\n        });\n\n        try {\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n                data.selected_shipping_option?.id,\n            );\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    MessagingOptions,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        if (currencyCode && messagingContainerId) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingChange: (data: ShippingChangeCallbackPayload) => this.onShippingChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async onShippingChange(data: ShippingChangeCallbackPayload): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shipping_address.city,\n            countryCode: data.shipping_address.country_code,\n            postalCode: data.shipping_address.postal_code,\n            stateOrProvinceCode: data.shipping_address.state,\n        });\n\n        try {\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n                data.selected_shipping_option?.id,\n            );\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n    ): void {\n        if (messagingContainerId && document.getElementById(messagingContainerId)) {\n            const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n            const grandTotal = checkout.outstandingBalance;\n\n            const paypalMessagesOptions: MessagingOptions = {\n                amount: grandTotal,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style } = paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent =\n    | EmbeddedCheckoutCompleteEvent\n    | EmbeddedCheckoutErrorEvent\n    | EmbeddedCheckoutFrameErrorEvent\n    | EmbeddedCheckoutFrameLoadedEvent\n    | EmbeddedCheckoutLoadedEvent\n    | EmbeddedCheckoutSignedOutEvent;\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport { BraintreeScriptLoader } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport { CartRequestSender } from '../cart';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport AmazonPayV2RequestSender from './strategies/amazon-pay-v2/amazon-pay-v2-request-sender';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n    BraintreeVenmoButtonStrategy,\n} from './strategies/braintree';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const braintreeSdkCreator = new BraintreeSDKCreator(\n        new BraintreeScriptLoader(scriptLoader, window),\n    );\n    const cartRequestSender = new CartRequestSender(requestSender);\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\n        () =>\n            new AmazonPayV2ButtonStrategy(\n                store,\n                checkoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n                cartRequestSender,\n                amazonPayV2RequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoButtonStrategy(\n                store,\n                paymentMethodActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError,\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = EmbeddedContentStyleConfiguredEvent;\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { IFrameComponent, IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions,\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.CheckoutComplete,\n                this._options.onComplete,\n            );\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.CheckoutError,\n                this._options.onError,\n            );\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.CheckoutLoaded,\n                this._options.onLoad,\n            );\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.FrameLoaded,\n                this._options.onFrameLoad,\n            );\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(\n                EmbeddedCheckoutEventType.SignedOut,\n                this._options.onSignOut,\n            );\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () =>\n            this._configureStyles(),\n        );\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then((url) => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then((iframe) => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch((error) => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error).catch(() => {\n                    this._messageListener.trigger({\n                        type: EmbeddedCheckoutEventType.FrameError,\n                        payload: error,\n                    });\n\n                    this._loadingIndicator.hide();\n\n                    throw error;\n                });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender\n            .post<{ redirectUrl: string }>(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch((response) => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(\n            this._location.href,\n        )}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry =\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent;\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { IFrameComponent, iframeResizer, isIframeEvent } from '../common/iframe';\nimport { appendWww, parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\n\nexport default class ResizableIframeCreator {\n    constructor(private _options?: { timeout: number }) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer,\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n        iframe.allow = 'payment';\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout).catch((error) => {\n            container.removeChild(iframe);\n\n            throw error;\n        });\n    }\n\n    private _toResizableFrame(\n        iframe: HTMLIFrameElement,\n        timeoutInterval: number,\n    ): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(\n                    new NotEmbeddableError(\n                        'Unable to embed the iframe because the content could not be loaded.',\n                    ),\n                );\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (\n                    event.origin !== parseUrl(iframe.src).origin &&\n                    event.origin !== appendWww(parseUrl(iframe.src)).origin\n                ) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(\n                        new NotEmbeddableError(\n                            event.data.payload.message,\n                            NotEmbeddableErrorType.MissingContent,\n                        ),\n                    );\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer(\n                        {\n                            scrolling: false,\n                            sizeWidth: false,\n                            heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                        },\n                        iframe,\n                    );\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options,\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: unknown): error is CustomError {\n    return typeof error === 'object' && error !== null && 'message' in error && 'type' in error;\n}\n","import { CustomError, isCustomError } from '../../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {},\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(\n            EmbeddedContentEventType.StyleConfigured,\n            ({ payload }) => {\n                handler(payload);\n            },\n        );\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers).forEach((key) => {\n            if (message.type !== key) {\n                return;\n            }\n\n            const handler = this._messageHandlers[key];\n\n            if (handler) {\n                (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n            }\n        });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import {\n    IframeEventListener,\n    IframeEventPoster,\n    setupContentWindowForIframeResizer,\n} from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(\n    options: EmbeddedCheckoutMessengerOptions,\n): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent },\n    );\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"messageformat\");","import { isObject, union } from 'lodash';\nimport MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(config: Partial<LanguageConfig>, private _logger: Logger) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach((key) => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(\n                this._translations[prefixedKey] || '',\n            );\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultLocale: '',\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const fallbackTranslations = this._flattenObject(config.fallbackTranslations || {});\n        const translationKeys = union(\n            Object.keys(fallbackTranslations),\n            Object.keys(defaultTranslations),\n            Object.keys(translations),\n        );\n\n        translationKeys.forEach((key) => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else if (defaultTranslations[key]) {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = config.defaultLocale ?? DEFAULT_LOCALE;\n            } else {\n                output.translations[key] = fallbackTranslations[key];\n                output.locales[key] = config.fallbackLocale ?? DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(\n        object: Translations,\n        result: Translations = {},\n        parentKey = '',\n    ): Translations {\n        try {\n            Object.keys(object).forEach((key) => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return (\n            Object.keys(this._locales)\n                .map((key) => this._locales[key])\n                .filter((code) => code.split('-')[0] === this._locale.split('-')[0]).length > 0\n        );\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(\n    config: Partial<LanguageConfig> = {},\n): LanguageService {\n    return new LanguageService(config, getDefaultLogger());\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { keys } from 'lodash';\n\nimport {\n    AnalyticsExtraItemsManager,\n    AnalyticsTracker,\n    ExtraItemsData,\n} from '@bigcommerce/checkout-sdk/analytics';\n\nimport { DigitalItem, LineItemMap, PhysicalItem } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport {\n    isGoogleAnalyticsAvailable,\n    isPayloadSizeLimitReached,\n    sendGoogleAnalytics,\n} from './analytics-tracker-ga';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean } = {};\n    private _analyticStepOrder: AnalyticStepType[] = ['customer', 'shipping', 'billing', 'payment'];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private analyticsExtraItemsManager: AnalyticsExtraItemsManager,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {},\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some((value) => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(\n                        ', ',\n                    )}.`,\n                );\n            }\n\n            this._analyticStepOrder = checkoutSteps;\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: { lineItems, discountAmount, id },\n        } = checkout;\n\n        const extraItemsData = this.analyticsExtraItemsManager.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track(\n            'Checkout Started',\n            this.getTrackingPayload({\n                revenue: grandTotal,\n                shipping: shippingCostTotal,\n                tax: taxTotal,\n                discount: discountAmount,\n                coupons,\n                lineItems,\n                extraItemsData,\n            }),\n        );\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.analyticsExtraItemsManager.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        const isMissingOrdersExperimentEnabled = this.checkoutService.getState().data.getConfig()\n            ?.checkoutSettings.features['DATA-6891.missing_orders_within_GA'];\n\n        const payload = this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        });\n\n        if (\n            isMissingOrdersExperimentEnabled &&\n            isGoogleAnalyticsAvailable() &&\n            isPayloadSizeLimitReached(payload)\n        ) {\n            sendGoogleAnalytics('transaction', {\n                '&ti': payload.order_id,\n                '&ta': payload.affiliation,\n                '&tr': payload.revenue,\n                '&ts': payload.shipping,\n                '&tt': payload.tax,\n                '&tcc': payload.coupon,\n                '&cu': payload.currency,\n            });\n            payload.products.forEach((product) => {\n                sendGoogleAnalytics('item', {\n                    '&ti': payload.order_id,\n                    '&in': product.name,\n                    '&ic': product.sku,\n                    '&iv': `${product.category}`,\n                    '&ip': product.price,\n                    '&iq': product.quantity,\n                });\n            });\n\n            // TODO: decide how to send large orders to Segment without sending to GA again\n            return this.analyticsExtraItemsManager.clearExtraItemData(cartId);\n        }\n\n        this.analytics.track('Order Completed', payload);\n\n        this.analyticsExtraItemsManager.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shipping_method?: string;\n            payment_method?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shipping_method = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.payment_method = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shipping_method && !payload.payment_method) {\n            payload.shipping_method = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId =\n            stepId === AnalyticStepId.SHIPPING ? `${stepId}-${shippingMethodId}` : stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            order_id: String(orderId),\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map((coupon) => coupon.code.toUpperCase()).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return (\n            Object.prototype.hasOwnProperty.call(this._completedSteps, stepId) ||\n            (stepId === AnalyticStepId.SHIPPING &&\n                Object.prototype.hasOwnProperty.call(\n                    this._completedSteps,\n                    `${stepId}-${shippingMethodId}`,\n                ))\n        );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const {\n            data: { getOrder },\n        } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const {\n            data: { getCheckout },\n        } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const {\n            data: { getConfig },\n        } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const {\n            data: { getConfig },\n        } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return shippingOption && shippingOption.id && shippingOption.description\n            ? shippingOption\n            : null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return paymentMethod && paymentMethod.config ? paymentMethod.config.displayName || '' : '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map((item) => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map((item) => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const transformItem = (item: PhysicalItem | DigitalItem): AnalyticsProduct => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map((option) => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            const variant =\n                Array.isArray(itemAttributes) && itemAttributes.length\n                    ? itemAttributes.join(', ')\n                    : 'single-product-option';\n\n            const brand = itemsData[item.productId] && itemsData[item.productId].brand;\n\n            return {\n                product_id: String(item.productId),\n                sku: item.sku,\n                price: item.salePrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant,\n                ...(brand && { brand }),\n            };\n        };\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map(transformItem);\n\n        return [...customItems, ...physicalAndDigitalItems, ...giftCertificateItems];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import {\n    AnalyticsTrackerWindow,\n    isAnalyticsTrackerWindow,\n} from '@bigcommerce/checkout-sdk/analytics';\n\ninterface AnalyticsTrackerWindowGA extends AnalyticsTrackerWindow {\n    ga(command: string, eventName: string, payload: AnalyticPayload): void;\n}\n\nfunction isAnalyticsTrackerWindowGA(\n    window: Window | AnalyticsTrackerWindowGA,\n): window is AnalyticsTrackerWindowGA {\n    return window && 'ga' in window && typeof window.ga === 'function';\n}\n\nexport function isGoogleAnalyticsAvailable(): boolean {\n    return isAnalyticsTrackerWindow(window) && isAnalyticsTrackerWindowGA(window);\n}\n\nexport function sendGoogleAnalytics(type: string, payload: AnalyticPayload): void {\n    if (isAnalyticsTrackerWindowGA(window)) {\n        window.ga('send', type, {\n            ...payload,\n            nonInteraction: false,\n        });\n    }\n}\n\n/**\n * Max size of the payload for the Google Analytics module\n * if the limit will be succeeded, the GA throwing a silent error,\n * and only in debug mode you can see it\n */\nexport function isPayloadSizeLimitReached(obj: AnalyticPayload): boolean {\n    const ANALYTICS_MAX_URI_LENGTH = 8096;\n\n    return serializeAnalyticsEventPayload(obj).length >= ANALYTICS_MAX_URI_LENGTH;\n}\n\nfunction serializeAnalyticsEventPayload(obj: AnalyticPayload): string {\n    return Object.keys(obj)\n        .reduce((acc: string[], key) => {\n            const type = typeof obj[key];\n\n            if (type === 'string' || type === 'number') {\n                return [...acc, `${key}=${obj[key]}`];\n            }\n\n            if (type === 'object' && obj[key] !== null) {\n                return [...acc, serializeAnalyticsEventPayload(obj[key] as AnalyticPayload)];\n            }\n\n            return acc;\n        }, [])\n        .join('&');\n}\n\ninterface AnalyticPayload {\n    [key: string]: unknown;\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {}\n\n    trackOrderComplete(): void {}\n\n    trackStepViewed(): void {}\n\n    trackStepCompleted(): void {}\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport {\n    AnalyticsExtraItemsManager,\n    isAnalyticsTrackerWindow,\n} from '@bigcommerce/checkout-sdk/analytics';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig,\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            new AnalyticsExtraItemsManager(localStorageFallback),\n            window.analytics,\n            stepTrackerConfig,\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","import { BraintreeFastlaneWindow } from '../braintree';\n\nexport default function isBraintreeFastlaneWindow(\n    window: Window,\n): window is BraintreeFastlaneWindow {\n    return Boolean(window.hasOwnProperty('braintreeFastlane'));\n}\n","import { BraintreeConnectWindow } from '../braintree';\n\nexport default function isBraintreeConnectWindow(window: Window): window is BraintreeConnectWindow {\n    return Boolean(window.hasOwnProperty('braintreeConnect'));\n}\n","import {\n    BraintreeFastlane,\n    BraintreeFastlaneApmSelectedEventOptions,\n    BraintreeFastlaneEmailEnteredEventOptions,\n    BraintreeFastlaneEventCommonOptions,\n    BraintreeFastlaneOrderPlacedEventOptions,\n    isBraintreeConnectWindow,\n    isBraintreeFastlaneWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutService } from '../../checkout';\n\nimport BraintreeAnalyticTrackerService from './braintree-analytic-tracker-service';\n\nexport default class BraintreeAnalyticTracker implements BraintreeAnalyticTrackerService {\n    private _selectedPaymentMethodId = '';\n\n    constructor(private checkoutService: CheckoutService) {}\n\n    customerPaymentMethodExecuted() {\n        if (this._shouldTrackFastlaneEvent()) {\n            this._trackEmailSubmitted();\n        }\n    }\n\n    paymentComplete() {\n        if (this._shouldTrackFastlaneEvent()) {\n            this._trackOrderPlaced(this._selectedPaymentMethodId);\n        }\n    }\n\n    selectedPaymentMethod(methodId: string): void {\n        if (this._shouldTrackFastlaneEvent() && methodId) {\n            this._selectedPaymentMethodId = methodId;\n\n            this._trackApmSelected(methodId, false);\n        }\n    }\n\n    walletButtonClick(methodId: string) {\n        if (this._shouldTrackFastlaneEvent() && methodId) {\n            this._selectedPaymentMethodId = methodId;\n\n            this._trackApmSelected(methodId, true);\n        }\n    }\n\n    private _shouldTrackFastlaneEvent() {\n        const state = this.checkoutService.getState();\n        const paymentMethod =\n            state.data.getPaymentMethod('braintree') ||\n            state.data.getPaymentMethod('braintreeacceleratedcheckout');\n        const isAnalyticEnabled = paymentMethod?.initializationData.isBraintreeAnalyticsV2Enabled;\n        const isFastlaneEnabled = paymentMethod?.initializationData.isFastlaneEnabled;\n\n        const isAvailableAnalyticEventsMethods = isFastlaneEnabled\n            ? isBraintreeFastlaneWindow(window) && window.braintreeFastlane.events\n            : isBraintreeConnectWindow(window) && window.braintreeConnect.events;\n\n        return isAnalyticEnabled && isAvailableAnalyticEventsMethods;\n    }\n\n    private _getBraintreeEventsOrThrow(): BraintreeFastlane['events'] {\n        if (isBraintreeConnectWindow(window)) {\n            return window.braintreeConnect.events;\n        }\n\n        if (isBraintreeFastlaneWindow(window)) {\n            return window.braintreeFastlane.events;\n        }\n\n        throw new PaymentMethodClientUnavailableError();\n    }\n\n    /**\n     *\n     * Braintree Events tracking methods\n     *\n     */\n    private _trackEmailSubmitted(): void {\n        const { emailSubmitted } = this._getBraintreeEventsOrThrow();\n        const eventOptions = this._getEmailSubmittedEventOptions();\n\n        emailSubmitted(eventOptions);\n    }\n\n    private _trackApmSelected(methodId: string, isWalletButton: boolean): void {\n        const { apmSelected } = this._getBraintreeEventsOrThrow();\n        const eventOptions = this._getApmSelectedEventOptions(methodId, isWalletButton);\n\n        apmSelected(eventOptions);\n    }\n\n    private _trackOrderPlaced(methodId: string): void {\n        const { orderPlaced } = this._getBraintreeEventsOrThrow();\n        const eventOptions = this._getOrderPlacedEventOptions(methodId);\n\n        orderPlaced(eventOptions);\n    }\n\n    /**\n     *\n     * Event options methods\n     *\n     */\n    private _getEventCommonOptions(): BraintreeFastlaneEventCommonOptions {\n        const state = this.checkoutService.getState();\n        const cart = state.data.getCart();\n        const storeProfile = state.data.getConfig()?.storeProfile;\n        const isGuestCustomer = state.data.getCustomer()?.isGuest;\n\n        const paymentMethod = state.data.getPaymentMethod('braintreeacceleratedcheckout');\n        const isTestTreatmentGroup =\n            !state.errors.getLoadPaymentMethodError('braintreeacceleratedcheckout') &&\n            paymentMethod?.initializationData.shouldRunAcceleratedCheckout;\n\n        const experiments = [\n            {\n                treatment_group: isTestTreatmentGroup ? 'test' : 'control',\n            },\n        ];\n\n        return {\n            context_type: 'cs_id',\n            context_id: cart?.id || '',\n            page_type: 'checkout_page',\n            page_name: window.document.title,\n            partner_name: 'bigc',\n            user_type: isGuestCustomer ? 'store_guest' : 'store_member',\n            store_id: storeProfile?.storeId || '',\n            merchant_name: storeProfile?.storeName || '',\n            experiment: JSON.stringify(experiments),\n        };\n    }\n\n    private _getEmailSubmittedEventOptions(): BraintreeFastlaneEmailEnteredEventOptions {\n        const state = this.checkoutService.getState().data;\n        const paymentMethods = state.getPaymentMethods() || [];\n        const apmList = paymentMethods.map(({ id }) => id);\n\n        return {\n            ...this._getEventCommonOptions(),\n            user_email_saved: false,\n            apm_shown: apmList.length > 1 ? '1' : '0',\n            apm_list: apmList.join(','),\n        };\n    }\n\n    private _getApmSelectedEventOptions(\n        methodId: string,\n        isWalletButton: boolean,\n    ): BraintreeFastlaneApmSelectedEventOptions {\n        const state = this.checkoutService.getState().data;\n        const paymentMethods = state.getPaymentMethods() || [];\n        const apmList = paymentMethods.map(({ id }) => id);\n\n        return {\n            ...this._getEventCommonOptions(),\n            apm_shown: apmList.length > 1 ? '1' : '0',\n            apm_list: apmList.join(','),\n            apm_selected: methodId,\n            apm_location: isWalletButton ? 'pre-email section' : 'payment section',\n        };\n    }\n\n    private _getOrderPlacedEventOptions(\n        methodId: string,\n    ): BraintreeFastlaneOrderPlacedEventOptions {\n        const state = this.checkoutService.getState().data;\n        const cart = state.getCart();\n\n        return {\n            ...this._getEventCommonOptions(),\n            selected_payment_method: methodId,\n            currency_code: cart?.currency.code || '',\n        };\n    }\n}\n","import { CheckoutService } from '../../checkout';\n\nimport BraintreeAnalyticTracker from './braintree-analytic-tracker';\nimport BraintreeAnalyticTrackerService from './braintree-analytic-tracker-service';\n\n/**\n * Creates an instance of `BraintreeAnalyticTrackerService`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const braintreeAnalyticTracker = createBraintreeAnalyticTracker(checkoutService);\n *\n * braintreeAnalyticTracker.customerPaymentMethodExecuted();\n * braintreeAnalyticTracker.paymentComplete();\n * braintreeAnalyticTracker.selectedPaymentMethod('applepay');\n * braintreeAnalyticTracker.walletButtonClick('paypal');\n * ```\n *\n * @returns an instance of `BraintreeAnalyticTrackerService`.\n */\nexport default function createBraintreeAnalyticTracker(\n    checkoutService: CheckoutService,\n): BraintreeAnalyticTrackerService {\n    return new BraintreeAnalyticTracker(checkoutService);\n}\n","import { PayPalCommerceHostWindow } from '../paypal-commerce-types';\n\nexport default function isPayPalFastlaneWindow(window: Window): window is PayPalCommerceHostWindow {\n    return window.hasOwnProperty('paypalFastlane');\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isPayPalCommerceFastlaneWindow,\n    PayPalFastlaneApmSelectedEventOptions,\n    PayPalFastlaneEmailEnteredEventOptions,\n    PayPalFastlaneEventCommonOptions,\n    PayPalFastlaneEvents,\n    PayPalFastlaneOrderPlacedEventOptions,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport { CheckoutService } from '../../checkout';\n\nimport PayPalCommerceAnalyticTrackerService from './paypal-commerce-analytic-tracker-service';\n\nexport default class PayPalCommerceAnalyticTracker implements PayPalCommerceAnalyticTrackerService {\n    private _selectedPaymentMethodId = '';\n\n    constructor(private _checkoutService: CheckoutService) {}\n\n    customerPaymentMethodExecuted(): void {\n        if (this._shouldTrackFastlaneEvent()) {\n            this._trackEmailSubmitted();\n        }\n    }\n\n    paymentComplete(): void {\n        if (this._shouldTrackFastlaneEvent()) {\n            this._trackOrderPlaced(this._selectedPaymentMethodId);\n        }\n    }\n\n    selectedPaymentMethod(methodId: string): void {\n        if (this._shouldTrackFastlaneEvent() && methodId) {\n            this._selectedPaymentMethodId = methodId;\n\n            this._trackApmSelected(methodId, false);\n        }\n    }\n\n    walletButtonClick(methodId: string): void {\n        if (this._shouldTrackFastlaneEvent() && methodId) {\n            this._selectedPaymentMethodId = methodId;\n\n            this._trackApmSelected(methodId, true);\n        }\n    }\n\n    private _shouldTrackFastlaneEvent(): boolean {\n        const state = this._checkoutService.getState();\n        const paymentMethod = state.data.getPaymentMethod('paypalcommerce');\n        const initializationData = paymentMethod?.initializationData || {};\n        const isAnalyticEnabled = initializationData.isPayPalCommerceAnalyticsV2Enabled;\n\n        const isAvailableAnalyticEventsMethods =\n            isPayPalCommerceFastlaneWindow(window) && window.paypalFastlane?.events;\n\n        return isAnalyticEnabled && isAvailableAnalyticEventsMethods;\n    }\n\n    private _getPayPalEventsOrThrow(): PayPalFastlaneEvents {\n        if (isPayPalCommerceFastlaneWindow(window) && window.paypalFastlane) {\n            return window.paypalFastlane.events;\n        }\n\n        throw new PaymentMethodClientUnavailableError();\n    }\n\n    /**\n     *\n     * Analytic Event track methods\n     *\n     */\n    private _trackEmailSubmitted(): void {\n        const { emailSubmitted } = this._getPayPalEventsOrThrow();\n        const eventOptions = this._getEmailSubmittedEventOptions();\n\n        emailSubmitted(eventOptions);\n    }\n\n    private _trackApmSelected(methodId: string, isWalletButton: boolean): void {\n        const { apmSelected } = this._getPayPalEventsOrThrow();\n        const eventOptions = this._getApmSelectedEventOptions(methodId, isWalletButton);\n\n        apmSelected(eventOptions);\n    }\n\n    private _trackOrderPlaced(methodId: string): void {\n        const { orderPlaced } = this._getPayPalEventsOrThrow();\n        const eventOptions = this._getOrderPlacedEventOptions(methodId);\n\n        orderPlaced(eventOptions);\n    }\n\n    /**\n     *\n     * Event options methods\n     *\n     */\n    private _getEventCommonOptions(): PayPalFastlaneEventCommonOptions {\n        const state = this._checkoutService.getState();\n        const cart = state.data.getCart();\n        const storeProfile = state.data.getConfig()?.storeProfile;\n        const isGuestCustomer = state.data.getCustomer()?.isGuest;\n        const methodId = 'paypalcommerceacceleratedcheckout';\n\n        const paymentMethod = state.data.getPaymentMethod(methodId);\n        const isTestTreatmentGroup =\n            !state.errors.getLoadPaymentMethodError(methodId) &&\n            paymentMethod?.initializationData.shouldRunAcceleratedCheckout;\n\n        const experiments = [\n            {\n                treatment_group: isTestTreatmentGroup ? 'test' : 'control',\n            },\n        ];\n\n        return {\n            context_type: 'cs_id',\n            context_id: cart?.id.replace(/-/g, '') || '',\n            page_type: 'checkout_page',\n            page_name: window.document.title,\n            partner_name: 'bigc',\n            user_type: isGuestCustomer ? 'store_guest' : 'store_member',\n            store_id: storeProfile?.storeId || '',\n            merchant_name: storeProfile?.storeName || '',\n            experiment: JSON.stringify(experiments),\n        };\n    }\n\n    private _getEmailSubmittedEventOptions(): PayPalFastlaneEmailEnteredEventOptions {\n        const state = this._checkoutService.getState().data;\n        const paymentMethods = state.getPaymentMethods() || [];\n        const apmList = paymentMethods.map(({ id }) => id);\n\n        return {\n            ...this._getEventCommonOptions(),\n            user_email_saved: false,\n            apm_shown: apmList.length > 1 ? '1' : '0',\n            apm_list: apmList.join(','),\n        };\n    }\n\n    private _getApmSelectedEventOptions(\n        methodId: string,\n        isWalletButton: boolean,\n    ): PayPalFastlaneApmSelectedEventOptions {\n        const state = this._checkoutService.getState().data;\n        const paymentMethods = state.getPaymentMethods() || [];\n        const apmList = paymentMethods.map(({ id }) => id);\n\n        return {\n            ...this._getEventCommonOptions(),\n            apm_shown: apmList.length > 1 ? '1' : '0',\n            apm_list: apmList.join(','),\n            apm_selected: methodId,\n            apm_location: isWalletButton ? 'pre-email section' : 'payment section',\n        };\n    }\n\n    private _getOrderPlacedEventOptions(methodId: string): PayPalFastlaneOrderPlacedEventOptions {\n        const state = this._checkoutService.getState().data;\n        const cart = state.getCart();\n\n        return {\n            ...this._getEventCommonOptions(),\n            selected_payment_method: methodId,\n            currency_code: cart?.currency.code || '',\n        };\n    }\n}\n","import { CheckoutService } from '../../checkout';\n\nimport PayPalCommerceAnalyticTracker from './paypal-commerce-analytic-tracker';\nimport PayPalCommerceAnalyticTrackerService from './paypal-commerce-analytic-tracker-service';\n\n/**\n * Creates an instance of `PayPalCommerceAnalyticTrackerService`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const paypalCommerceAnalyticTracker = createPayPalCommerceAnalyticTracker(checkoutService);\n *\n * paypalCommerceAnalyticTracker.customerPaymentMethodExecuted();\n * paypalCommerceAnalyticTracker.paymentComplete();\n * paypalCommerceAnalyticTracker.selectedPaymentMethod('applepay');\n * paypalCommerceAnalyticTracker.walletButtonClick('paypal');\n * ```\n *\n * @returns an instance of `PayPalCommerceAnalyticTrackerService`.\n */\nexport default function createPayPalCommerceAnalyticTracker(\n    checkoutService: CheckoutService,\n): PayPalCommerceAnalyticTrackerService {\n    return new PayPalCommerceAnalyticTracker(checkoutService);\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport HostedForm from './hosted-form';\nimport HostedFormFactory from './hosted-form-factory';\nimport HostedFormOptions from './hosted-form-options';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport default class StoredCardHostedFormService {\n    protected _hostedForm?: HostedForm;\n    constructor(protected _host: string, protected _hostedFormFactory: HostedFormFactory) {}\n\n    async submitStoredCard(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<void> {\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await form.validate().then(() => form.submitStoredCard({ fields, data }));\n    }\n\n    initialize(options: HostedFormOptions): Promise<void> {\n        const form = this._hostedFormFactory.create(this._host, options);\n\n        return form.attach().then(() => {\n            this._hostedForm = form;\n        });\n    }\n\n    deinitialize() {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n    }\n}\n","export enum AnalyticStepType {\n    CUSTOMER = 'customer',\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n    PAYMENT = 'payment',\n}\n\nexport const AnalyticStepOrder: AnalyticStepType[] = [\n    AnalyticStepType.CUSTOMER,\n    AnalyticStepType.SHIPPING,\n    AnalyticStepType.BILLING,\n    AnalyticStepType.PAYMENT,\n];\n","import { createCheckoutStore } from '../checkout';\n\nimport HostedFormFactory from './hosted-form-factory';\nimport StoredCardHostedFormService from './stored-card-hosted-form-service';\n\n/**\n * Creates an instance of `StoredCardHostedFormService`.\n *\n *\n * @param host - Host url string parameter.\n * @returns An instance of `StoredCardHostedFormService`.\n */\nexport default function createStoredCardHostedFormService(host: string) {\n    const store = createCheckoutStore();\n\n    return new StoredCardHostedFormService(host, new HostedFormFactory(store));\n}\n","import { flatten } from 'lodash';\n\nimport { LineItem, LineItemMap } from '../cart';\nimport { CheckoutSelectors, CheckoutStoreSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { AnalyticStepOrder, AnalyticStepType } from './analytics-steps';\nimport BodlService from './bodl-service';\nimport {\n    BodlEventsCheckout,\n    BodlEventsPayload,\n    BODLProduct,\n    CommonCheckoutData,\n} from './bodl-window';\n\nexport default class BodlEmitterService implements BodlService {\n    private _checkoutStarted = false;\n    private _emailEntryBegan = false;\n    private _shippingOptionsShown = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private state?: CheckoutStoreSelector;\n\n    constructor(\n        private subscribe: (subscriber: (state: CheckoutSelectors) => void) => void,\n        private bodlEvents: BodlEventsCheckout,\n    ) {\n        this.subscribe((state) => {\n            this.setState(state.data);\n\n            const config = this.state?.getConfig();\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n        });\n    }\n\n    setState(state: CheckoutStoreSelector) {\n        this.state = state;\n    }\n\n    checkoutBegin(): void {\n        const data = this._getCommonCheckoutData();\n\n        if (this._checkoutStarted || !data) {\n            return;\n        }\n\n        this.bodlEvents.emitCheckoutBeginEvent(data);\n\n        this._checkoutStarted = true;\n    }\n\n    orderPurchased(): void {\n        const order = this.state?.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            currency,\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            lineItems,\n            cartId,\n            coupons,\n            channelId,\n            taxTotal,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        this.bodlEvents.emitOrderPurchasedEvent({\n            event_id: cartId,\n            currency: currency.code,\n            order_id: orderId,\n            tax: taxTotal,\n            channel_id: channelId,\n            cart_value: orderAmount,\n            coupon_codes: coupons.map((coupon) => coupon.code.toUpperCase()),\n            shipping_cost: shippingCostTotal,\n            line_items: this._getProducts(lineItems, currency.code),\n        });\n    }\n\n    stepCompleted(currentStep?: AnalyticStepType): void {\n        if (!currentStep) {\n            return;\n        }\n\n        AnalyticStepOrder.some((step: AnalyticStepType) => {\n            if (!this._hasStepCompleted(step)) {\n                this._trackCompletedStep(step);\n            }\n\n            return step === currentStep;\n        });\n    }\n\n    customerEmailEntry(email?: string) {\n        if (this._emailEntryBegan || !email?.length) {\n            return;\n        }\n\n        this._emailEntryBegan = true;\n        this.bodlEvents.emit('bodl_checkout_email_entry_began');\n    }\n\n    customerSuggestionInit(payload?: BodlEventsPayload) {\n        this.bodlEvents.emit('bodl_checkout_customer_suggestion_initialization', payload);\n    }\n\n    customerSuggestionExecute() {\n        this.bodlEvents.emit('bodl_checkout_customer_suggestion_execute');\n    }\n\n    customerPaymentMethodExecuted(payload?: BodlEventsPayload) {\n        this.bodlEvents.emit('bodl_checkout_customer_payment_method_executed', payload);\n    }\n\n    showShippingMethods() {\n        if (this._shippingOptionsShown) {\n            return;\n        }\n\n        this._shippingOptionsShown = true;\n        this.bodlEvents.emit('bodl_checkout_show_shipping_options');\n    }\n\n    selectedPaymentMethod(paymentOption?: string) {\n        const commonData = this._getCommonCheckoutData();\n\n        if (!commonData || !paymentOption) {\n            return;\n        }\n\n        this.bodlEvents.emitPaymentDetailsProvidedEvent({\n            ...commonData,\n            payment_type: paymentOption,\n        });\n    }\n\n    clickPayButton(payload?: BodlEventsPayload) {\n        this.bodlEvents.emit('bodl_checkout_click_pay_button', payload);\n    }\n\n    paymentRejected() {\n        this.bodlEvents.emit('bodl_checkout_payment_rejected');\n    }\n\n    paymentComplete() {\n        this.bodlEvents.emit('bodl_checkout_payment_complete');\n    }\n\n    exitCheckout() {\n        this.bodlEvents.emit('bodl_checkout_exit');\n    }\n\n    private _trackCompletedStep(step: AnalyticStepType) {\n        this._completedSteps[step] = true;\n\n        const bodlEventsMap: { [key in AnalyticStepType]?: () => void } = {\n            [AnalyticStepType.SHIPPING]: this._trackShippingStepCompleted.bind(this),\n        };\n        const emit = bodlEventsMap[step];\n\n        if (emit) {\n            emit();\n        } else {\n            this.bodlEvents.emit('bodl_checkout_step_completed', { step });\n        }\n    }\n\n    private _trackShippingStepCompleted(): void {\n        const shippingMethod = this.state?.getSelectedShippingOption()?.description;\n        const commonData = this._getCommonCheckoutData();\n\n        if (!commonData || !shippingMethod) {\n            return;\n        }\n\n        this.bodlEvents.emitShippingDetailsProvidedEvent({\n            ...commonData,\n            shipping_method: shippingMethod,\n        });\n    }\n\n    private _getCommonCheckoutData(): CommonCheckoutData | null {\n        const checkout = this.state?.getCheckout();\n\n        if (!checkout) {\n            return null;\n        }\n\n        const {\n            cart: { cartAmount, currency, lineItems, id, coupons },\n            channelId,\n        } = checkout;\n\n        return {\n            event_id: id,\n            currency: currency.code,\n            cart_value: cartAmount,\n            coupon_codes: coupons.map((coupon) => coupon.code.toUpperCase()),\n            line_items: this._getProducts(lineItems, currency.code),\n            channel_id: channelId,\n        };\n    }\n\n    private _getProducts(lineItems: LineItemMap, currencyCode: string): BODLProduct[] {\n        const customItems: BODLProduct[] = (lineItems.customItems || []).map((item) => ({\n            product_id: item.id,\n            sku: item.sku,\n            base_price: item.listPrice,\n            sale_price: item.listPrice,\n            purchase_price: item.listPrice,\n            quantity: item.quantity,\n            product_name: item.name,\n            currency: currencyCode,\n        }));\n\n        const giftCertificateItems: BODLProduct[] = lineItems.giftCertificates.map((item) => {\n            return {\n                product_id: item.id,\n                gift_certificate_id: item.id,\n                base_price: item.amount,\n                sale_price: item.amount,\n                purchase_price: item.amount,\n                product_name: item.name,\n                gift_certificate_name: item.name,\n                gift_certificate_theme: item.theme,\n                quantity: 1,\n                currency: currencyCode,\n            };\n        });\n\n        const physicalAndDigitalItems: BODLProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map((item) => {\n            const getCategoryNames = (lineItem: LineItem): string[] => {\n                if (Array.isArray(lineItem.categoryNames)) {\n                    return lineItem.categoryNames;\n                } else if (Array.isArray(lineItem.categories)) {\n                    return flatten(lineItem.categories).map(({ name }) => name);\n                }\n\n                return [];\n            };\n\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map((option) => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                quantity: item.quantity,\n                product_name: item.name,\n                base_price: item.listPrice,\n                sale_price: item.salePrice,\n                purchase_price: item.salePrice > 0 ? item.salePrice : item.listPrice,\n                sku: item.sku,\n                variant_id: item.variantId,\n                discount: item.discountAmount,\n                brand_name: item.brand,\n                currency: currencyCode,\n                category_names: getCategoryNames(item),\n                retail_price: item.retailPrice,\n            };\n        });\n\n        return [...customItems, ...physicalAndDigitalItems, ...giftCertificateItems].map(\n            (item) => ({\n                ...item,\n                product_id: String(item.product_id),\n            }),\n        );\n    }\n\n    private _hasStepCompleted(step: AnalyticStepType): boolean {\n        return this._completedSteps[step];\n    }\n}\n","import BodlService from './bodl-service';\n\nexport default class NoopBodlService implements BodlService {\n    checkoutBegin(): void {}\n\n    orderPurchased(): void {}\n\n    stepCompleted(): void {}\n\n    customerEmailEntry(): void {}\n\n    customerSuggestionInit(): void {}\n\n    customerSuggestionExecute(): void {}\n\n    customerPaymentMethodExecuted(): void {}\n\n    showShippingMethods(): void {}\n\n    selectedPaymentMethod(): void {}\n\n    clickPayButton(): void {}\n\n    paymentRejected(): void {}\n\n    paymentComplete(): void {}\n\n    exitCheckout(): void {}\n}\n","import { CheckoutSelectors } from '../checkout';\n\nimport BodlEmitterService from './bodl-emitter-service';\nimport BodlService from './bodl-service';\nimport { isBodlEnabled } from './is-bodl-enabled';\nimport NoopBodlService from './noop-bodl-service';\n\n/**\n * Creates an instance of `BodlService`.\n *\n * @remarks\n *\n * ```js\n * const bodlService = BodlService();\n * bodlService.checkoutBegin();\n *\n * ```\n *\n * @param subscribe - The callback function, what get a subscriber as a property, that subscribes to state changes.\n * @returns an instance of `BodlService`.\n */\nexport default function createBodlService(\n    subscribe: (subscriber: (state: CheckoutSelectors) => void) => void,\n): BodlService {\n    if (isBodlEnabled(window)) {\n        return new BodlEmitterService(subscribe, window.bodlEvents.checkout);\n    }\n\n    return new NoopBodlService();\n}\n","import BodlEventsWindow from './bodl-window';\n\nexport function isBodlEnabled(window: Window): window is BodlEventsWindow {\n    return 'bodlEvents' in window;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar queryString = tslib_1.__importStar(require(\"query-string\"));\nvar DefaultCache = (function () {\n    function DefaultCache() {\n        this._cache = {};\n    }\n    DefaultCache.prototype.read = function (url, options) {\n        var cacheKey = this.getKey(url, options.params);\n        return this._cache[cacheKey] || null;\n    };\n    DefaultCache.prototype.write = function (url, options, response) {\n        var cacheKey = this.getKey(url, options.params);\n        this._cache[cacheKey] = response;\n    };\n    DefaultCache.prototype.getKey = function (url, params) {\n        if (params === void 0) { params = {}; }\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        return url + \"?\" + queryString.stringify(params);\n    };\n    return DefaultCache;\n}());\nexports.DefaultCache = DefaultCache;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar cookie = tslib_1.__importStar(require(\"js-cookie\"));\nvar payload_transformer_1 = tslib_1.__importDefault(require(\"./payload-transformer\"));\nvar request_factory_1 = tslib_1.__importDefault(require(\"./request-factory\"));\nvar request_sender_1 = tslib_1.__importDefault(require(\"./request-sender\"));\nfunction createRequestSender(options) {\n    return new request_sender_1.default(new request_factory_1.default(), new payload_transformer_1.default(), cookie, options);\n}\nexports.default = createRequestSender;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar timeout_1 = tslib_1.__importDefault(require(\"./timeout\"));\nfunction createTimeout(delay) {\n    return new timeout_1.default(delay);\n}\nexports.default = createTimeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar create_request_sender_1 = require(\"./create-request-sender\");\nexports.createRequestSender = create_request_sender_1.default;\nvar create_timeout_1 = require(\"./create-timeout\");\nexports.createTimeout = create_timeout_1.default;\nvar request_sender_1 = require(\"./request-sender\");\nexports.RequestSender = request_sender_1.default;\nvar timeout_1 = require(\"./timeout\");\nexports.Timeout = timeout_1.default;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isPromise(promise) {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\nexports.default = isPromise;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar to_form_url_encoded_1 = tslib_1.__importDefault(require(\"./to-form-url-encoded\"));\nvar JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nvar FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\nvar PayloadTransformer = (function () {\n    function PayloadTransformer() {\n    }\n    PayloadTransformer.prototype.toRequestBody = function (options) {\n        var contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return to_form_url_encoded_1.default(options.body);\n            }\n        }\n        return options.body;\n    };\n    PayloadTransformer.prototype.toResponse = function (xhr) {\n        var headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n        var body = this._parseResponseBody('response' in xhr ? xhr.response : xhr.responseText, headers);\n        return {\n            body: body,\n            headers: headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    };\n    PayloadTransformer.prototype._parseResponseBody = function (body, headers) {\n        var contentType = this._getHeader(headers, 'Content-Type');\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n        return body;\n    };\n    PayloadTransformer.prototype._parseResponseHeaders = function (rawHeaders) {\n        var lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n        return lines.reduce(function (headers, line) {\n            var _a;\n            var parts = line.split(':');\n            var key = (parts.shift() || '').trim();\n            if (!key) {\n                return headers;\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, headers), (_a = {}, _a[key.toLowerCase()] = parts.join(':').trim(), _a));\n        }, {});\n    };\n    PayloadTransformer.prototype._getHeader = function (headers, key) {\n        if (!headers || !key) {\n            return '';\n        }\n        return headers[key] || headers[key.toLowerCase()] || '';\n    };\n    return PayloadTransformer;\n}());\nexports.default = PayloadTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar queryString = tslib_1.__importStar(require(\"query-string\"));\nvar RequestFactory = (function () {\n    function RequestFactory() {\n    }\n    RequestFactory.prototype.createRequest = function (url, options) {\n        var xhr = new XMLHttpRequest();\n        this._configureRequest(xhr, url, options);\n        return xhr;\n    };\n    RequestFactory.prototype._configureRequest = function (xhr, url, options) {\n        if (options === void 0) { options = {}; }\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params, options.encodeParams), true);\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    };\n    RequestFactory.prototype._configureRequestHeaders = function (xhr, headers) {\n        Object.keys(headers)\n            .filter(function (key) { return headers[key] !== null; })\n            .forEach(function (key) {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    };\n    RequestFactory.prototype._formatUrl = function (url, params, encodeParams) {\n        if (encodeParams === void 0) { encodeParams = true; }\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n        return url + \"?\" + queryString.stringify(params, { encode: encodeParams });\n    };\n    return RequestFactory;\n}());\nexports.default = RequestFactory;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lodash_merge_1 = tslib_1.__importDefault(require(\"lodash.merge\"));\nvar cache_1 = require(\"./cache\");\nvar is_promise_1 = tslib_1.__importDefault(require(\"./is-promise\"));\nvar timeout_1 = tslib_1.__importDefault(require(\"./timeout\"));\nvar RequestSender = (function () {\n    function RequestSender(_requestFactory, _payloadTransformer, _cookie, _options) {\n        if (_options === void 0) { _options = {}; }\n        this._requestFactory = _requestFactory;\n        this._payloadTransformer = _payloadTransformer;\n        this._cookie = _cookie;\n        this._options = _options;\n        this._cache = this._options.cache || new cache_1.DefaultCache();\n    }\n    RequestSender.prototype.sendRequest = function (url, options) {\n        var _this = this;\n        var requestOptions = this._mergeDefaultOptions(url, options);\n        var cachedRequest = this._getCachedRequest(url, requestOptions);\n        if (cachedRequest) {\n            return Promise.resolve(cachedRequest);\n        }\n        var request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n        return new Promise(function (resolve, reject) {\n            var requestHandler = function () {\n                var response = _this._payloadTransformer.toResponse(request);\n                if (response.status >= 200 && response.status < 300) {\n                    _this._cacheRequest(url, requestOptions, response);\n                    resolve(response);\n                }\n                else {\n                    reject(response);\n                }\n            };\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n            if (requestOptions.timeout instanceof timeout_1.default) {\n                requestOptions.timeout.onComplete(function () { return request.abort(); });\n                requestOptions.timeout.start();\n            }\n            if (is_promise_1.default(requestOptions.timeout)) {\n                requestOptions.timeout.then(function () { return request.abort(); });\n            }\n            request.send(_this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    };\n    RequestSender.prototype.get = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'GET' }));\n    };\n    RequestSender.prototype.post = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'POST' }));\n    };\n    RequestSender.prototype.put = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'PUT' }));\n    };\n    RequestSender.prototype.patch = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'PATCH' }));\n    };\n    RequestSender.prototype.delete = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'DELETE' }));\n    };\n    RequestSender.prototype._mergeDefaultOptions = function (url, options) {\n        var defaultOptions = {\n            credentials: true,\n            encodeParams: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n        var csrfToken = this._cookie.get('XSRF-TOKEN');\n        if (csrfToken && defaultOptions.headers && !this._isAssetRequest(url, options) && this._isLocalRequest(url)) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n        return lodash_merge_1.default({}, defaultOptions, options);\n    };\n    RequestSender.prototype._prependHost = function (url) {\n        if (!this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n        return this._options.host.replace(/\\/$/, '') + \"/\" + url.replace(/^\\//, '');\n    };\n    RequestSender.prototype._shouldCacheRequest = function (options) {\n        var method = options.method || 'GET';\n        return method.toUpperCase() === 'GET' && Boolean(options.cache);\n    };\n    RequestSender.prototype._getCachedRequest = function (url, options) {\n        if (this._shouldCacheRequest(options)) {\n            return this._cache.read(url, options);\n        }\n        return null;\n    };\n    RequestSender.prototype._cacheRequest = function (url, options, response) {\n        if (this._shouldCacheRequest(options)) {\n            this._cache.write(url, options, response);\n        }\n    };\n    RequestSender.prototype._isAssetRequest = function (url, options) {\n        if (options && options.method && options.method.toUpperCase() !== 'GET') {\n            return false;\n        }\n        return /\\.(png|gif|jpe?g|css|js|json|svg|html?)$/.test(url.split('?')[0]);\n    };\n    RequestSender.prototype._isLocalRequest = function (url) {\n        if (url.match(new RegExp('^(https?:)?\\/\\/' + window.location.hostname))) {\n            return true;\n        }\n        return !url.match(new RegExp('^(https?:)?\\/\\/'));\n    };\n    return RequestSender;\n}());\nexports.default = RequestSender;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Timeout = (function () {\n    function Timeout(_delay) {\n        var _this = this;\n        this._delay = _delay;\n        this._resolve = function () { };\n        this._promise = new Promise(function (resolve) {\n            _this._resolve = resolve;\n        });\n    }\n    Timeout.prototype.onComplete = function (callback) {\n        this._promise.then(callback);\n    };\n    Timeout.prototype.complete = function () {\n        this._resolve();\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    };\n    Timeout.prototype.start = function () {\n        var _this = this;\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(function () { return _this.complete(); }, this._delay);\n        }\n    };\n    return Timeout;\n}());\nexports.default = Timeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction toFormUrlEncoded(data) {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n    return Object.keys(data)\n        .filter(function (key) { return data[key] !== undefined; })\n        .map(function (key) {\n        var value = data[key];\n        if (typeof value === 'string') {\n            return key + \"=\" + encodeURIComponent(value);\n        }\n        return key + \"=\" + encodeURIComponent(JSON.stringify(value) || '');\n    })\n        .join('&');\n}\nexports.default = toFormUrlEncoded;\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { curryRight, flowRight } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...args: any[]\n): Reducer<TState, TAction> {\n    let reducers: Array<Reducer<TState, TAction>> = args;\n    let options: ComposeReducersOptions = {};\n\n    if (typeof args[args.length - 1] === 'object') {\n        reducers = args.slice(0, -1);\n        options = { ...options, ...args[args.length - 1] };\n    }\n\n    const { equalityCheck = shallowEqual } = options;\n\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return equalityCheck(state, newState) ? state : newState;\n    };\n}\n\nexport interface ComposeReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { omitBy } from 'lodash';\n\nimport Action from './action';\n\nexport default function createAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    if (typeof type !== 'string' || type === '') {\n        throw new Error('`type` must be a string');\n    }\n\n    return { type, ...omitBy({ payload, meta }, value => value === undefined) };\n}\n","import Action from './action';\nimport combineReducers, { ReducerMap } from './combine-reducers';\nimport DataStore, { DataStoreOptions } from './data-store';\nimport Reducer from './reducer';\n\nexport default function createDataStore<TState, TAction extends Action = Action, TTransformedState = TState>(\n    reducer: Reducer<TState, TAction> | ReducerMap<TState, TAction>,\n    initialState?: Partial<TState>,\n    options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n): DataStore<TState, TAction, TTransformedState> {\n    if (typeof reducer === 'function') {\n        return new DataStore(reducer, initialState, options);\n    }\n\n    return new DataStore(\n        combineReducers(reducer, { equalityCheck: options && options.equalityCheck }),\n        initialState,\n        options\n    );\n}\n","import Action from './action';\nimport createAction from './create-action';\n\nexport default function createErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    return {\n        ...createAction(type, payload, meta),\n        error: true,\n    };\n}\n","import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n","import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n","export { default as Action } from './action';\nexport { default as DataStore, DataStoreOptions } from './data-store';\nexport { default as DispatchableDataStore, DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nexport {\n    default as ReadableDataStore,\n    Filter,\n    Subscriber,\n    SubscribeOptions,\n    Unsubscriber,\n} from './readable-data-store';\nexport { default as Reducer } from './reducer';\nexport { default as ThunkAction } from './thunk-action';\n\nexport { default as combineReducers, ReducerMap } from './combine-reducers';\nexport { default as composeReducers } from './compose-reducers';\nexport { default as createAction } from './create-action';\nexport { default as createDataStore } from './create-data-store';\nexport { default as createErrorAction } from './create-error-action';\nexport { default as deepFreeze } from './deep-freeze';\n","import { Subscribable, SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport { DispatchableAction } from './dispatchable-data-store';\n\nexport default function isObservableActionLike<TAction extends Action = Action>(\n    action: DispatchableAction<TAction>\n): action is SubscribableOrPromise<TAction> {\n    return (\n        typeof (action as Subscribable<TAction>).subscribe === 'function' ||\n        typeof (action as PromiseLike<TAction>).then === 'function'\n    );\n}\n","import { Subscribable } from 'rxjs';\n\nimport Action from './action';\n\nexport default function noopActionTransformer<TAction extends Action, TTransformedAction extends Action = TAction>(\n    action: Subscribable<TAction>\n): Subscribable<TTransformedAction> {\n    return action as any as Subscribable<TTransformedAction>;\n}\n","export default function noopStateTransformer<TState, TTransformedState = TState>(\n    state: TState\n): TTransformedState {\n    return state as any as TTransformedState;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import FormBuilder from './form-builder';\nimport FormPoster from './form-poster';\nimport FormPosterOptions from './form-poster-options';\n\nexport default function createFormPoster(options?: FormPosterOptions): FormPoster {\n    const formBuilder = new FormBuilder();\n    const formPoster = new FormPoster(formBuilder, options);\n\n    return formPoster;\n}\n","export default class FormBuilder {\n    build(url: string, data: { [key: string]: any }, target?: string): HTMLFormElement {\n        const form = document.createElement('form');\n\n        form.style.display = 'none';\n\n        form.setAttribute('action', url);\n        form.setAttribute('method', 'POST');\n        form.setAttribute('target', target || '_top');\n\n        Object.keys(data)\n            .forEach(key => {\n                const value = data[key];\n\n                form.appendChild(this._createInput(value, key));\n            });\n\n        return form;\n    }\n\n    private _createInput(value: any, key: string): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.setAttribute('name', key);\n        input.setAttribute('type', 'hidden');\n        input.setAttribute('value', value);\n\n        return input;\n    }\n}\n","import FormBuilder from './form-builder';\nimport FormPosterOptions from './form-poster-options';\nimport { isAbsoluteUrl, joinPaths } from './url-utils';\n\nexport default class FormPoster {\n    /**\n     * @internal\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _options?: FormPosterOptions\n    ) {}\n\n    postForm(url: string, data: { [key: string]: any }, callback?: () => void, target?: string): void {\n        const form = this._formBuilder.build(this._prependHost(url), data, target);\n\n        window.addEventListener('unload', function handleUnload() {\n            window.removeEventListener('unload', handleUnload);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n        // In order to submit the form, the form must be attached to DOM.\n        document.body.appendChild(form);\n        form.submit();\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || isAbsoluteUrl(url)) {\n            return url;\n        }\n\n        return joinPaths(this._options.host, url);\n    }\n}\n","export function isAbsoluteUrl(url: string): boolean {\n    return /^https?:\\/\\//.test(url);\n}\n\nexport function joinPaths(pathA: string, pathB: string): string {\n    return `${removeTrailingSlash(pathA)}/${removeLeadingSlash(pathB)}`;\n}\n\nfunction removeTrailingSlash(path: string): string {\n    return path.replace(/\\/$/, '');\n}\n\nfunction removeLeadingSlash(path: string): string {\n    return path.replace(/^\\//, '');\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            isEqual: shallowEqual,\n            maxSize: 0,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import lodashMemoize from 'lodash.memoize'; // tslint:disable-line:match-default-export-name\nimport shallowEqual from 'shallowequal';\n\nimport CacheKeyResolver from './cache-key-resolver';\nimport { Omit } from './types';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        isEqual,\n        maxSize,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import * as queryString from 'query-string';\n\nimport RequestOptions from './request-options';\nimport Response from './response';\n\nexport default interface Cache {\n    read<T>(url: string, options: RequestOptions): Response<T> | null;\n    write<T>(url: string, options: RequestOptions, response: Response<T>): void;\n}\n\ninterface CacheMap {\n    [key: string]: Response<any>;\n}\n\nexport class DefaultCache implements Cache {\n    private readonly _cache: CacheMap = {};\n\n    read<T>(url: string, options: RequestOptions): Response<T> | null {\n        const cacheKey = this.getKey(url, options.params);\n\n        return this._cache[cacheKey] || null;\n    }\n\n    write<T>(url: string, options: RequestOptions, response: Response<T>) {\n        const cacheKey = this.getKey(url, options.params);\n\n        this._cache[cacheKey] = response;\n    }\n\n    private getKey(url: string, params: object = {}) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n","import * as cookie from 'js-cookie';\n\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestSender from './request-sender';\nimport RequestSenderOptions from './request-sender-options';\n\nexport default function createRequestSender(options?: RequestSenderOptions): RequestSender {\n    return new RequestSender(\n        new RequestFactory(),\n        new PayloadTransformer(),\n        cookie,\n        options\n    );\n}\n","import Timeout from './timeout';\n\nexport default function createTimeout(delay?: number): Timeout {\n    return new Timeout(delay);\n}\n","export default function isPromise(promise: any): promise is PromiseLike<any> {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\n","import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\nimport toFormUrlEncoded from './to-form-url-encoded';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nconst FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return toFormUrlEncoded(options.body);\n            }\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n","import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params, options.encodeParams), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object, encodeParams: boolean = true): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params, { encode: encodeParams })}`;\n    }\n}\n","import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport Cache, { DefaultCache } from './cache';\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    private _cache: Cache;\n\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options: RequestSenderOptions = {}\n    ) {\n        this._cache = this._options.cache || new DefaultCache();\n    }\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(url, options);\n        const cachedRequest = this._getCachedRequest<T>(url, requestOptions);\n\n        if (cachedRequest) {\n            return Promise.resolve(cachedRequest);\n        }\n\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    this._cacheRequest(url, requestOptions, response);\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(url: string, options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            encodeParams: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers && !this._isAssetRequest(url, options)) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n\n    private _shouldCacheRequest(options: RequestOptions): boolean {\n        const method = options.method || 'GET';\n\n        return method.toUpperCase() === 'GET' && Boolean(options.cache);\n    }\n\n    private _getCachedRequest<T>(url: string, options: RequestOptions): Response<T> | null {\n        if (this._shouldCacheRequest(options)) {\n            return this._cache.read<T>(url, options);\n        }\n\n        return null;\n    }\n\n    private _cacheRequest<T>(url: string, options: RequestOptions, response: Response<T>): void {\n        if (this._shouldCacheRequest(options)) {\n            this._cache.write(url, options, response);\n        }\n    }\n\n    private _isAssetRequest(url: string, options?: RequestOptions): boolean {\n        if (options && options.method && options.method.toUpperCase() !== 'GET') {\n            return false;\n        }\n\n        return /\\.(png|gif|jpe?g|css|js|json|svg|html?)$/.test(url.split('?')[0]);\n    }\n}\n","export default class Timeout {\n    private _promise: Promise<any>;\n    private _resolve: () => void;\n    private _timeoutToken?: number;\n\n    constructor(\n        private _delay?: number\n    ) {\n        // tslint:disable-next-line:no-empty\n        this._resolve = () => {};\n\n        this._promise = new Promise(resolve => {\n            this._resolve = resolve;\n        });\n    }\n\n    onComplete(callback: () => void): void {\n        this._promise.then(callback);\n    }\n\n    complete(): void {\n        this._resolve();\n\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    }\n\n    start(): void {\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(() => this.complete(), this._delay);\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: any): string {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export default class BrowserSupport {\n    canSupportRel(rel: string): boolean {\n        const link = document.createElement('link');\n\n        return !!(\n            link.relList &&\n            link.relList.supports &&\n            link.relList.supports(rel)\n        );\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport BrowserSupport from './browser-support';\nimport ScriptLoader from './script-loader';\n\nexport default function createScriptLoader(): ScriptLoader {\n    return new ScriptLoader(\n        new BrowserSupport(),\n        createRequestSender()\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport BrowserSupport from './browser-support';\nimport StylesheetLoader from './stylesheet-loader';\n\nexport default function createStylesheetLoader(): StylesheetLoader {\n    return new StylesheetLoader(\n        new BrowserSupport(),\n        createRequestSender()\n    );\n}\n","import createScriptLoader from './create-script-loader';\nimport ScriptLoader from './script-loader';\n\nlet instance: ScriptLoader;\n\nexport default function getScriptLoader(): ScriptLoader {\n    if (!instance) {\n        instance = createScriptLoader();\n    }\n\n    return instance;\n}\n","import createStylesheetLoader from './create-stylesheet-loader';\nimport StylesheetLoader from './stylesheet-loader';\n\nlet instance: StylesheetLoader;\n\nexport default function getStylesheetLoader(): StylesheetLoader {\n    if (!instance) {\n        instance = createStylesheetLoader();\n    }\n\n    return instance;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport BrowserSupport from './browser-support';\n\nexport interface LoadScriptOptions {\n    async: boolean;\n    attributes: ScriptAttributes;\n}\n\nexport interface PreloadScriptOptions {\n    prefetch: boolean;\n}\n\nexport interface ScriptAttributes {\n    [key: string]: string;\n}\n\nexport default class ScriptLoader {\n    private _scripts: { [key: string]: Promise<void> } = {};\n    private _preloadedScripts: { [key: string]: Promise<void> } = {};\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _browserSupport: BrowserSupport,\n        private _requestSender: RequestSender\n    ) {}\n\n    loadScript(src: string, options?: LoadScriptOptions): Promise<void> {\n        if (!this._scripts[src]) {\n            this._scripts[src] = new Promise((resolve, reject) => {\n                const script = document.createElement('script') as LegacyHTMLScriptElement;\n                const { async = false, attributes = {} } = options || {};\n\n                Object.keys(attributes)\n                    .forEach(key => {\n                        script.setAttribute(key, attributes[key]);\n                    });\n\n                script.onload = () => resolve();\n                script.onreadystatechange = () => resolve();\n                script.onerror = event => {\n                    delete this._scripts[src];\n                    reject(event);\n                };\n                script.async = async;\n                script.src = src;\n\n                document.body.appendChild(script);\n            });\n        }\n\n        return this._scripts[src];\n    }\n\n    loadScripts(urls: string[], options?: LoadScriptOptions): Promise<void> {\n        return Promise.all(urls.map(url => this.loadScript(url, options)))\n            .then(() => undefined);\n    }\n\n    preloadScript(url: string, options?: PreloadScriptOptions): Promise<void> {\n        if (!this._preloadedScripts[url]) {\n            this._preloadedScripts[url] = new Promise((resolve, reject) => {\n                const { prefetch = false } = options || {};\n                const rel = prefetch ? 'prefetch' : 'preload';\n\n                if (this._browserSupport.canSupportRel(rel)) {\n                    const preloadedScript = document.createElement('link');\n\n                    preloadedScript.as = 'script';\n                    preloadedScript.rel = rel;\n                    preloadedScript.href = url;\n\n                    preloadedScript.onload = () => {\n                        resolve();\n                    };\n\n                    preloadedScript.onerror = () => {\n                        delete this._preloadedScripts[url];\n                        reject();\n                    };\n\n                    document.head.appendChild(preloadedScript);\n                } else {\n                    this._requestSender.get(url, {\n                        credentials: false,\n                        headers: { Accept: 'application/javascript' },\n                    })\n                        .then(() => resolve())\n                        .catch(reject);\n                }\n            });\n        }\n\n        return this._preloadedScripts[url];\n    }\n\n    preloadScripts(urls: string[], options?: PreloadScriptOptions): Promise<void> {\n        return Promise.all(urls.map(url => this.preloadScript(url, options)))\n            .then(() => undefined);\n    }\n}\n\ninterface LegacyHTMLScriptElement extends HTMLScriptElement {\n    // `onreadystatechange` is needed to support legacy IE\n    onreadystatechange(this: HTMLElement, event: Event): any;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport BrowserSupport from './browser-support';\n\nexport interface LoadStylesheetOptions {\n    prepend: boolean;\n    attributes?: StylesheetAttributes;\n}\n\nexport interface PreloadStylesheetOptions {\n    prefetch: boolean;\n}\n\nexport interface StylesheetAttributes {\n    [key: string]: string;\n}\n\nexport default class StylesheetLoader {\n    private _stylesheets: { [key: string]: Promise<void> } = {};\n    private _preloadedStylesheets: { [key: string]: Promise<void> } = {};\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _browserSupport: BrowserSupport,\n        private _requestSender: RequestSender\n    ) {}\n\n    loadStylesheet(src: string, options?: LoadStylesheetOptions): Promise<void> {\n        if (!this._stylesheets[src]) {\n            this._stylesheets[src] = new Promise((resolve, reject) => {\n                const stylesheet = document.createElement('link');\n                const { prepend = false, attributes = {} } = options || {};\n\n                Object.keys(attributes)\n                    .forEach(key => {\n                        stylesheet.setAttribute(key, attributes[key]);\n                    });\n\n                stylesheet.onload = () => resolve();\n                stylesheet.onerror = event => {\n                    delete this._stylesheets[src];\n                    reject(event);\n                };\n                stylesheet.rel = 'stylesheet';\n                stylesheet.href = src;\n\n                if (prepend && document.head.children[0]) {\n                    document.head.insertBefore(stylesheet, document.head.children[0]);\n                } else {\n                    document.head.appendChild(stylesheet);\n                }\n            });\n        }\n\n        return this._stylesheets[src];\n    }\n\n    loadStylesheets(urls: string[], options?: LoadStylesheetOptions): Promise<void> {\n        return Promise.all(urls.map(url => this.loadStylesheet(url, options)))\n            .then(() => undefined);\n    }\n\n    preloadStylesheet(url: string, options?: PreloadStylesheetOptions): Promise<void> {\n        if (!this._preloadedStylesheets[url]) {\n            this._preloadedStylesheets[url] = new Promise((resolve, reject) => {\n                const { prefetch = false } = options || {};\n                const rel = prefetch ? 'prefetch' : 'preload';\n\n                if (this._browserSupport.canSupportRel(rel)) {\n                    const preloadedStylesheet = document.createElement('link');\n\n                    preloadedStylesheet.as = 'style';\n                    preloadedStylesheet.rel = prefetch ? 'prefetch' : 'preload';\n                    preloadedStylesheet.href = url;\n\n                    preloadedStylesheet.onload = () => {\n                        resolve();\n                    };\n\n                    preloadedStylesheet.onerror = event => {\n                        delete this._preloadedStylesheets[url];\n                        reject(event);\n                    };\n\n                    document.head.appendChild(preloadedStylesheet);\n                } else {\n                    this._requestSender.get(url, {\n                        credentials: false,\n                        headers: { Accept: 'text/css' },\n                    })\n                        .then(() => resolve())\n                        .catch(reject);\n                }\n            });\n        }\n\n        return this._preloadedStylesheets[url];\n    }\n\n    preloadStylesheets(urls: string[], options?: PreloadStylesheetOptions): Promise<void> {\n        return Promise.all(urls.map(url => this.preloadStylesheet(url, options)))\n            .then(() => undefined);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar queryString = tslib_1.__importStar(require(\"query-string\"));\nvar DefaultCache = (function () {\n    function DefaultCache() {\n        this._cache = {};\n    }\n    DefaultCache.prototype.read = function (url, options) {\n        var cacheKey = this.getKey(url, options.params);\n        return this._cache[cacheKey] || null;\n    };\n    DefaultCache.prototype.write = function (url, options, response) {\n        var cacheKey = this.getKey(url, options.params);\n        this._cache[cacheKey] = response;\n    };\n    DefaultCache.prototype.getKey = function (url, params) {\n        if (params === void 0) { params = {}; }\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        return url + \"?\" + queryString.stringify(params);\n    };\n    return DefaultCache;\n}());\nexports.DefaultCache = DefaultCache;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar cookie = tslib_1.__importStar(require(\"js-cookie\"));\nvar payload_transformer_1 = tslib_1.__importDefault(require(\"./payload-transformer\"));\nvar request_factory_1 = tslib_1.__importDefault(require(\"./request-factory\"));\nvar request_sender_1 = tslib_1.__importDefault(require(\"./request-sender\"));\nfunction createRequestSender(options) {\n    return new request_sender_1.default(new request_factory_1.default(), new payload_transformer_1.default(), cookie, options);\n}\nexports.default = createRequestSender;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar timeout_1 = tslib_1.__importDefault(require(\"./timeout\"));\nfunction createTimeout(delay) {\n    return new timeout_1.default(delay);\n}\nexports.default = createTimeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar create_request_sender_1 = require(\"./create-request-sender\");\nexports.createRequestSender = create_request_sender_1.default;\nvar create_timeout_1 = require(\"./create-timeout\");\nexports.createTimeout = create_timeout_1.default;\nvar request_sender_1 = require(\"./request-sender\");\nexports.RequestSender = request_sender_1.default;\nvar timeout_1 = require(\"./timeout\");\nexports.Timeout = timeout_1.default;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isPromise(promise) {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\nexports.default = isPromise;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar to_form_url_encoded_1 = tslib_1.__importDefault(require(\"./to-form-url-encoded\"));\nvar JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nvar FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\nvar PayloadTransformer = (function () {\n    function PayloadTransformer() {\n    }\n    PayloadTransformer.prototype.toRequestBody = function (options) {\n        var contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return to_form_url_encoded_1.default(options.body);\n            }\n        }\n        return options.body;\n    };\n    PayloadTransformer.prototype.toResponse = function (xhr) {\n        var headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n        var body = this._parseResponseBody('response' in xhr ? xhr.response : xhr.responseText, headers);\n        return {\n            body: body,\n            headers: headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    };\n    PayloadTransformer.prototype._parseResponseBody = function (body, headers) {\n        var contentType = this._getHeader(headers, 'Content-Type');\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n        return body;\n    };\n    PayloadTransformer.prototype._parseResponseHeaders = function (rawHeaders) {\n        var lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n        return lines.reduce(function (headers, line) {\n            var _a;\n            var parts = line.split(':');\n            var key = (parts.shift() || '').trim();\n            if (!key) {\n                return headers;\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, headers), (_a = {}, _a[key.toLowerCase()] = parts.join(':').trim(), _a));\n        }, {});\n    };\n    PayloadTransformer.prototype._getHeader = function (headers, key) {\n        if (!headers || !key) {\n            return '';\n        }\n        return headers[key] || headers[key.toLowerCase()] || '';\n    };\n    return PayloadTransformer;\n}());\nexports.default = PayloadTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar queryString = tslib_1.__importStar(require(\"query-string\"));\nvar RequestFactory = (function () {\n    function RequestFactory() {\n    }\n    RequestFactory.prototype.createRequest = function (url, options) {\n        var xhr = new XMLHttpRequest();\n        this._configureRequest(xhr, url, options);\n        return xhr;\n    };\n    RequestFactory.prototype._configureRequest = function (xhr, url, options) {\n        if (options === void 0) { options = {}; }\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params, options.encodeParams), true);\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    };\n    RequestFactory.prototype._configureRequestHeaders = function (xhr, headers) {\n        Object.keys(headers)\n            .filter(function (key) { return headers[key] !== null; })\n            .forEach(function (key) {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    };\n    RequestFactory.prototype._formatUrl = function (url, params, encodeParams) {\n        if (encodeParams === void 0) { encodeParams = true; }\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n        return url + \"?\" + queryString.stringify(params, { encode: encodeParams });\n    };\n    return RequestFactory;\n}());\nexports.default = RequestFactory;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lodash_merge_1 = tslib_1.__importDefault(require(\"lodash.merge\"));\nvar cache_1 = require(\"./cache\");\nvar is_promise_1 = tslib_1.__importDefault(require(\"./is-promise\"));\nvar timeout_1 = tslib_1.__importDefault(require(\"./timeout\"));\nvar RequestSender = (function () {\n    function RequestSender(_requestFactory, _payloadTransformer, _cookie, _options) {\n        if (_options === void 0) { _options = {}; }\n        this._requestFactory = _requestFactory;\n        this._payloadTransformer = _payloadTransformer;\n        this._cookie = _cookie;\n        this._options = _options;\n        this._cache = this._options.cache || new cache_1.DefaultCache();\n    }\n    RequestSender.prototype.sendRequest = function (url, options) {\n        var _this = this;\n        var requestOptions = this._mergeDefaultOptions(url, options);\n        var cachedRequest = this._getCachedRequest(url, requestOptions);\n        if (cachedRequest) {\n            return Promise.resolve(cachedRequest);\n        }\n        var request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n        return new Promise(function (resolve, reject) {\n            var requestHandler = function () {\n                var response = _this._payloadTransformer.toResponse(request);\n                if (response.status >= 200 && response.status < 300) {\n                    _this._cacheRequest(url, requestOptions, response);\n                    resolve(response);\n                }\n                else {\n                    reject(response);\n                }\n            };\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n            if (requestOptions.timeout instanceof timeout_1.default) {\n                requestOptions.timeout.onComplete(function () { return request.abort(); });\n                requestOptions.timeout.start();\n            }\n            if (is_promise_1.default(requestOptions.timeout)) {\n                requestOptions.timeout.then(function () { return request.abort(); });\n            }\n            request.send(_this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    };\n    RequestSender.prototype.get = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'GET' }));\n    };\n    RequestSender.prototype.post = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'POST' }));\n    };\n    RequestSender.prototype.put = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'PUT' }));\n    };\n    RequestSender.prototype.patch = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'PATCH' }));\n    };\n    RequestSender.prototype.delete = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign(tslib_1.__assign({}, options), { method: 'DELETE' }));\n    };\n    RequestSender.prototype._mergeDefaultOptions = function (url, options) {\n        var defaultOptions = {\n            credentials: true,\n            encodeParams: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n        var csrfToken = this._cookie.get('XSRF-TOKEN');\n        if (csrfToken && defaultOptions.headers && !this._isAssetRequest(url, options)) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n        return lodash_merge_1.default({}, defaultOptions, options);\n    };\n    RequestSender.prototype._prependHost = function (url) {\n        if (!this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n        return this._options.host.replace(/\\/$/, '') + \"/\" + url.replace(/^\\//, '');\n    };\n    RequestSender.prototype._shouldCacheRequest = function (options) {\n        var method = options.method || 'GET';\n        return method.toUpperCase() === 'GET' && Boolean(options.cache);\n    };\n    RequestSender.prototype._getCachedRequest = function (url, options) {\n        if (this._shouldCacheRequest(options)) {\n            return this._cache.read(url, options);\n        }\n        return null;\n    };\n    RequestSender.prototype._cacheRequest = function (url, options, response) {\n        if (this._shouldCacheRequest(options)) {\n            this._cache.write(url, options, response);\n        }\n    };\n    RequestSender.prototype._isAssetRequest = function (url, options) {\n        if (options && options.method && options.method.toUpperCase() !== 'GET') {\n            return false;\n        }\n        return /\\.(png|gif|jpe?g|css|js|json|svg|html?)$/.test(url.split('?')[0]);\n    };\n    return RequestSender;\n}());\nexports.default = RequestSender;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Timeout = (function () {\n    function Timeout(_delay) {\n        var _this = this;\n        this._delay = _delay;\n        this._resolve = function () { };\n        this._promise = new Promise(function (resolve) {\n            _this._resolve = resolve;\n        });\n    }\n    Timeout.prototype.onComplete = function (callback) {\n        this._promise.then(callback);\n    };\n    Timeout.prototype.complete = function () {\n        this._resolve();\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    };\n    Timeout.prototype.start = function () {\n        var _this = this;\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(function () { return _this.complete(); }, this._delay);\n        }\n    };\n    return Timeout;\n}());\nexports.default = Timeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction toFormUrlEncoded(data) {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n    return Object.keys(data)\n        .filter(function (key) { return data[key] !== undefined; })\n        .map(function (key) {\n        var value = data[key];\n        if (typeof value === 'string') {\n            return key + \"=\" + encodeURIComponent(value);\n        }\n        return key + \"=\" + encodeURIComponent(JSON.stringify(value) || '');\n    })\n        .join('&');\n}\nexports.default = toFormUrlEncoded;\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n"],"names":["_objectAssign","_interopRequireDefault","require","_offsitePaymentInitializer","_paymentSubmitter","_clientTokenGenerator","_storeRequestSender","_defaultConfig","obj","__esModule","default","_typeof","o","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","t","r","e","toPrimitive","call","TypeError","String","Number","_toPrimitive","exports","Client","config","paymentSubmitter","offsitePaymentInitializer","clientTokenGenerator","storeRequestSender","instance","Constructor","_classCallCheck","this","staticProps","value","clientConfig","create","protoProps","host","data","callback","initializeOffsitePayment","submitPayment","generateClientToken","loadInstruments","loadInstrumentsWithAddress","deleteShopperInstrument","_contentTypes","_methodTypes","DEFAULT_OPTIONS","headers","Accept","APPLICATION_JSON","method","GET","_objectAssign2","_utils","PayloadTransformer","contentType","arguments","undefined","includes","JSON","stringify","xhr","parseResponseHeaders","getAllResponseHeaders","getResponseHeader","status","statusText","response","responseText","parse","rawHeaders","replace","split","reduce","line","parts","shift","trim","_defineProperty","toLowerCase","join","RequestFactory","url","options","XMLHttpRequest","onerror","Error","onload","open","setOptions","keys","forEach","setRequestHeader","withCredentials","setHeaders","_deepAssign","_defaultOptions","_payloadTransformer","_requestFactory","RequestSender","requestFactory","payloadTransformer","_this","mergedOptions","createRequest","error","fromResponse","isSuccessfulRequest","payload","toRequest","send","POST","sendRequest","items","item","Array","isArray","indexOf","_includes","_isNil","_isObject","_omitEmptystringAndNil","_omitNil","_omitProperty","_toNumber","_toSnakeCase","_toString","_isEmptyString","object","_isEmptystringOrNil","predicateFn","result","parseFloat","string","isNaN","toString","_client","_requestSender","_clientTokenMapper","_urlHelper","ClientTokenGenerator","urlHelper","requestSender","clientTokenMapper","getGenerateClientTokenUrl","mapToClientToken","postRequest","_formPoster","_paymentTypes","_payloadMapper","OffsitePaymentInitializer","formPoster","payloadMapper","createFormPoster","_data$paymentMethod","paymentMethod","type","HOSTED","concat","mapToPayload","getOffsitePaymentUrl","postForm","AddressMapper","mapToAddress","addressKey","address","formattedAddressKey","toSnakeCase","omitNil","city","company","countryCode","country","firstName","lastName","phone","provinceCode","province","addressLine1","addressLine2","postCode","CustomerMapper","_data$customer","customer","_data$quoteMeta","quoteMeta","_data$store","store","customer_browser_info","navigator","userAgent","customer_email","email","customer_first_name","customer_geo_ip_country_code","request","geoCountryCode","customer_id","customerId","customer_last_name","customer_locale","storeLanguage","customer_name","name","customer_phone","phoneNumber","customer_reference","MetaMapper","source","meta_referrer","document","referrer","meta_source","meta_user_agent","_addressMapper","_customerMapper","_metaMapper","_paymentMethodIdMapper","_storeMapper","PayloadMapper","addressMapper","customerMapper","metaMapper","paymentMethodIdMapper","storeMapper","authToken","_data$order","order","_data$payment","payment","amount","grandTotal","integerAmount","tax","taxTotal","bc_auth_token","currency","gateway","mapToId","notify_url","callbackUrl","order_id","orderId","page_title","title","payment_method_id","id","reference_id","return_url","returnUrl","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","mapToStore","_payment$formattedPay","formattedPayload","StoreMapper","store_hash","storeHash","store_id","storeId","_paymentMethodTypes","_paymentMethodIds","PaymentMethodIdMapper","MULTI_OPTION","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISACHECKOUT","BRAINTREE_GOOGLEPAY","BRAINTREE_ACH","BRAINTREE_LOCAL_METHODS","BRAINTREE_ACCELERATED_CHECKOUT","isBraintreePaymentMethod","BRAINTREE","PAYPAL_COMMERCE_CREDIT","PAYPAL_COMMERCE_CREDIT_CARDS","PAYPAL_COMMERCE_ACCELERATED_CHECKOUT","PAYPAL_COMMERCE_ALTERNATIVE_METHODS","PAYPAL_COMMERCE_VENMO","isPaypalCommercePaymentMethod","PAYPAL_COMMERCE","_ppsdkPayloadMapper","PaymentSubmitter","ppsdkPayloadMapper","API","SDK","getPpsdkPaymentUrl","getPaymentUrl","mapToHeaders","PpsdkPayloadMapper","additionalAction","instrument","expires","month","ccExpiry","toNumber","year","ccName","number","ccNumber","verification_value","ccCvv","PPSDK_CREDIT_CARD","form_nonce","hostedFormNonce","human_verification","parameters","token","human_verification_token","Authorization","UrlHelper","get","customer_group","customerGroupName","geo_ip_country_code","session_token","sessionHash","OrderMapper","billing_address","coupons","mapToCoupons","mapToItems","shipping","mapToShipping","shipping_address","totals","mapToOrderTotals","_ref","shippingOption","description","transitTime","omitEmptyStringAndNil","transit_time","_ref2","_ref2$order","coupon","map","_ref3","code","country_code","first_name","last_name","state_code","state","street_1","street_2","zip","_data$cart","cart","itemData","variant_id","variantId","price","unit_price","integerUnitPrice","quantity","sku","_data$order2","grand_total","handling","subtotal","_orderMapper","_paymentMapper","orderMapper","paymentMapper","mapToOrder","mapToPayment","additional_action","PaymentMapper","_data$orderMeta","orderMeta","device_info","deviceSessionId","device","deviceFingerprint","fingerprint_id","vault_payment_instrument","instrumentId","shouldSaveInstrument","set_as_default_stored_instrument","shouldSetAsDefaultInstrument","nonce","bigpay_token","mapToBigPayToken","credit_card_token","cryptogramId","credit_card_cryptogram","mapToCryptogram","credit_card","mapToCreditCard","browser_info","_data$payment2","account_name","customer_code","ccCustomerCode","three_d_secure","threeDSecure","hosted_form_nonce","credit_card_number_confirmation","verification_nonce","token_type","tokenType","payment_cryptogram","eci","xid","transactionId","account_mask","accountMask","hash","storeName","CartMapper","currency_code","_data$cart2","discount_amount","integerDiscount","tax_amount","integerTax","integerAmountAfterDiscount","mapToType","_data$cart3","discount_total","discount","shipping_total","surcharge_total","tax_total","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity","_cartMapper","_gatewayMapper","_quoteMapper","ClientTokenMapper","cartMapper","gatewayMapper","quoteMapper","mapToCart","mapToGateway","quote","mapToQuote","GatewayMapper","QuoteMapper","address_line_1","address_line_2","postal_code","locale","mapToLocale","store_identity","mapToIdentity","urls","mapToUrls","currencyCode","language_code","_data$store2","_data$store3","cartLink","checkout","checkoutLink","confirmation","orderConfirmationLink","home","shopPath","_mappers","StoreRequestSender","getInstrumentsUrl","getTrustedShippingAddressUrl","mapToTrustedShippingAddressPayload","getInstrumentByIdUrl","DELETE","providerName","defaultInstrument","provider","_ref2$creditCard","creditCard","cardholder_name","cardholderName","verification_code","verificationCode","issue_month","issueMonth","issue_year","issueYear","issue_number","issueNumber","track_data","trackData","is_manual_entry","isManualEntry","icc_data","iccData","fallback_reason","fallbackReason","is_contactless","isContactless","encrypted_pin_cryptogram","encryptedPinCryptogram","encrypted_pin_ksn","encryptedPinKsn","billingAddress","default_instrument","shippingAddress","shipping_addresses","n","d","a","hasOwnProperty","toStringTag","s","c","u","l","of","throwError","createErrorAction","h","setPrototypeOf","__proto__","captureStackTrace","stack","message","__extends","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentProviderCustomer","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","y","subtype","p","UpdateBillingAddressRequested","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestSucceeded","ContinueAsGuestFailed","v","_","_subscriptionActionCreator","continueAsGuest","getState","getCheckout","m","getCustomer","isGuest","g","getBillingAddress","f","__rest","__assign","merge","createAction","defer","__awaiter","_createOrUpdateBillingAddress","sent","body","pipe","catchError","_updateCustomerConsent","updateAddress","Observable","next","then","complete","catch","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","createAddress","Json","JsonV1","P","E","w","C","S","include","I","timeout","post","params","put","A","createDataStore","Synchronize","stateTransformer","subscribe","dispatch","initial","ClearError","clearError","k","process","N","T","_console","log","_logToConsole","apply","__spreadArrays","info","warn","debug","R","M","console","D","z","B","F","L","WeakMap","useCache","set","memoize","from","shareReplay","LoadConfigRequested","LoadConfigSucceeded","LoadConfigFailed","W","_configRequestSender","loadConfig","__decorate","U","q","errors","V","H","j","G","ApplyCouponRequested","ApplyCouponSucceeded","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponSucceeded","RemoveCouponFailed","X","K","_couponRequestSender","applyCoupon","removeCoupon","Z","AvailableShippingOptions","PhysicalItemsCategoryNames","DigitalItemsCategoryNames","Q","$","uniq","ne","ee","couponCode","delete","ApplyGiftCertificateRequested","ApplyGiftCertificateSucceeded","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateSucceeded","RemoveGiftCertificateFailed","re","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","oe","giftCertificateCode","se","ye","ue","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","_getInstance","register","_hasFactory","ce","_hasInstance","le","_registry","de","_resolveToken","bind","_encodeToken","btoa","_decodeToken","atob","matches","entries","push","sort","filter","find","he","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","_e","fe","ve","we","Ce","Se","Ie","be","Pe","Ee","me","Ae","Oe","Boolean","HORIZONTAL","VERTICAL","SMALL","MEDIUM","LARGE","RESPONSIVE","GOLD","BLUE","SIlVER","BLACK","CHECKOUT","PAY","BUYNOW","PAYPAL","CREDIT","PILL","RECT","Sandbox","Production","Connect","DataCollector","Fastlane","GooglePayment","HostedFields","LocalPayment","Paypal","PaypalCheckout","ThreeDSecure","UsBankAccount","Venmo","VisaCheckout","CardCode","CardCodeVerification","CardExpiry","CardName","CardNumber","CardNumberVerification","SUCCEEDED","FAILED","CANCELED","UNRECOGNIZED","ESTIMATED","FINAL","NOT_CURRENTLY_KNOWN","Be","ke","braintreeScriptLoader","braintreeHostWindow","overlay","dataCollectors","initialize","clientToken","getBraintreeConnect","window","localStorage","setItem","braintreeConnect","getClientTokenOrThrow","getClient","getSessionId","loadConnect","root","backgroundColorPrimary","authorization","client","deviceData","styles","getBraintreeFastlane","braintreeFastlane","loadFastlane","loadClient","getPaypal","braintreePaypal","Promise","all","loadPaypal","paypal","supportsPopups","show","onClick","focusWindow","tokenize","enableShippingAddress","flow","useraction","remove","getPaypalCheckout","loadPaypalCheckout","isCreditEnabled","components","intent","commit","loadPayPalSDK","paypalCheckout","loadBraintreeLocalMethods","braintreeLocalMethods","merchantAccountId","get3DS","threeDS","load3DS","version","getDataCollector","loadDataCollector","kount","teardown","resolve","getGooglePaymentComponent","googlePay","loadGooglePayment","getBraintreeEnv","mapToBraintreeShippingAddressOverride","recipientName","line1","address1","line2","address2","stateOrProvinceCode","postalCode","mapToLegacyShippingAddress","phone_number","mapToLegacyBillingAddress","removeElement","getElementById","riskCorrelationId","teardownModule","ge","De","Ne","Re","ze","scriptLoader","braintreeSdkVersion","checkoutSettings","features","loadBraintreeModuleOrThrow","loadUsBankAccount","loadVisaCheckout","loadVenmoCheckout","loadHostedFields","loadVisaCheckoutSdk","loadScript","async","attributes","integrity","crossorigin","Me","getBraintreeModule","getIntegrityValuesByModuleName","braintree","Le","assign","resolveIds","Ge","He","Ye","ApplePaySession","Subtotal","Shipping","rt","it","ot","We","_paymentIntegrationService","_sessionFactory","_braintreeIntegrationService","_onAuthorizeCallback","noop","_onError","_onClick","_subTotalLabel","_shippingLabel","_hasApplePaySession","methodId","applepay","xe","container","shippingLabel","subtotalLabel","onError","onPaymentAuthorize","_paymentMethod","getPaymentMethodOrThrow","loadPaymentMethod","verifyCheckoutSpamProtection","_applePayButton","_createButton","addEventListener","_handleWalletButtonClick","initializationData","_initializeBraintreeIntegrationService","deinitialize","signIn","Ue","signOut","executePaymentMethodCheckout","continueWithCheckoutCallback","qe","createElement","setAttribute","appendChild","preventDefault","getCartOrThrow","getStoreConfigOrThrow","getCheckoutOrThrow","_getBaseRequest","_handleApplePayEvents","begin","storeProfile","storeCountryCode","decimalPlaces","merchantCapabilities","supportedNetworks","lineItems","physicalItems","requiredBillingContactFields","requiredShippingContactFields","total","label","toFixed","taxes","onvalidatemerchant","_onValidateMerchant","completeMerchantValidation","onshippingcontactselected","__generator","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","loadCheckout","Ve","onpaymentauthorized","_onPaymentAuthorized","_transformContactToAddress","shippingContact","updateShippingAddress","abort","consignments","selectedShippingOption","availableShippingOptions","cost","detail","additionalDescription","identifier","isRecommended","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","shippingCostTotal","selectShippingOption","validationURL","merchantId","location","hostname","paymentsUrl","credentials","billingContact","_getBraintreeDeviceData","paymentData","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","emailAddress","updateBillingAddress","submitOrder","useStoreCredit","completePayment","STATUS_SUCCESS","STATUS_FAILURE","givenName","familyName","locality","addressLines","stateOrProvince","administrativeArea","customFields","getPaymentMethod","Je","getHost","Ke","createRequestSender","je","Te","Fe","getScriptLoader","Xe","Qe","$e","tt","paymentIntegrationService","boltScriptLoader","boltHostWindow","bolt","onInit","publishableKey","developerConfig","loadBoltClient","testMode","getCustomerEmail","hasBoltAccount","signInCustomer","signOutCustomer","checkoutPaymentMethodExecuted","openBoltCheckoutModalOrThrow","getBoltClientOrThrow","embeddedOneClickEnabled","close","openCheckout","Ze","BoltCheckout","et","SandboxMode","StagingMode","DevelopmentMode","Small","Medium","Large","Pill","Rect","St","at","getDomainURL","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","developerDomain","ct","nt","st","ut","dt","braintreeIntegrationService","braintreepaypal","paymentButtonStyles","checkoutTopButtonStyles","renderPayPalButton","handleError","FUNDING","Buttons","env","fundingSource","style","height","createOrder","setupPayment","onApprove","tokenizePayment","isEligible","render","loadDefaultCheckout","outstandingBalance","addresses","createPayment","shippingAddressEditable","shippingAddressOverride","offerCredit","details","payment_type","action","device_data","pt","lt","ht","braintreepaypalcredit","PAYLATER","yt","mt","gt","namespace","getItem","_t","withNamespace","removeItem","getItemOnce","vt","braintreeFastlaneUtils","isAcceleratedCheckoutEnabled","isFastlaneEnabled","braintreeafastlane","getValidPaymentMethodOrThrow","initializeBraintreeAcceleratedCheckoutOrThrow","getCustomerOrThrow","shouldRunAuthenticationFlow","runPayPalConnectAuthenticationFlowOrThrow","runPayPalFastlaneAuthenticationFlowOrThrow","shouldRunAcceleratedCheckout","Ct","CVV","PAN","At","Ot","kt","Tt","Mt","Dt","Nt","Rt","It","browserStorage","getDeviceSessionId","getCart","getBraintreeConnectOrThrow","getBraintreeConnectComponentOrThrow","ConnectCardComponent","getBraintreeFastlaneOrThrow","getBraintreeFastlaneComponentOrThrow","FastlaneCardComponent","getMethodIdOrThrow","identity","lookupCustomerByEmail","triggerAuthenticationFlow","customerContextId","updatePaymentProviderCustomer","authenticationState","instruments","profileData","mapPayPalToBcAddress","phones","getPayPalBillingAddresses","mapPayPalToBcInstrument","cards","mergeShippingAndBillingAddresses","O","getPayPalFastlaneBillingAddress","card","digitalItems","b","setShippingOption","paymentSource","brand","expiry","lastDigits","bigpayToken","expiryMonth","expiryYear","iin","last4","trustedShippingAddress","untrustedShippingCardVerificationMode","getCountries","national_number","Date","now","streetAddress","extendedAddress","region","countryCodeAlpha2","given_name","surname","some","isEqual","normalizeAddress","omit","getConsignments","Pt","ft","bt","wt","Et","zt","AUTHORIZE","CAPTURE","buynow","pay","installment","gold","blue","silver","black","white","pill","rect","AMEX","DISCOVER","INTERAC","JCB","MC","VISA","OFFER","PAYMENT_AUTHORIZATION","SHIPPING_ADDRESS","SHIPPING_OPTION","INITIALIZE","xt","Ft","_gatewayIdentifier","_isBuyNowFlow","mapToShippingAddressRequestBody","getShippingAddress","_mapToAddressRequestBody","mapToBillingAddressRequestBody","paymentMethodData","mapToExternalCheckoutData","tokenizationData","cardNetwork","cardDetails","card_information","cart_id","getRequiredData","emailRequired","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","_isShippingAddressRequired","loadShippingCountries","getShippingCountries","allowedCountryCodes","getNonce","extraPaymentData","getMerchantInfo","getGooglePayInitializationData","merchantName","googleMerchantName","googleMerchantId","authJwt","platformToken","getTransactionInfo","_getCurrencyCodeOrThrow","storeCountry","totalPriceStatus","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","getCardParameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressRequired","billingAddressParameters","format","_getPaymentMethodFn","_currencyCode","getGatewayIdentifier","setGatewayIdentifier","getStoreConfig","isShippingRequired","customItems","address3","_getFirstAndLastName","slice","Bt","Ut","values","ADYEN_V2","ADYEN_V3","AUTHORIZE_NET","BNZ","CHECKOUT_COM","CYBERSOURCE_V2","ORBITAL","STRIPE","STRIPE_UPE","WORLDPAY_ACCESS","qt","_googlePayPaymentProcessor","_methodId","_getMethodId","_getGooglePayClientOptions","_addPaymentButton","reject","getPaymentId","providerId","_paymentButton","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","round","newTransactionInfo","buttonColor","buttonType","addPaymentButton","_handleClick","_interactWithPaymentSheet","statusCode","showPaymentSheet","pathname","links","siteLink","setExternalCheckoutForm","Gt","Ht","_scriptLoader","_gateway","_baseRequest","apiVersion","apiVersionMinor","getGooglePaymentsClient","_paymentsClient","_buildPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","querySelector","_getPaymentsClient","createButton","allowedPaymentMethods","_getBaseCardPaymentMethod","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","_setExternalCheckout","processAdditionalAction","transactionInfo","prefetchPaymentData","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","merchantInfo","_paymentDataRequest","callbackIntents","_isReadyToPayRequest","_getOrThrow","Yt","_window","google","payments","api","PaymentsClient","environment","Kt","Wt","tn","Jt","Vt","jt","Lt","Zt","Xt","paymentGatewayId","$t","Qt","en","nn","rn","Dn","Nn","Rn","zn","Fn","Ln","Bn","on","three_ds_result","acs_url","_tokenize","checkoutcomkey","token_data","sn","an","cn","dn","un","ln","pn","mn","hn","yn","stripeVersion","stripePublishableKey","stripeConnectedAccount","_n","gn","fn","vn","Cn","wn","cancel","promise","race","In","_braintreeService","_service","createPaymentDataRequest","cardRequirements","billingAddressFormat","_paymentGatewayParameters","paymentMethodTokenizationParameters","bin","isThreeDSecureEnabled","getOrderOrThrow","orderAmount","_braintreePresent3DSChallenge","androidPayCards","Sn","verifyCard","onLookupComplete","Pn","bn","En","paypalCommerceScriptLoader","service","getPayPalSDK","getGooglePayConfigOrThrow","googlepayConfig","On","getPayPalSdkScriptConfigOrThrow","Googlepay","transformConfig","URLSearchParams","clientId","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","Tn","An","kn","BuyNow","OXXO","Approved","Created","PayerActionRequired","PollingStop","PollingError","or","ar","xn","paypalCommerceRequestSender","loadPayPalSdk","paypalSdk","getPayPalSdkOrThrow","createBuyNowCartOrThrow","getBuyNowCartRequestBody","createBuyNowCart","Mn","cartId","createOrderCardFields","setupToken","updateOrder","getConsignmentsOrThrow","getOrderStatus","method_id","paypal_account","gatewayId","getShippingOptionOrThrow","getAddress","getBillingAddressFromOrderDetails","payer","email_address","admin_area_2","admin_area_1","getShippingAddressFromOrderDetails","purchase_units","getValidButtonStyle","color","shape","getValidHeight","omitBy","isNil","display","qn","Vn","Hn","Yn","Un","Gn","jn","Wn","paypalCommerceIntegrationService","paypalcommerce","renderButton","onComplete","orderID","onShippingChange","onHostedCheckoutApprove","selected_shipping_option","Jn","Kn","Zn","paypalcommercecredit","Qn","Xn","$n","paypalcommercevenmo","VENMO","tr","er","nr","getPayPalFastlaneSdk","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalMessages","paypalMessages","getPayPalSdkMessagesConfiguration","connectClientToken","ir","rr","createScriptLoader","sr","initializePayPalFastlane","paypalFastlane","getPayPalFastlaneOrThrow","lookupCustomerOrThrow","triggerAuthenticationFlowOrThrow","updateStorageSessionId","getStorageSessionId","mapPayPalFastlaneProfileToBcCustomerData","filterAddresses","mapBcToPayPalAddress","adminArea1","adminArea2","fullName","nationalNumber","isEqualAddresses","ur","cr","yr","gr","_r","fr","vr","wr","dr","paypalCommerceSdk","paypalCommerceFastlaneUtils","isAcceleratedCheckoutFeatureEnabled","primaryMethodId","secondaryMethodId","paypalcommercefastlane","runPayPalAuthenticationFlowOrThrow","updateCustomerDataState","pr","lr","hr","mr","shopperLanguage","SHIPPING","BILLING","SPLIT","FULL","ORGANIZATION","CreditCard","SOFORT","EPS","GRABPAY","BANCONTACT","IDEAL","GIROPAY","ALIPAY","KLARNA","NEVER","AUTO","ALWAYS","PAYMENT","IF_REQUIRED","AUTHENTICATION","REQUIRES_PAYMENT_METHOD","REQUIRES_CONFIRMATION","REQUIRES_ACTION","PROCESSING","Or","Cr","stripeupe","onEmailChange","getStyles","isLoading","getPaymentProviderCustomerOrThrow","stripeLinkAuthenticationState","variables","colorPrimary","fieldInnerShadow","colorBackground","fieldBackground","colorText","labelText","colorDanger","fieldErrorText","colorTextSecondary","colorTextPlaceholder","fieldPlaceholderText","rules","borderColor","fieldBorder","fieldText","boxShadow","getStripeClient","getElements","clientSecret","appearance","_stripeElements","defaultValues","mode","getElement","authenticated","deleteConsignment","mount","unmount","Ir","stripeWindow","bcStripeClient","load","stripeAccount","betas","bcStripeElements","elements","fetchUpdates","update","Stripe","Pr","Sr","br","Er","pe","Ar","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressSucceeded","CreateCustomerAddressFailed","StripeLinkAuthenticated","Nr","kr","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","createAccount","switchMap","loadCurrentCheckout","execute","Mr","SignInFailed","SignInRequested","SignInSucceeded","SignOutFailed","SignOutRequested","SignOutSucceeded","ExecutePaymentMethodCheckoutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","InitializeFailed","InitializeRequested","InitializeSucceeded","DeinitializeFailed","DeinitializeRequested","DeinitializeSucceeded","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","_strategyRegistry","_strategyRegistryV2","_getStrategy","customerStrategies","isInitialized","widgetInteraction","zr","addedByPromotion","Fr","Lr","Br","xr","Ur","qr","Vr","jp","uk","us","en_US","en_GB","de_DE","fr_FR","it_IT","es_ES","ja_JP","Home","Product","Cart","Checkout","Other","USD","EUR","GBP","JPY","PayAndShip","PayOnly","Gold","LightGray","DarkGray","C0001","Gr","amazonPayV2ScriptLoader","amazonPayV2SDK","buttonParentContainer","createAmazonPayButtonParentContainer","amazonPayV2Button","bindButton","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","changeAction","prepareCheckout","prepareRequestConfig","getAmazonPayV2Button","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutSessionConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","checkoutState","containerId","decoupleCheckoutInitiation","placement","isButtonMicroTextDisabled","getButtonParentContainer","design","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","isPh4Enabled","publicKeyId","isEnvironmentSpecific","Math","random","substr","paymentMethods","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","sandbox","createCheckoutSession","test","getOrThrow","jr","windowWithAmazonPay","amazon","Wr","Hr","Yr","Kr","pickBy","difference","Xr","Jr","updateCheckout","LoadCheckoutRequested","LoadCheckoutSucceeded","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","ei","Qr","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","checkoutId","loadFormFields","_shouldTransformCustomerAddress","_transformCustomerAddresses","getContextConfig","shouldSaveAddress","LoadFormFieldsRequested","LoadFormFieldsSucceeded","LoadFormFieldsFailed","oi","ti","_formFieldsRequestSender","loadFields","ri","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","LoadPaymentMethodsRequested","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","ai","si","loadPaymentMethodsById","loadPaymentMethods","_filterApplePay","ui","li","_normalize","cartAmount","productId","localeCompare","extendedSalePrice","giftCertificates","recipient","giftWrapping","previous","updated","validate","hi","_compareCoupons","_compareGiftCertificates","mi","_getComparableCheckout","_i","_mutationObserver","ensurePresence","removedNodes","contains","gi","observe","childList","subtree","disconnect","vi","MutationObserver","wi","href","port","origin","protocol","search","Ci","_targetWindow","_context","_targetOrigin","fromEvent","successType","errorType","take","toPromise","postMessage","context","setTarget","setContext","Ii","bi","Pi","getOwnPropertyNames","getOwnPropertyDescriptor","Ni","Ei","_sourceOrigins","_isListening","_listeners","listen","_handleMessage","stopListen","removeEventListener","addListener","removeListener","splice","trigger","Mi","_googleRecaptcha","handle","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","Oi","ki","Ti","parentNode","removeChild","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","Subject","_widgetId","sitekey","size","getResponse","reset","zi","_event$","_recaptcha","Ri","Fi","retryWhen","delay","_watchRecaptchaChallengeWindow","parentElement","visibility","attributeFilter","_loadPromise","_loadScript","grecaptcha","xi","Li","Bi","Ui","qi","Yi","Wi","Hi","flatMap","AttachRequested","SubmitRequested","ValidateRequested","StoredCardRequested","AttachSucceeded","AttachFailed","BinChanged","Blurred","Changed","CardTypeChanged","Entered","Focused","SubmitSucceeded","SubmitFailed","Validated","StoredCardSucceeded","StoredCardFailed","Ki","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","overflow","width","getType","attach","Vi","contentWindow","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","detach","submitForm","fields","_isSubmitErrorEvent","Gi","submitStoredCardForm","validateForm","isValid","ji","querySelectorAll","fontFamily","Zi","_fields","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","onEnter","onBlur","onCardTypeChange","onFocus","onValidate","_cardType","cardType","_bin","getBin","getCardType","_getFirstField","without","submit","transform","submitStoredCard","Qi","no","_store","getConfig","getInstrumentsMeta","getOrder","getOrderMeta","getPaymentMethodsMeta","getPaymentToken","vaultAccessToken","paymentMethodMeta","Ji","Si","Ai","fi","_getCardInstrument","Xi","$i","pick","Di","getCardInstrument","LoadOrderRequested","LoadOrderSucceeded","LoadOrderFailed","LoadOrderPaymentsRequested","LoadOrderPaymentsSucceeded","LoadOrderPaymentsFailed","SubmitOrderRequested","SubmitOrderSucceeded","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderSucceeded","FinalizeOrderFailed","co","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","getExternalSource","getVariantIdentificationToken","shouldExecuteSpamCheck","to","_mapToOrderRequestBody","customerMessage","checkoutVariant","meta","finalizeOrder","externalSource","ao","oo","io","SubmitPaymentRequested","SubmitPaymentSucceeded","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","uo","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","_transformResponse","ho","mo","createClient","setHost","paymentSettings","bigpayBaseUrl","yo","_o","_decimalPlaces","toInteger","pow","fo","vo","displayName","discountType","couponType","wo","discountedAmount","used","remainingBalance","remaining","giftCertificate","balance","purchaseDate","Co","go","imageUrl","amountAfterDiscount","integerUnitPriceAfterDiscount","sender","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","categoryNames","So","discountNotifications","promotions","banners","placeholders","messageHtml","text","totalDiscountedAmount","appliedGiftCertificates","keyBy","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","storeCredit","taxSubtotal","handlingCostTotal","APPLEPAY","AMAZON_PAY_V2","BRAINTREE_VENMO","GOOGLEPAY_ADYENV2","GOOGLEPAY_ADYENV3","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BNZ","GOOGLEPAY_BRAINTREE","GOOGLEPAY_CHECKOUTCOM","GOOGLEPAY_CYBERSOURCEV2","GOOGLEPAY_ORBITAL","GOOGLEPAY_STRIPE","GOOGLEPAY_STRIPEUPE","GOOGLEPAY_WORLDPAYACCESS","MASTERPASS","PAYPALEXPRESS","Io","bo","customerGroup","Po","RegExp","toObject","Ao","max","creditCardType","lengths","unformat","gaps","ko","customerCanBeCreated","Mo","baseAmount","orderToken","socialData","No","hasDigitalItems","isDownloadable","isComplete","To","orderAmountAsInteger","Do","step","helpText","instructions","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","Ro","module","selected","Lo","zo","_cardExpiryFormatter","Eo","_cardNumberFormatter","Oo","_mapShippingAddress","getShippingOption","_transformPaymentMethod","transformWithHostedFormData","_transformHostedInputValues","storeConfig","cardCodeVerification","cardNumberVerification","cardCode","cardExpiry","cardName","cardNumber","bopis","enabled","requiredAddress","every","selectedPickupOption","UpdatePaymentProviderCustomer","xo","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","InitializeRemoteBillingRequested","InitializeRemoteBillingSucceeded","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingSucceeded","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsSucceeded","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","UpdateRemoteCheckout","Ho","Uo","_remoteCheckoutRequestSender","initializeBilling","initializeShipping","initializePayment","loadSettings","forgetCheckout","Vo","generateToken","trackAuthorizationEvent","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","Zo","jo","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","getConsignmentByAddress","_removeLineItems","updateConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","shippingOptionId","loadShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","Wo","Ko","LoadShippingCountriesRequested","LoadShippingCountriesSucceeded","LoadShippingCountriesFailed","ea","_shippingCountryRequestSender","loadCountries","Qo","_config","VerifyCheckoutRequested","VerifyCheckoutSucceeded","VerifyCheckoutFailed","ExecuteRequested","ExecuteSucceeded","ExecuteFailed","oa","ta","googleRecaptchaSitekey","ra","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","da","aa","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","ca","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","UpdateSubscriptionsFailed","pa","_subscriptionsRequestSender","la","ma","ga","isPlainObject","_a","fa","cache","va","wa","getBillingAddressOrThrow","getOutstandingBalance","getLocale","countries","getCardInstrumentOrThrow","getInstruments","getPaymentTokenOrThrow","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentRedirectUrl","x","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","paymentProviderCustomer","getPaymentProviderCustomer","Y","paymentStrategies","J","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","shippingCountries","isPaymentMethodInitialized","Ca","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_paymentProviderCustomerActionCreator","_shippingCountryActionCreator","_remoteCheckoutActionCreator","_storeProjection","createHostedForm","validateCheckout","_transformSelectors","ba","Ia","$r","Zr","ni","ii","yi","eo","ro","so","ha","ya","Yo","Jo","ci","di","lo","po","Fo","Tr","Dr","na","ia","sa","ua","pi","Bo","Xo","$o","qo","Go","Sa","Ea","_braintreeScriptLoader","_dataCollectors","_clientToken","_getPayPalSDKConfig","_paypalCheckout","getVenmoCheckout","_venmoCheckout","allowDesktop","paymentMethodUsage","isBrowserSupported","Pa","_3ds","getVisaCheckout","_visaCheckout","createHostedFields","_teardown","Oa","_braintreeSDKCreator","createInitOptions","settings","collectShipping","paymentRequest","handleSuccess","_toVisaCheckoutAddress","_postForm","userData","userEmail","_getCardInformation","_getAddress","lastTwo","Ta","Aa","ka","za","Fa","La","Ba","xa","Ua","Ma","JPMC","qa","Long","Short","Default","Black","White","Min","Full","Va","_googlePayScriptLoader","_googlePayInitializer","_shouldThrowError","_configureWallet","_googlePayClient","updatePaymentDataRequest","displayWallet","parseResponse","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","updateShouldThrowInvalidError","_getCheckout","_getGooglePayClient","lastFour","Ra","_mapGooglePayAddressToBillingAddress","companyName","tokenFormat","Ha","Ya","Ga","ja","Cs","Wa","Ka","_getGooglePaymentDataRequest","_getPaymentGatewaySpecification","_getCardPaymentMethod","Za","_getGooglePayPaymentDataRequest","Qa","_publishableKey","_testMode","_errorMessage","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","signature","protocolVersion","signedMessage","_convertToken","token_format","_requestCheckoutcomTokenize","es","ns","is","as","cs","ds","useMasterpassSrc","language","masterpass","hs","_amazonPayV2PaymentProcessor","amazonpay","ps","ys","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","_createSignInButton","init","_paymentInstrumentSelected","_onPaymentSelectComplete","queueId","_insertVisaCheckoutButton","flexDirection","className","innerHTML","_s","_chasePayScriptLoader","chasepay","digitalSessionId","ChasePay","configure","isChasePayUp","insertButtons","containers","EventType","START_CHECKOUT","startCheckout","COMPLETE_CHECKOUT","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","fromChasePay","vs","Ss","Is","_getGooglePayOptions","_walletButton","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","googlepayworldpayaccess","Ps","Es","zu","zh","ms","sv","pl","nl","As","Ds","Ns","Os","_masterpassScriptLoader","_locale","allowedCardTypes","suppressShippingAddress","isMasterpassSrcEnabled","_signInButton","Ts","Rs","zs","Fs","iframeResizer","LoadExtensionsRequested","LoadExtensionsSucceeded","LoadExtensionsFailed","RenderExtensionRequested","RenderExtensionSucceeded","RenderExtensionFailed","ExtensionReady","ExtensionFailed","Ls","Bs","Subscribe","Unsubscribe","ResizeIframe","qs","xs","_options","createFrame","_toResizableFrame","setTimeout","autoResize","scrolling","sizeWidth","heightCalculationMethod","initCallback","clearTimeout","Vs","_extension","parentOrigin","_url","URL","searchParams","Us","Gs","loadExtensions","renderExtension","extensions","getExtensionByRegion","Hs","js","ReloadCheckout","ShowLoadingIndicator","SetIframeStyle","Ys","Ws","_posters","_getExtensionById","_validateCommand","extensionId","getExtensions","_extensions","Ks","_extensionMessenger","_subscribers","_subscribed","_unsubscribers","_handleSubscribe","_handleUnsubscribe","broadcast","eventType","ConsignmentsChanged","Qs","$s","ec","tc","nc","rc","ic","Js","previousConsignments","Zs","_stylesheetLoader","loadStylesheet","prepend","AdyenCheckout","oc","encryptedSecurityCode","encryptedExpiryMonth","ThreeDS2Fingerprint","ThreeDS2","Redirect","QRCode","Voucher","Sdk","ThreeDS2Challenge","SecuredFields","ACH","AliPay","Bancontact","Klarna","KlarnaPayNow","KlarnaAccount","GiroPay","GooglePay","SEPA","Sofort","Vipps","WeChatPayQR","ChallengeShopper","IdentifyShopper","SecurityCode","ExpiryDate","sc","cc","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","screen_width","time_zone_offset","getTimezoneOffset","lc","adyenv2","_paymentInitializeOptions","originKey","clientKey","paymentMethodsResponse","translations","_adyenClient","_mountPaymentComponent","_paymentComponent","_mountCardVerificationComponent","_cardVerificationComponent","_validateCardData","ac","_componentState","encryptedCardNumber","encryptedExpiryYear","expiry_month","expiry_year","_processAdditionalAction","finalize","uc","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","additionalActionOptions","threeDS2Options","widgetSize","_handleAction","threeDS2ContainerId","onBeforeLoad","onLoad","createFromAction","onAdditionalDetails","paymentMethodType","_mapAdyenPlaceholderData","holderName","street","houseNumberOrName","cardVerificationContainerId","caretColor","onChange","_updateComponentState","validateCardFields","onFieldValid","prefillCardHolderName","hasVaultedInstruments","provider_data","componentRef","showValidation","issuer","dc","_mapCardErrors","hc","pc","Xs","getStylesheetLoader","mc","gc","Sc","_c","adyenv3","paymentMethodsConfiguration","klarna","useKlarnaWidget","klarna_account","klarna_paynow","showPayButton","socialSecurityNumber","shopperName","challengeWindowSize","_mountElement","showBrandsUnderCardNumber","showEmailAddress","onSubmit","vc","fc","yc","wc","affirmScriptLoader","affirm","initializeAffirmCheckout","checkout_token","getCheckoutInformation","onFail","reason","onSuccess","merchant","user_confirmation_url","user_cancel_url","user_confirmation_url_action","billing","getItems","metadata","shipping_type","getShippingType","platform_type","platform_version","platform_affirm","discounts","getDiscounts","shipping_amount","first","last","full","zipcode","display_name","qty","item_image_url","item_url","categories","getCategories","discount_display_name","DISCOUNTED_AMOUNT","PROD","SANDBOX","Oc","kc","affirmWindow","getElementsByTagName","jsReady","insertBefore","public_api_key","script","bc","Cc","Ic","Ec","_afterpayScriptLoader","_mapCurrencyToISO2","_afterpaySdk","_loadPaymentMethod","_redirectToAfterpay","Pc","redirect","AUD","NZD","CAD","Dc","_getScriptURI","AfterPay","Mc","Ac","Tc","StoreCredit","Lc","Nc","_storeCreditLabel","storeCreditLabel","isStoreCreditApplied","min","zc","Rc","_blueSnapSdk","initialize3ds","_getBlueSnapSdk","threeDsPaymentsSetup","threeDSecureReferenceId","threeDsPaymentsSubmitData","CardExpiryVerification","Bc","xc","Uc","Gc","Hc","jc","Yc","Wc","qc","_blueSnapDirectHostedForm","_blueSnapDirect3ds","is3dsEnabled","_paymentFieldsToken","_shouldUseHostedFields","form","_getPaymentFieldsToken","_getBlueSnapDirectThreeDSecureData","last4Digits","ccType","toUpperCase","pfToken","cardHolderName","billingFirstName","billingLastName","billingCountry","billingCity","billingZip","shippingFirstName","shippingLastName","shippingCountry","shippingCity","shippingZip","CHINA_UNION_PAY","DINERS","MASTERCARD","UNKNOWN","ON_BLUR","ON_SUBMIT","EMPTY","INVALID","THREE_DS_NOT_ENABLED","CC_NOT_SUPORTED","ERROR_403","ERROR_404","ERROR_500","INVALID_OR_EMPTY","SESSION_EXPIRED","THREE_DS_AUTH_FAILED","THREE_DS_CLIENT_ERROR","THREE_DS_MISSING_FIELDS","TOKEN_EXPIRED","TOKEN_NOT_ASSOCIATED","TOKEN_NOT_FOUND","iu","Xc","Kc","Qc","Jc","fieldType","invalid","Zc","$c","_nameOnCardInput","_hostedInputValidator","initializeValidationFields","_onValidate","_setCustomBlueSnapAttributes","_setCustomStoredCardsBlueSnapAttributes","_getHostedPaymentFieldsOptions","hostedPaymentFieldsCreate","hostedPaymentFieldsSubmitData","_isBlueSnapDirectCallbackError","errorDescription","cardData","getValue","onFieldEventHandler","setupComplete","_usetUiEventCallback","_handleError","onType","onValid","tagId","ccnPlaceHolder","cvvPlaceHolder","expPlaceHolder","_mapStyles","focus","input","kebabCase","errorCode","eventOrigin","dataset","bluesnap","_errors","_updateErrors","nu","_style","_create","_getInput","_handleFocus","_handleBlur","_input","_applyStyles","HTMLInputElement","fontSize","fontWeight","_configureInput","autocomplete","inputMode","maxLength","backgroundColor","margin","outline","padding","PRODUCTION","lu","ou","su","Vc","au","eu","ru","tu","Fc","cu","_formatePaymentPayload","_isBlueSnapDirectRedirectResponse","redirect_url","merchantid","ecp","account_number","accountNumber","account_type","accountType","shopper_permission","shopperPermission","routing_number","routingNumber","sepa_direct_debit","iban","ideal","bic","du","uu","ACKNOWLEDGE","FINALIZE","pu","hu","_initializeOptions","_createIframe","bluesnapv2","yu","mu","storage","saveExtraItemsData","category","getStorageKey","readExtraItemsData","isObject","clearExtraItemData","_u","fu","Iu","bu","getError","wu","analyticsExtraItemsManager","useBoltClient","useBoltEmbedded","onPaymentSelect","useBigCommerceCheckout","boltClient","boltEmbedded","mountBoltEmbeddedField","embeddedField","setExtraItemsForAnalytics","getBoltClientPaymentPayload","getBoltEmbeddedPaymentPayload","getBoltFullCheckoutPaymentPayload","success","reference","validateTokenizeResultOrThrow","last_four_digits","expiration_month","expiration","expiration_year","create_account","shouldCreateAccount","embedded_checkout","setBoltOrderId","getTransactionReference","getBoltEmbeddedOrThrow","setOrderId","renderSeparateFields","vu","isAnalyticsEnabled","Su","Cu","gu","Customer","Merchant","Network","Internal","Unknown","KountNotEnabled","Pu","setBraintreeSdkVersion","setClientToken","dataCollector","getDataCollectorOrThrow","getUsBankAccount","usBankAccount","getBraintreeVisaCheckout","visaCheckout","getVisaCheckoutSdk","visaCheckoutSDK","Au","Ou","braintreeSdk","braintreeach","getMandateText","handleBraintreeError","tokenizePaymentForVaultedInstrument","preparePaymentDataForVaultedInstrument","preparePaymentData","getUsBankAccountOrThrow","bankDetails","getBankDetails","mandateText","isVaultingEnabled","tokenized_bank_account","masked_account_number","ownershipType","businessName","Tu","ku","Eu","Mu","_createElements","element","closeElement","mainElement","_element","_closeElement","_mainElement","_registerClick","opacity","_unregisterClick","_removeAfterTransition","background","transitionDuration","hasCloseButton","innerHtml","classLayout","classOverlayText","classClose","innerText","_addEventListener","_removeEventListener","onClickClose","propertyName","Nu","Ru","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","hide","bottom","left","position","right","top","transition","setStyleAttribute","borderRadius","transformStyle","animation","setProperty","head","sheet","CSSStyleSheet","insertRule","Lu","Bu","xu","loadingIndicator","bannerContainerId","loadPaypalCheckoutInstance","isProviderError","paypalButtonRender","braintreeTokenizePayload","enableCheckoutPaywallBanner","renderPayPalMessages","onPaymentError","onRenderButton","loadingIndicatorContainer","toggleLoadingIndicator","tokenizePaymentOrThrow","onCancel","Messages","layout","logo","provider_error","qu","Du","Uu","Fu","Vu","braintreelocalmethods","getLocalPaymentInstance","localPaymentInstance","startPayment","paymentType","fallback","buttonText","onPaymentStart","paymentId","Hu","Gu","ju","Yu","Qu","Wu","braintreefastlane","initializeCardComponent","renderBraintreeAXOComponent","handleBraintreeStoredInstrumentChange","prepareFastlanePaymentPayload","prepareConnectPaymentPayload","braintreeCardComponent","prefill","getBraintreeCardComponentOrThrow","isPayPalInstrument","paypal_connect_token","mapToPayPalAddress","getPayPalInstruments","paypal_fastlane_token","profile","showCardSelector","selectionChanged","selectedCard","Ju","Ku","Zu","_isHostedPaymentFormEnabled","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","_hostedForm","isHostedFormEnabled","OffsiteRedirect","Pd","Ed","Ad","Od","kd","Td","Md","$u","_processResponse","_performRedirect","Xu","td","_createFormattedPayload","customerMobile","customerEmail","ed","rd","nd","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","ad","od","sd","ud","cd","dd","pd","ld","hd","md","ccDocument","gd","yd","_d","_clearpayScriptLoader","_clearpaySdk","_isCountrySupported","_redirectToClearpay","vd","_getScriptUrl","Cd","fd","wd","Sd","Id","_cardinalClient","prepare","_getClientToken","start","runBinProcess","getThreeDSecureData","_getOrderData","Dd","SetupCompleted","Init","Complete","Confirm","Success","NoAction","Failure","CCA","Wallet","ApplePay","DiscoverWallet","BinProcess","Yes","_provider","_configurationToken","_sdk","_getClientSDK","off","ActionCode","ErrorNumber","ErrorDescription","setup","jwt","Status","Payment","ExtendedData","SignatureVerification","AcsUrl","Payload","_mapToPartialOrder","continue","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","zd","_threeDSecureFlow","Ld","Fd","bd","Nd","Rd","Bd","_getBin","_submitPayment","Ud","Vd","qd","xd","Gd","_isAdditionalActionRequired","redirectUrl","jd","Hd","Yd","cl","ul","Wd","googlePayToken","Jd","walletButton","_clickListener","Xd","Zd","Kd","Qd","el","$d","tl","rl","il","ol","al","sl","Rl","dl","_paypalCommerceScriptLoader","getOrderId","confirmOrder","initiatePayerAction","ll","ml","processable","hl","isOffsiteRedirectResponse","handleOffsiteRedirectResponse","gl","yl","_l","fl","vl","klarnaScriptLoader","klarnaCredit","unsubscribe","loadWidget","authorize","authorization_token","authorizationToken","client_token","getUpdateSessionData","mapToKlarnaAddress","needsStateCode","street_address","family_name","street_address2","approved","show_form","Cl","klarnaWindow","Credit","Il","wl","Sl","bl","klarnav2ScriptLoader","klarnav2TokenUpdater","klarnaPayments","loadPaymentsWidget","klarnaOrderInitialization","authorizeOrThrow","klarnav2","updateClientToken","payment_method_category","El","Payments","Ol","Tl","Pl","Al","kl","Ml","Nl","Dl","CREDIT_CARD","zl","Fl","mollieScriptLoader","mollie","each","initializeOptions","isCreditCard","shouldShowTSVHostedForm","mountCardVerificationfields","hostedForm","loadMollieJs","mollieClient","mountElements","disableButton","loadPaymentMethodsAllowed","executeWithVaulted","executeWithCC","executeWithAPM","cardHolderElement","cardNumberElement","verificationCodeElement","expiryDateElement","getMollieClient","createToken","shopper_locale","getShopperLocale","isHostedPaymentFormEnabled","isHostedFieldAvailable","getInitializeOptions","cardNumberId","cardCvcId","cardExpiryId","cardHolderId","createComponent","unsupportedMethodMessage","Bl","mollieHostWindow","Mollie","testmode","Ul","Ll","xl","ql","Gl","Vl","Hl","Yl","jl","Wl","_shouldSubmitFullPayload","Jl","Kl","Zl","Xl","shouldRenderPayPalButtonOnInitialization","isPayPalVaultedInstrumentPaymentData","prepareVaultedInstrumentPaymentPayload","preparePaymentPayload","paypalButton","isTrustedVaultingFlow","checkoutPaymentButtonStyles","handleClick","handleApprove","getFieldsValues","$l","Ql","ep","renderMessages","np","tp","rp","op","ip","ap","paypalcommercealternativemethods","shouldRenderFields","renderFields","isNonInstantPaymentMethod","buttonStyle","onInitButton","onCreateOrder","handleFailure","apmFieldsContainer","apmFieldsStyles","PaymentFields","cp","sp","up","dp","lp","kp","pp","paypalcommercecreditcards","onCreditCardFieldsRenderingError","hostedFormOptions","isCreditCardForm","isCreditCardVaultedForm","hasUndefinedValues","initializeFields","shouldInitializePayPalFastlane","initializePayPalFastlaneOrThrow","executionPaymentData","validateHostedFormOrThrow","submitHostedForm","getInstrumentParams","returnedOrderId","returnedVaultedToken","cvvField","expiryField","numberField","nameField","card_with_order","getExecuteCallback","getInputStyles","vaultSetupToken","inputEvents","onChangeHandler","onFocusHandler","onBlurHandler","onInputSubmitRequest","CardFields","cardFields","stylizeInputContainers","renderVaultedFields","createVaultSetupTokenCallback","createOrderCallback","createVaultSetupToken","getCardFieldsOrThrow","CVVField","ExpiryField","NameField","NumberField","cardExpiryVerification","getFieldTypeByEmittedField","emittedBy","mapFieldType","getValidityData","mapValidationErrors","cardNameField","getInvalidErrorByFieldType","marginBottom","marginLeft","isPayPalCommerceAnalyticsV2Enabled","mp","hp","gp","pollingTimer","stopPolling","paypalcommerceratepay","legalTextContainer","loadingContainerId","createFraudNetScript","loadFraudnetConfig","renderLegalText","metadataId","guid","ratepayBirthDate","ratepayPhoneNumber","ratepayPhoneCountryCode","rate_pay","birth_date","normalizeDate","initializePollingMechanism","deinitializePollingMechanism","formatDate","getDate","getMonth","getFullYear","Legal","PAY_UPON_INVOICE","resetPollingMechanism","generateGUID","floor","reinitializeStrategy","useMetadata","yp","fp","_p","vp","initializePayPalPaymentComponent","renderPayPalPaymentComponent","handlePayPalStoredInstrumentChange","paypalComponentMethods","getPayPalComponentMethodsOrThrow","Cp","wp","Sp","threeDSecureFlow","bp","Ip","_isThreeDSTwoExperimentOn","creq","Ep","Pp","Op","Ap","CHARGE","STORE","Rp","Tp","applicationId","locationId","_payments","_formValidationSubscription","_card","destroy","initializeCard","onValidationChange","_getPayments","_subscribeToFormValidation","_getCard","verifyBuyer","_chargeVerifyBuyer","_storeVerifyBuyer","Set","field","currentState","isCompletelyValid","distinctUntilChanged","_mapToSquareBillingContact","Dp","_squareV2PaymentProcessor","squarev2","_getVaultedInstrumentPayload","_getCardPayload","_shouldVerify","store_card_nonce","store_card_token","_getSquareCardIdOrThrow","cardId","LIVE","xp","Up","qp","Vp","zp","Square","Lp","Np","Mp","Fp","Bp","cardNumberElementOptions","cardCvcElementOptions","cardExpiryElementOptions","Solid","Alipay","CardCvc","Sepa","AuthFailure","Hp","stripev3","isDeinitialize","useIndividualCardFields","loadStripeJs","stripeV3Client","mountCardVerificationFields","mountCardFields","stripeElement","confirmStripePayment","paymentIntent","confirm","buildPaymentPayload","handleEmptyPaymentIntentError","unmountElement","isCancellationError","payment_intent","last_payment_error","isAuthError","isEmpty","getStripeJs","confirmAlipayPayment","handleActions","mapStripePaymentData","confirmIdealPayment","confirmSepaDebitPayment","getStripeCardElements","getStripeElement","mapStripeBillingDetails","createPaymentMethod","billing_details","stripeCardElements","mapStripeAddress","zipCodeElementOptions","stripeElements","confirmCardPayment","Gp","Kp","Yp","Wp","Jp","bg","fil","lv","nb","sk","th","Zp","Xp","Qp","_isMounted","_loadStripeElement","_unsubscribe","_stripeUPEClient","_executeWithVaulted","_executeWithAPM","_executeWithoutRedirect","_isCancellationError","_throwDisplayableStripeError","_getPaymentPayload","_isPaymentCompleted","retrievePaymentIntent","_processVaultedAdditionalAction","initStripeElementUpdateTrigger","_loadStripeJs","_isStripeElementUpdateEnabled","colorIcon","billingDetails","wallets","applePay","_getStripeElementTerms","_updateStripeElement","confirmPayment","_mapStripePaymentData","_mapStripeAddress","confirmParams","payment_method_data","shouldShowTerms","terms","eh","$p","CARD_NUMBER","EXPIRY","dh","nh","tdOnlineMartScriptLoader","tdInputs","loadTDOnlineMartJs","tdOnlineMartClient","mountHostedFields","getPaymentPayloadOrThrow","processWithAdditionalAction","inputElement","isTrustedVaultingInstrument","getTokenOrThrow","throwTokenizationError","getHostedFieldsOptions","getTDOnlineMartClientOrThrow","threeDSSessionData","classes","ih","tdOnlineMartWindow","customcheckout","ah","rh","oh","sh","_prepareForReferredRegistration","saveExternalId","externalId","uh","ch","LoadCountriesRequested","LoadCountriesSucceeded","LoadCountriesFailed","_countryRequestSender","ph","mh","gh","_h","FinalizeFailed","FinalizeRequested","FinalizeSucceeded","ADYENV2","ADYENV2_GOOGLEPAY","ADYENV3","ADYENV3_GOOGLEPAY","AFFIRM","AFTERPAY","AUTHORIZENET_GOOGLE_PAY","AMAZONPAY","BARCLAYS","BLUESNAPV2","BOLT","CBA_MPGS","CHECKOUTCOM","CHECKOUTCOM_APM","CHECKOUTCOM_FAWRY","CHECKOUTCOM_SEPA","CHECKOUTCOM_IDEAL","CHECKOUTCOM_GOOGLE_PAY","CLEARPAY","CONVERGE","CYBERSOURCE","CYBERSOURCEV2","BNZ_GOOGLEPAY","DIGITALRIVER","CYBERSOURCEV2_GOOGLE_PAY","HUMM","KLARNAV2","LAYBUY","LEGACY","MOLLIE","MONERIS","NO_PAYMENT_DATA_REQUIRED","OFFLINE","OFFSITE","OPY","ORBITAL_GOOGLE_PAY","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","PAYPAL_COMMERCE_CREDIT_CARD","PPSDK","QUADPAY","SAGE_PAY","SQUARE","STRIPEV3","STRIPE_UPE_GOOGLE_PAY","BRAINTREE_VISA_CHECKOUT","BRAINTREE_GOOGLE_PAY","CHASE_PAY","WE_PAY","WORLDPAYACCESS","WORLDPAYACCESS_GOOGLE_PAY","STRIPE_GOOGLE_PAY","SEZZLE","ZIP","fh","vh","_loadOrderPaymentsIfNeeded","yh","getByMethod","_namespace","Sh","Ih","initializationStrategy","bh","_getToken","_hasFactoryForMethod","Eh","Oh","Uh","qh","Mh","_paymentStrategyActionCreator","paymentToken","_isReadyToPay","editButtonId","_bindEditButton","_isModalFlow","_createContainer","_amazonPayButton","_isOneTimeTransaction","kh","_getAmazonPayButton","click","Th","cloneNode","replaceChild","_showLoadingSpinner","Nh","Rh","Lh","Vh","StoredCardVerification","Gh","_isInitializedHostedForm","_formOptions","_mapFieldType","_mapErrors","_handleCardTypeChange","_handleInputSubmitRequest","_handleValidityChange","_isValidForm","_mapValidationErrors","_mapFieldOptions","_mapStyleOptions","_cardFields","xh","_mapBillingAddress","_mapTokenizeError","tokenizeForStoredCardVerification","countryName","internalLabel","expirationDate","cvv","_isValidParam","isPotentiallyValid","_createInvalidError","_createRequiredError","invalidFieldKeys","jh","_braintreeHostedForm","_threeDSecureOptions","preloadPaypalCheckout","tokenizeCard","_getErrorsRequiredFields","_mapToCreditCard","creditCards","challenge3DSVerification","appendSessionId","initializeHostedForm","validateHostedForm","isInitializedHostedForm","deinitializeHostedForm","tokenizeHostedForm","tokenizeHostedFormForStoredCardVerification","verifyCardWithHostedForm","_present3DSChallenge","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","collectDeviceData","endpoint","Wh","nm","rm","im","om","am","sm","cm","Kh","_braintreePaymentProcessor","_isHostedFormInitialized","_is3dsEnabled","_deviceSessionId","_shouldInitializeBraintreeConnect","_initializeBraintreeConnectOrThrow","_prepareHostedPaymentData","_preparePaymentData","_isSubmittingWithStoredCard","_shouldPerform3DSVerification","Zh","_initializeBraintreeVenmo","_braintreeVenmoCheckout","_formattedPayload","_braintreeVenmoTokenize","Qh","em","um","wm","lm","mm","ym","gm","_CBAMGPSScriptLoader","_sessionId","isTestModeFlagEnabled","_threeDSjs","sessionId","isConfigured","configuration","wsVersion","_initiateAuthentication","initiateAuthentication","hm","msg","gatewayRecommendation","restApiResponse","transaction","authenticationStatus","_authenticatePayer","authenticatePayer","cause","fullScreenRedirect","fm","ThreeDS","StartCheckout","CompleteCheckout","CancelCheckout","bm","Cm","_wepayRiskClient","_walletEvent$","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","_setSessionToken","showLoadingAnimation","getRiskToken","paymentCryptogram","reqTokenId","expDate","accountNum","extraData","riskToken","authentication_not_required","failed","Em","_digitalRiverScriptLoader","_digitalRiverInitializeOptions","digitalriver","publicKey","paymentLanguage","_getDigitalRiverInitializeOptions","_digitalRiverJS","_loadWidget","_digitalRiverCheckoutData","_submitVaultedInstrument","checkoutData","_isAuthenticateSourceAction","_authenticateSource","_loadSuccessResponse","readyForStorage","_getDigitalRiverJs","_getErrorMessage","_onSuccessResponse","_submitFormEvent","browserInfo","owner","reusable","_onReadyResponse","paymentMethodConfiguration","_mountComplianceSection","sellingEntity","onSubmitForm","showSavePaymentAgreement","disabledPaymentMethods","onReady","createDropin","_digitalRiverDropComponent","Pm","authenticateSource","sourceId","source_id","sourceClientSecret","source_client_secret","base","compliance","entity","cssText","classList","add","Om","DigitalRiver","Tm","Bm","xm","Mm","_googlePayProviderProcessor","_googlePayOptions","_buttonClickEventHandler","_handleButtonClickedEvent","cardInformation","_verifyCard","googlepayadyenv2","googlepayadyenv3","_encodeNonce","_masterpassClient","_createMasterpassPayload","zm","Fm","moneris","profileId","_shouldShowTSVHostedForm","_mountCardVerificationfields","_executeWithCC","_windowEventListener","_monerisURL","_handleMonerisResponse","_getInitializeOptions","pmmsg","display_labels","enable_exp","enable_cvd","css_body","cssBody","css_textbox","cssTextbox","css_textbox_pan","cssTextboxCardNumber","css_textbox_exp","cssTextboxExpiryDate","css_textbox_cvd","cssTextboxCVV","css_input_label","cssInputLabel","pan_label","creditCardLabel","exp_label","expiryDateLabel","cvd_label","cvdLabel","responseCode","errorMessage","dataKey","Um","widgetConfig","FORM_POST","WAIT_FOR_CUSTOMER","InvalidCart","Hm","Vm","_storefrontPaymentRequestSender","opy","_installWidget","nextAction","qm","formPost","formPostUrl","formFields","fieldName","fieldValue","append","decodeURI","loadOpyWidget","Config","AU","UK","US","$m","jm","Ym","Wm","OpenpayWidgets","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","button","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","Zm","Qm","ey","ty","_isRedirecting","currentUrlHasRedirectingParam","isRedirecting","setRedirecting","setRedirectingParamOnUrl","removeRedirectingParamFromUrl","getCurrentUrl","query","parseUrl","replaceCurrentUrl","history","replaceState","stringifyUrl","exclude","ny","overSome","isString","isUndefined","ry","_humanVerificationHandler","form_fields","available_methods","humanVerification","iy","_continueHandler","oy","ay","sy","_browserStorage","isCompleted","getCompletedPayments","setCompleted","setCompletedPayments","cy","_subStrategyRegistry","_paymentResumer","_completedPayments","_subStrategy","resume","CARD","NONE","UNSUPPORTED","fy","vy","wy","uy","cond","constant","stubTrue","dy","ly","_ppsdkStepHandler","py","_stepHandler","hy","my","auth_token","yy","americanExpress","discover","discoverDiners","masterCard","unionPay","unknown","visa","squareGift","none","Ay","My","Cy","square","_squareOptions","_syncPaymentMethod","_paymentForm","_getFormOptions","_getPaymentForm","build","_getNonceInstrument","_getCountryCode","_deferredRequestNonce","_y","requestCardNonce","callbacks","cardNonceResponseReceived","_getDeferredRequestNonce","digital_wallet_type","_handleWalletNonceResponse","_is3DSExperimentOn","_getVerificationDetails","createPaymentRequest","_paymentRequestPayload","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","pending","setPostalCode","_getBillingContact","_getAmountAndCurrencyCode","Iy","_isSquareWindow","SqPaymentForm","_riskClient","WePay","risk","generate_risk_token","get_risk_token","Oy","ky","worldpay","_submitAdditionalAction","_isValidJsonWithSessionId","SessionId","_createHiddenIframe","match","srcdoc","outerHTML","LoadInstrumentsRequested","LoadInstrumentsSucceeded","LoadInstrumentsFailed","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","By","Dy","_instrumentRequestSender","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","deleteInstrument","_isValidVaultAccessToken","valueOf","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","shopperCurrency","isTransactional","Ry","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","_isPayPalInstrument","external_id","trusted_shipping_address","_isBankInstrument","last_4","untrusted_shipping_address_card_verification_mode","method_type","Fy","_transformer","zy","_loadInstrumentsWithAddress","_loadInstruments","LoadPickupOptionsRequested","LoadPickupOptionsSucceeded","LoadPickupOptionsFailed","qy","_pickupOptionRequestSender","loadPickupOptions","_hydrateApiQuery","fetchPickupOptions","results","getConsignmentById","consignmentId","searchArea","UpdateAddressFailed","UpdateAddressRequested","UpdateAddressSucceeded","SelectOptionFailed","SelectOptionRequested","SelectOptionSucceeded","Jy","selectOption","shippingStrategies","Gy","jy","_shippingStrategyActionCreator","editAddressButtonId","_shouldShowLoadingSpinner","Wy","Ky","tg","ng","rg","ig","og","ag","Zy","onPayPalFastlaneAddressChange","_shouldRunAuthenticationFlow","_runAuthenticationFlowOrThrow","_shouldUseBraintreeFastlaneShippingComponent","_handleBraintreeFastlaneShippingAddressChange","_getPayPalBillingAddresses","_mapPayPalToBcAddress","_mapPayPalToBcInstrument","_mergeShippingAndBillingAddresses","_normalizeAddress","_getCountryNameByCountryCode","showShippingAddressSelector","selectedAddress","_filterAddresses","_isEqualAddresses","_getBraintreePaymentMethodOrThrow","$y","_paypalCommerceSdk","_paypalCommerceFastlaneUtils","_shouldAuthenticateUserWithFastlane","_initializePayPalSdk","_authenticateUserWithFastlaneOtp","_shouldUsePayPalFastlaneShippingComponent","_handlePayPalShippingAddressChange","_getPayPalPaymentMethodOrThrow","_getPayPalCustomerAuthenticationState","ug","sg","_stripeUPEScriptLoader","onChangeShipping","availableCountries","getStripeState","getShippingAddressFields","spacingUnit","allowedCountries","validation","isNewAddress","sendData","phoneFieldRequired","SendSignInEmailRequested","SendSignInEmailSucceeded","SendSignInEmailFailed","dg","sendSignInEmail","pg","_messageCustomizer","yg","_extensionEventBroadcaster","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_pickupOptionActionCreator","_signInEmailActionCreator","_subscriptionsActionCreator","_extensionActionCreator","_errorTransformer","mg","notifyState","_dispatch","finalizeOrderIfNeeded","loadPaymentMethodByIds","deinitializePayment","loadBillingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","createCustomerAccount","createCustomerAddress","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","initializeSpamProtection","executeSpamCheck","handleExtensionCommand","_g","fg","pop","vg","createSelector","wg","Sg","createSelectorCreator","defaultMemoize","Cg","Pg","_factoryMethods","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","Ag","Og","kg","keyFilter","Tg","Mg","Dg","statuses","Ng","combineReducers","Rg","composeReducers","zg","Fg","xg","Lg","matchObject","Bg","Ug","qg","Vg","Hg","Gg","InitializeButtonFailed","InitializeButtonRequested","InitializeButtonSucceeded","DeinitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","jg","Yg","initializedContainers","Wg","Kg","Jg","Zg","Xg","Qg","$g","e_","t_","n_","r_","i_","o_","a_","s_","c_","u_","d_","l_","p_","h_","m_","y_","g_","__","f_","v_","w_","C_","S_","I_","initializeErrors","initializeMethodId","deinitializeError","deinitializeMethodId","signInError","signInMethodId","signOutError","signOutMethodId","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","widgetInteractionError","widgetInteractionMethodId","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","b_","P_","E_","A_","O_","k_","T_","M_","D_","N_","R_","z_","F_","L_","B_","x_","U_","q_","G_","V_","H_","j_","Y_","W_","K_","J_","Z_","X_","Q_","ef","$_","tf","findIndex","loadMethodId","loadMethodError","isLoadingMethod","nf","rf","af","sf","initializeError","executeError","executeMethodId","finalizeError","finalizeMethodId","isExecuting","isFinalizing","cf","uf","df","lf","pf","hf","yf","mf","gf","deleteError","failedInstrument","isDeleting","deletingInstrument","_f","ff","vf","wf","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","Cf","Sf","If","bf","Pf","Ef","Af","Of","kf","Tf","Mf","Df","Nf","Rf","zf","Ff","Lf","Bf","xf","Uf","qf","updateAddressError","updateAddressMethodId","selectOptionError","selectOptionMethodId","isUpdatingAddress","isSelectingOption","Vf","Gf","Hf","jf","Yf","Wf","Kf","Jf","Zf","Xf","Qf","$f","ev","tv","nv","rv","iv","ov","av","getPrototypeOf","charAt","deepFreeze","barclays","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","orbital","paymetric","cba_mpgs","worldpayaccess","tdonlinemart","cv","uv","Eg","Ig","continueAsGuestError","loadError","isContinuingAsGuest","memoizeOne","getUpdateError","getContinueAsGuestError","getLoadError","te","getInitializeError","getDeinitializeError","flashMessages","formState","variantIdentificationToken","getFlashMessages","ie","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","ae","isCreating","createAddressError","isCreatingAddress","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","getGiftCertificates","isMatch","getInstrumentsByPaymentMethod","getDeleteError","customerAccount","itemtype","subdivisions","requiresState","hasPostalCodes","getBillingAddressFields","getCustomerAccountFields","getPaymentMethods","getLoadMethodError","getExecuteError","getFinalizeError","getWidgetInteractingError","getPickupOptions","getUpdateAddressError","getSelectOptionError","loadShippingOptionsError","isLoadingShippingOptions","getCreateError","getLoadShippingOptionsError","getUnassignedItems","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","isExecutingSpamCheck","getOrderBillingAddress","providerType","isPaymentDataSubmitted","applyError","sendError","isSending","getEmail","getSendError","checkoutButton","orderBillingAddress","pickupOptions","remoteCheckout","subscriptions","signInEmail","shouldWarnMutation","dv","actionTransformer","pv","checkoutVariantIdentificationToken","checkoutUserExperienceSettings","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getSignInEmail","getUserExperienceSettings","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getSelectShippingOptionError","getUpdateBillingAddressError","getUpdateSubscriptionsError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getSignInEmailError","getCreateCustomerAccountError","getCreateCustomerAddressError","getPickupOptionsError","getLoadExtensionsError","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isInitializedCustomer","isSelectingShippingOption","isUpdatingBillingAddress","isUpdatingSubscriptions","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isSendingSignInEmail","isCustomerStepPending","isShippingStepPending","isPaymentStepPending","isLoadingPickupOptions","isPending","gg","lh","hh","Rr","gs","Da","fs","Na","Ms","ks","ls","bs","Ja","Xa","$a","ts","rs","os","ss","ws","Ny","Ly","wh","Ph","Hh","Yh","Ah","Dh","Dm","Fh","tm","dm","pm","Jh","Xh","$h","_m","vm","Im","Bh","Nm","Sm","Py","Am","km","Rm","Lm","Gm","Km","Jm","Xm","Ch","gy","Sy","by","Ey","Ty","xy","Uy","Vy","Yy","cg","Hy","Xy","eg","Qy","lg","hg","hv","mv","_lastId","_map","maps","_usedMaps","maxSize","onExpire","getKey","_resolveMap","index","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","unshift","_removeMap","gv","yv","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","isInitializingButton","isDeinitializingButton","vv","_v","fv","wv","_buttonStrategyActionCreator","_state","initializeButton","uniqueId","deinitializeButton","_registryV2","bv","Ev","_amazonPayV2ConfigRequestSender","buyNowInitializeOptions","_buyNowInitializeOptions","_getCheckoutCreationRequestConfig","_createBuyNowCart","Iv","_createCheckoutConfig","createCheckoutConfig","public_key","payloadJSON","Pv","kv","Tv","fundingicons","tagline","Mv","Dv","Nv","Fv","Lv","Bv","xv","Uv","Rv","messagingContainerId","_renderPayPalComponents","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","_setupPayment","_tokenizePayment","_removeElement","_buyNowCart","WHITE","Jv","qv","Gv","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","cursor","minHeight","minWidth","Hv","braintreevenmo","cartButtonStyles","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","removeAttribute","_handlePostForm","Wv","_paypalScriptLoader","_host","allowCredit","Button","funding","allowed","disallowed","onAuthorize","paymentID","payerID","payerId","payerInfo","payer_info","kw","Tw","Mw","Dw","Nw","Zv","buttonClassName","requiresShipping","_requiresShipping","_getRequestWithEmptyTotal","onpaymentmethodselected","_handlePaymentMethodSelected","completePaymentMethodSelection","Qv","Xv","$v","storefrontApiToken","BoltConnect","setupProductPageCheckout","addButtonContainer","getBoltObjectData","getButtonHeight","getButtonBorderRadius","publishable_key","variant","border_radius","tw","ew","nw","createSignInButton","paymentSuccess","toVisaCheckoutAddress","insertVisaCheckoutButton","alignItems","iw","rw","ow","_getMethodOrThrow","_countryCode","_getBuyNowTransactionInfo","_getTransactionInfo","_createBuyNowCartOrThrow","sw","aw","cw","uw","dw","lw","pw","hw","mw","yw","gw","_w","vw","fw","ww","Sw","Cw","Iw","getValidVenmoButtonStyles","Pw","bw","Ew","apm","Ow","Aw","Uw","Rw","paypalExpressScriptLoader","loadPaypalSDK","getStyle","Fw","Bw","zw","Lw","xw","Cv","Sv","Ov","Av","zv","Vv","jv","Yv","Kv","CheckoutComplete","CheckoutError","CheckoutLoaded","FrameError","FrameLoaded","SignedOut","Vw","MissingContainer","MissingContent","UnknownError","Hw","StyleConfigured","jw","Yw","Ww","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onFrameLoad","onSignOut","_configureStyles","_allowCookie","_attemptLogin","_retryAllowCookie","iFrameResizer","qw","encodeURIComponent","Gw","Jw","allowPaymentRequest","allow","contentId","Xw","Qw","Kw","Zw","$w","hasAttribute","eC","tC","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","_notifyMessageHandlers","iC","parentWindow","parent","rC","nC","oC","sC","cC","uC","_logger","_transformConfig","locales","_locales","_translations","_formatters","mapKeys","_hasTranslations","translate","aC","compile","_transformData","defaultLocale","defaultTranslations","_flattenObject","fallbackTranslations","union","fallbackLocale","lC","dC","wC","pC","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","_formatNumber","_formatCurrency","abs","_toFixed","_storeConfig","_customerFormatter","hC","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","yC","mC","gC","_C","nonInteraction","fC","vC","CUSTOMER","CC","SC","checkoutSteps","checkoutService","analytics","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","trackCheckoutStarted","track","getTrackingPayload","revenue","extraItemsData","trackOrderComplete","affiliation","products","trackStepViewed","getIdFromStep","hasStepViewed","trackViewed","backfill","trackStepCompleted","hasStepCompleted","trackCompleted","getShopperCurrency","getPaymentMethodName","shipping_method","getStoreProfile","toShopperCurrency","getProducts","product_id","image_url","PC","IC","bC","EC","AC","OC","_selectedPaymentMethodId","customerPaymentMethodExecuted","_shouldTrackFastlaneEvent","_trackEmailSubmitted","paymentComplete","_trackOrderPlaced","selectedPaymentMethod","_trackApmSelected","walletButtonClick","isBraintreeAnalyticsV2Enabled","events","_getBraintreeEventsOrThrow","emailSubmitted","_getEmailSubmittedEventOptions","apmSelected","_getApmSelectedEventOptions","orderPlaced","_getOrderPlacedEventOptions","_getEventCommonOptions","treatment_group","context_type","context_id","page_type","page_name","partner_name","user_type","merchant_name","experiment","user_email_saved","apm_shown","apm_list","apm_selected","apm_location","selected_payment_method","TC","kC","DC","_checkoutService","_getPayPalEventsOrThrow","RC","NC","BC","zC","LC","FC","xC","UC","bodlEvents","_emailEntryBegan","_shippingOptionsShown","setState","checkoutBegin","_getCommonCheckoutData","emitCheckoutBeginEvent","orderPurchased","channelId","emitOrderPurchasedEvent","event_id","channel_id","cart_value","coupon_codes","shipping_cost","line_items","_getProducts","stepCompleted","_hasStepCompleted","_trackCompletedStep","customerEmailEntry","emit","customerSuggestionInit","customerSuggestionExecute","showShippingMethods","emitPaymentDetailsProvidedEvent","clickPayButton","paymentRejected","exitCheckout","_trackShippingStepCompleted","emitShippingDetailsProvidedEvent","base_price","sale_price","purchase_price","product_name","gift_certificate_id","gift_certificate_name","gift_certificate_theme","theme","brand_name","category_names","flatten","retail_price","retailPrice","GC","qC","VC","queryString","__importStar","DefaultCache","_cache","read","write","tslib_1","cookie","payload_transformer_1","__importDefault","request_factory_1","request_sender_1","timeout_1","create_request_sender_1","create_timeout_1","createTimeout","Timeout","to_form_url_encoded_1","JSON_CONTENT_TYPE_REGEXP","FORM_URLENCODED_CONTENT_TYPE_REGEXP","toRequestBody","_getHeader","toResponse","_parseResponseHeaders","_parseResponseBody","_configureRequest","_formatUrl","encodeParams","_configureRequestHeaders","encode","lodash_merge_1","cache_1","is_promise_1","_cookie","requestOptions","_mergeDefaultOptions","cachedRequest","_getCachedRequest","_prependHost","requestHandler","_cacheRequest","onabort","ontimeout","patch","defaultOptions","csrfToken","_isAssetRequest","_isLocalRequest","_shouldCacheRequest","_delay","_resolve","_promise","_timeoutToken","strictUriEncode","objectAssign","decodeComponent","opts","strict","keysSorter","extract","str","queryStart","formatter","arrayFormat","accumulator","exec","parserForArrayFormat","ret","param","val","encoderForArrayFormat","val2","charCodeAt","extendStatics","getOwnPropertySymbols","propertyIsEnumerable","decorators","desc","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","thisArg","_arguments","generator","fulfilled","rejected","done","trys","ops","verb","__createBinding","k2","__exportStar","__values","__read","__spread","__await","__asyncGenerator","asyncIterator","fulfill","settle","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","mod","__classPrivateFieldGet","receiver","privateMap","has","__classPrivateFieldSet","lodash_1","shallowEqual","reducers","equalityCheck","reducer","newState","args","flowRight","curryRight","combine_reducers_1","data_store_1","initialState","create_action_1","rxjs_1","operators_1","deep_freeze_1","is_observable_action_like_1","noop_action_transformer_1","noop_state_transformer_1","DataStore","_reducer","_state$","BehaviorSubject","_notification$","_dispatchers","_dispatchQueue$","mergeMap","dispatcher$","concatMap","action$","scan","states","_transformStates","transformedState","_b","stateA","stateB","_dispatchObservableAction","_dispatchThunkAction","_dispatchAction","subscriber","filters","state$","filterFn","skip","subscription","previousValue","_getDispatchError","error$","transformedAction$","_getDispatcher","tap","thunkAction","equalityCheck_1","previousValue_1","isFrozen","freeze","compose_reducers_1","create_data_store_1","create_error_action_1","form_builder_1","form_poster_1","formBuilder","FormBuilder","_createInput","url_utils_1","FormPoster","_formBuilder","handleUnload","isAbsoluteUrl","joinPaths","create_form_poster_1","pathA","pathB","path","removeLeadingSlash","shallowequal_1","cache_key_maps_1","CacheKeyResolver","isMatched","mapIndex","isTerminalCacheKeyMap","terminalMap","recentlyUsedMap","isRootCacheKeyMap","memoize_1","lodash_memoize_1","cache_key_resolver_1","Map","resolver","memoized","merge_1","BrowserSupport","canSupportRel","rel","relList","supports","browser_support_1","script_loader_1","stylesheet_loader_1","create_script_loader_1","create_stylesheet_loader_1","get_script_loader_1","get_stylesheet_loader_1","ScriptLoader","_browserSupport","_scripts","_preloadedScripts","onreadystatechange","event","loadScripts","preloadScript","prefetch","preloadedScript","preloadScripts","StylesheetLoader","_stylesheets","_preloadedStylesheets","stylesheet","children","loadStylesheets","preloadStylesheet","preloadedStylesheet","preloadStylesheets"],"sourceRoot":""}